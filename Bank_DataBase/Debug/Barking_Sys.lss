
Barking_Sys.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000754c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004fa  00800060  0000754c  000075e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003a  0080055a  0080055a  00007ada  2**0
                  ALLOC
  3 .stab         00007650  00000000  00000000  00007adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c52  00000000  00000000  0000f12c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00010d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000277  00000000  00000000  00010f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002953  00000000  00000000  00011215  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016b7  00000000  00000000  00013b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001570  00000000  00000000  0001521f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  00016790  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000036b  00000000  00000000  000169d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bf0  00000000  00000000  00016d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001792b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 e0 0b 	jmp	0x17c0	; 0x17c0 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	15 e0       	ldi	r17, 0x05	; 5
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f5 e7       	ldi	r31, 0x75	; 117
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 35       	cpi	r26, 0x5A	; 90
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	aa e5       	ldi	r26, 0x5A	; 90
      7a:	b5 e0       	ldi	r27, 0x05	; 5
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9a 38 	call	0x7134	; 0x7134 <main>
      8a:	0c 94 a4 3a 	jmp	0x7548	; 0x7548 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
      be:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__fixsfdi>:
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	7b 01       	movw	r14, r22
      f4:	8c 01       	movw	r16, r24
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	50 e0       	ldi	r21, 0x00	; 0
      fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     102:	88 23       	and	r24, r24
     104:	0c f0       	brlt	.+2      	; 0x108 <__fixsfdi+0x1e>
     106:	5c c0       	rjmp	.+184    	; 0x1c0 <__fixsfdi+0xd6>
     108:	c8 01       	movw	r24, r16
     10a:	b7 01       	movw	r22, r14
     10c:	90 58       	subi	r25, 0x80	; 128
     10e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     112:	21 95       	neg	r18
     114:	e1 e0       	ldi	r30, 0x01	; 1
     116:	12 16       	cp	r1, r18
     118:	08 f0       	brcs	.+2      	; 0x11c <__fixsfdi+0x32>
     11a:	e0 e0       	ldi	r30, 0x00	; 0
     11c:	31 95       	neg	r19
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	13 16       	cp	r1, r19
     122:	08 f0       	brcs	.+2      	; 0x126 <__fixsfdi+0x3c>
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	e3 2e       	mov	r14, r19
     128:	ee 1a       	sub	r14, r30
     12a:	e1 e0       	ldi	r30, 0x01	; 1
     12c:	3e 15       	cp	r19, r14
     12e:	08 f0       	brcs	.+2      	; 0x132 <__fixsfdi+0x48>
     130:	e0 e0       	ldi	r30, 0x00	; 0
     132:	fe 2b       	or	r31, r30
     134:	41 95       	neg	r20
     136:	a1 e0       	ldi	r26, 0x01	; 1
     138:	14 16       	cp	r1, r20
     13a:	08 f0       	brcs	.+2      	; 0x13e <__fixsfdi+0x54>
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	f4 2e       	mov	r15, r20
     140:	ff 1a       	sub	r15, r31
     142:	e1 e0       	ldi	r30, 0x01	; 1
     144:	4f 15       	cp	r20, r15
     146:	08 f0       	brcs	.+2      	; 0x14a <__fixsfdi+0x60>
     148:	e0 e0       	ldi	r30, 0x00	; 0
     14a:	ae 2b       	or	r26, r30
     14c:	51 95       	neg	r21
     14e:	f1 e0       	ldi	r31, 0x01	; 1
     150:	15 16       	cp	r1, r21
     152:	08 f0       	brcs	.+2      	; 0x156 <__fixsfdi+0x6c>
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	05 2f       	mov	r16, r21
     158:	0a 1b       	sub	r16, r26
     15a:	e1 e0       	ldi	r30, 0x01	; 1
     15c:	50 17       	cp	r21, r16
     15e:	08 f0       	brcs	.+2      	; 0x162 <__fixsfdi+0x78>
     160:	e0 e0       	ldi	r30, 0x00	; 0
     162:	fe 2b       	or	r31, r30
     164:	61 95       	neg	r22
     166:	a1 e0       	ldi	r26, 0x01	; 1
     168:	16 16       	cp	r1, r22
     16a:	08 f0       	brcs	.+2      	; 0x16e <__fixsfdi+0x84>
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	16 2f       	mov	r17, r22
     170:	1f 1b       	sub	r17, r31
     172:	e1 e0       	ldi	r30, 0x01	; 1
     174:	61 17       	cp	r22, r17
     176:	08 f0       	brcs	.+2      	; 0x17a <__fixsfdi+0x90>
     178:	e0 e0       	ldi	r30, 0x00	; 0
     17a:	ae 2b       	or	r26, r30
     17c:	71 95       	neg	r23
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	17 16       	cp	r1, r23
     182:	08 f0       	brcs	.+2      	; 0x186 <__fixsfdi+0x9c>
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	b7 2f       	mov	r27, r23
     188:	ba 1b       	sub	r27, r26
     18a:	e1 e0       	ldi	r30, 0x01	; 1
     18c:	7b 17       	cp	r23, r27
     18e:	08 f0       	brcs	.+2      	; 0x192 <__fixsfdi+0xa8>
     190:	e0 e0       	ldi	r30, 0x00	; 0
     192:	fe 2b       	or	r31, r30
     194:	81 95       	neg	r24
     196:	a1 e0       	ldi	r26, 0x01	; 1
     198:	18 16       	cp	r1, r24
     19a:	08 f0       	brcs	.+2      	; 0x19e <__fixsfdi+0xb4>
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	38 2f       	mov	r19, r24
     1a0:	3f 1b       	sub	r19, r31
     1a2:	f3 2f       	mov	r31, r19
     1a4:	e1 e0       	ldi	r30, 0x01	; 1
     1a6:	83 17       	cp	r24, r19
     1a8:	08 f0       	brcs	.+2      	; 0x1ac <__fixsfdi+0xc2>
     1aa:	e0 e0       	ldi	r30, 0x00	; 0
     1ac:	ae 2b       	or	r26, r30
     1ae:	91 95       	neg	r25
     1b0:	3e 2d       	mov	r19, r14
     1b2:	4f 2d       	mov	r20, r15
     1b4:	50 2f       	mov	r21, r16
     1b6:	61 2f       	mov	r22, r17
     1b8:	7b 2f       	mov	r23, r27
     1ba:	8f 2f       	mov	r24, r31
     1bc:	9a 1b       	sub	r25, r26
     1be:	04 c0       	rjmp	.+8      	; 0x1c8 <__fixsfdi+0xde>
     1c0:	c8 01       	movw	r24, r16
     1c2:	b7 01       	movw	r22, r14
     1c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__fixunssfdi>
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	08 95       	ret

000001d2 <__fixunssfdi>:
     1d2:	a0 e0       	ldi	r26, 0x00	; 0
     1d4:	b0 e0       	ldi	r27, 0x00	; 0
     1d6:	ef ee       	ldi	r30, 0xEF	; 239
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	0c 94 6d 3a 	jmp	0x74da	; 0x74da <__prologue_saves__>
     1de:	7b 01       	movw	r14, r22
     1e0:	8c 01       	movw	r16, r24
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	40 e8       	ldi	r20, 0x80	; 128
     1e8:	5f e3       	ldi	r21, 0x3F	; 63
     1ea:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     1ee:	88 23       	and	r24, r24
     1f0:	4c f4       	brge	.+18     	; 0x204 <__fixunssfdi+0x32>
     1f2:	aa 24       	eor	r10, r10
     1f4:	bb 24       	eor	r11, r11
     1f6:	cc 24       	eor	r12, r12
     1f8:	dd 24       	eor	r13, r13
     1fa:	ee 24       	eor	r14, r14
     1fc:	ff 24       	eor	r15, r15
     1fe:	00 e0       	ldi	r16, 0x00	; 0
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	86 c0       	rjmp	.+268    	; 0x310 <__fixunssfdi+0x13e>
     204:	c8 01       	movw	r24, r16
     206:	b7 01       	movw	r22, r14
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e8       	ldi	r20, 0x80	; 128
     20e:	5f e4       	ldi	r21, 0x4F	; 79
     210:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     214:	88 23       	and	r24, r24
     216:	54 f4       	brge	.+20     	; 0x22c <__fixunssfdi+0x5a>
     218:	c8 01       	movw	r24, r16
     21a:	b7 01       	movw	r22, r14
     21c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     220:	5b 01       	movw	r10, r22
     222:	6c 01       	movw	r12, r24
     224:	ee 24       	eor	r14, r14
     226:	ff 24       	eor	r15, r15
     228:	87 01       	movw	r16, r14
     22a:	72 c0       	rjmp	.+228    	; 0x310 <__fixunssfdi+0x13e>
     22c:	c8 01       	movw	r24, r16
     22e:	b7 01       	movw	r22, r14
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e8       	ldi	r20, 0x80	; 128
     236:	5f e5       	ldi	r21, 0x5F	; 95
     238:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
     23c:	87 fd       	sbrc	r24, 7
     23e:	0f c0       	rjmp	.+30     	; 0x25e <__fixunssfdi+0x8c>
     240:	aa 24       	eor	r10, r10
     242:	aa 94       	dec	r10
     244:	bb 24       	eor	r11, r11
     246:	ba 94       	dec	r11
     248:	cc 24       	eor	r12, r12
     24a:	ca 94       	dec	r12
     24c:	dd 24       	eor	r13, r13
     24e:	da 94       	dec	r13
     250:	ee 24       	eor	r14, r14
     252:	ea 94       	dec	r14
     254:	ff 24       	eor	r15, r15
     256:	fa 94       	dec	r15
     258:	0f ef       	ldi	r16, 0xFF	; 255
     25a:	1f ef       	ldi	r17, 0xFF	; 255
     25c:	59 c0       	rjmp	.+178    	; 0x310 <__fixunssfdi+0x13e>
     25e:	c8 01       	movw	r24, r16
     260:	b7 01       	movw	r22, r14
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	5f e2       	ldi	r21, 0x2F	; 47
     26a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     26e:	7b 01       	movw	r14, r22
     270:	8c 01       	movw	r16, r24
     272:	22 24       	eor	r2, r2
     274:	33 24       	eor	r3, r3
     276:	21 01       	movw	r4, r2
     278:	90 e1       	ldi	r25, 0x10	; 16
     27a:	a9 2e       	mov	r10, r25
     27c:	b1 2c       	mov	r11, r1
     27e:	c1 2c       	mov	r12, r1
     280:	d1 2c       	mov	r13, r1
     282:	c0 e0       	ldi	r28, 0x00	; 0
     284:	d0 e0       	ldi	r29, 0x00	; 0
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0a 2c       	mov	r0, r10
     290:	04 c0       	rjmp	.+8      	; 0x29a <__fixunssfdi+0xc8>
     292:	66 0f       	add	r22, r22
     294:	77 1f       	adc	r23, r23
     296:	88 1f       	adc	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	0a 94       	dec	r0
     29c:	d2 f7       	brpl	.-12     	; 0x292 <__fixunssfdi+0xc0>
     29e:	0e 94 23 06 	call	0xc46	; 0xc46 <__floatunsisf>
     2a2:	3b 01       	movw	r6, r22
     2a4:	4c 01       	movw	r8, r24
     2a6:	c8 01       	movw	r24, r16
     2a8:	b7 01       	movw	r22, r14
     2aa:	a4 01       	movw	r20, r8
     2ac:	93 01       	movw	r18, r6
     2ae:	0e 94 11 05 	call	0xa22	; 0xa22 <__gesf2>
     2b2:	88 23       	and	r24, r24
     2b4:	64 f0       	brlt	.+24     	; 0x2ce <__fixunssfdi+0xfc>
     2b6:	2a 28       	or	r2, r10
     2b8:	3b 28       	or	r3, r11
     2ba:	4c 28       	or	r4, r12
     2bc:	5d 28       	or	r5, r13
     2be:	c8 01       	movw	r24, r16
     2c0:	b7 01       	movw	r22, r14
     2c2:	a4 01       	movw	r20, r8
     2c4:	93 01       	movw	r18, r6
     2c6:	0e 94 35 04 	call	0x86a	; 0x86a <__divsf3>
     2ca:	7b 01       	movw	r14, r22
     2cc:	8c 01       	movw	r16, r24
     2ce:	d6 94       	lsr	r13
     2d0:	c7 94       	ror	r12
     2d2:	b7 94       	ror	r11
     2d4:	a7 94       	ror	r10
     2d6:	21 96       	adiw	r28, 0x01	; 1
     2d8:	c5 30       	cpi	r28, 0x05	; 5
     2da:	d1 05       	cpc	r29, r1
     2dc:	a1 f6       	brne	.-88     	; 0x286 <__fixunssfdi+0xb4>
     2de:	c8 01       	movw	r24, r16
     2e0:	b7 01       	movw	r22, r14
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e8       	ldi	r20, 0x80	; 128
     2e8:	5f e4       	ldi	r21, 0x4F	; 79
     2ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
     2ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     2f2:	5b 01       	movw	r10, r22
     2f4:	6c 01       	movw	r12, r24
     2f6:	9b 01       	movw	r18, r22
     2f8:	a6 01       	movw	r20, r12
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 2d       	mov	r16, r2
     304:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ashldi3>
     308:	59 01       	movw	r10, r18
     30a:	6a 01       	movw	r12, r20
     30c:	7b 01       	movw	r14, r22
     30e:	8c 01       	movw	r16, r24
     310:	95 01       	movw	r18, r10
     312:	a6 01       	movw	r20, r12
     314:	b7 01       	movw	r22, r14
     316:	c8 01       	movw	r24, r16
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	e2 e1       	ldi	r30, 0x12	; 18
     31e:	0c 94 89 3a 	jmp	0x7512	; 0x7512 <__epilogue_restores__>

00000322 <_fpadd_parts>:
     322:	a0 e0       	ldi	r26, 0x00	; 0
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	e7 e9       	ldi	r30, 0x97	; 151
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	0c 94 6d 3a 	jmp	0x74da	; 0x74da <__prologue_saves__>
     32e:	dc 01       	movw	r26, r24
     330:	2b 01       	movw	r4, r22
     332:	fa 01       	movw	r30, r20
     334:	9c 91       	ld	r25, X
     336:	92 30       	cpi	r25, 0x02	; 2
     338:	08 f4       	brcc	.+2      	; 0x33c <_fpadd_parts+0x1a>
     33a:	39 c1       	rjmp	.+626    	; 0x5ae <_fpadd_parts+0x28c>
     33c:	eb 01       	movw	r28, r22
     33e:	88 81       	ld	r24, Y
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	08 f4       	brcc	.+2      	; 0x346 <_fpadd_parts+0x24>
     344:	33 c1       	rjmp	.+614    	; 0x5ac <_fpadd_parts+0x28a>
     346:	94 30       	cpi	r25, 0x04	; 4
     348:	69 f4       	brne	.+26     	; 0x364 <_fpadd_parts+0x42>
     34a:	84 30       	cpi	r24, 0x04	; 4
     34c:	09 f0       	breq	.+2      	; 0x350 <_fpadd_parts+0x2e>
     34e:	2f c1       	rjmp	.+606    	; 0x5ae <_fpadd_parts+0x28c>
     350:	11 96       	adiw	r26, 0x01	; 1
     352:	9c 91       	ld	r25, X
     354:	11 97       	sbiw	r26, 0x01	; 1
     356:	89 81       	ldd	r24, Y+1	; 0x01
     358:	98 17       	cp	r25, r24
     35a:	09 f4       	brne	.+2      	; 0x35e <_fpadd_parts+0x3c>
     35c:	28 c1       	rjmp	.+592    	; 0x5ae <_fpadd_parts+0x28c>
     35e:	a5 e3       	ldi	r26, 0x35	; 53
     360:	b4 e0       	ldi	r27, 0x04	; 4
     362:	25 c1       	rjmp	.+586    	; 0x5ae <_fpadd_parts+0x28c>
     364:	84 30       	cpi	r24, 0x04	; 4
     366:	09 f4       	brne	.+2      	; 0x36a <_fpadd_parts+0x48>
     368:	21 c1       	rjmp	.+578    	; 0x5ac <_fpadd_parts+0x28a>
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	a9 f4       	brne	.+42     	; 0x398 <_fpadd_parts+0x76>
     36e:	92 30       	cpi	r25, 0x02	; 2
     370:	09 f0       	breq	.+2      	; 0x374 <_fpadd_parts+0x52>
     372:	1d c1       	rjmp	.+570    	; 0x5ae <_fpadd_parts+0x28c>
     374:	9a 01       	movw	r18, r20
     376:	ad 01       	movw	r20, r26
     378:	88 e0       	ldi	r24, 0x08	; 8
     37a:	ea 01       	movw	r28, r20
     37c:	09 90       	ld	r0, Y+
     37e:	ae 01       	movw	r20, r28
     380:	e9 01       	movw	r28, r18
     382:	09 92       	st	Y+, r0
     384:	9e 01       	movw	r18, r28
     386:	81 50       	subi	r24, 0x01	; 1
     388:	c1 f7       	brne	.-16     	; 0x37a <_fpadd_parts+0x58>
     38a:	e2 01       	movw	r28, r4
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	11 96       	adiw	r26, 0x01	; 1
     390:	9c 91       	ld	r25, X
     392:	89 23       	and	r24, r25
     394:	81 83       	std	Z+1, r24	; 0x01
     396:	08 c1       	rjmp	.+528    	; 0x5a8 <_fpadd_parts+0x286>
     398:	92 30       	cpi	r25, 0x02	; 2
     39a:	09 f4       	brne	.+2      	; 0x39e <_fpadd_parts+0x7c>
     39c:	07 c1       	rjmp	.+526    	; 0x5ac <_fpadd_parts+0x28a>
     39e:	12 96       	adiw	r26, 0x02	; 2
     3a0:	2d 90       	ld	r2, X+
     3a2:	3c 90       	ld	r3, X
     3a4:	13 97       	sbiw	r26, 0x03	; 3
     3a6:	eb 01       	movw	r28, r22
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	14 96       	adiw	r26, 0x04	; 4
     3ae:	ad 90       	ld	r10, X+
     3b0:	bd 90       	ld	r11, X+
     3b2:	cd 90       	ld	r12, X+
     3b4:	dc 90       	ld	r13, X
     3b6:	17 97       	sbiw	r26, 0x07	; 7
     3b8:	ec 80       	ldd	r14, Y+4	; 0x04
     3ba:	fd 80       	ldd	r15, Y+5	; 0x05
     3bc:	0e 81       	ldd	r16, Y+6	; 0x06
     3be:	1f 81       	ldd	r17, Y+7	; 0x07
     3c0:	91 01       	movw	r18, r2
     3c2:	28 1b       	sub	r18, r24
     3c4:	39 0b       	sbc	r19, r25
     3c6:	b9 01       	movw	r22, r18
     3c8:	37 ff       	sbrs	r19, 7
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <_fpadd_parts+0xb2>
     3cc:	66 27       	eor	r22, r22
     3ce:	77 27       	eor	r23, r23
     3d0:	62 1b       	sub	r22, r18
     3d2:	73 0b       	sbc	r23, r19
     3d4:	60 32       	cpi	r22, 0x20	; 32
     3d6:	71 05       	cpc	r23, r1
     3d8:	0c f0       	brlt	.+2      	; 0x3dc <_fpadd_parts+0xba>
     3da:	61 c0       	rjmp	.+194    	; 0x49e <_fpadd_parts+0x17c>
     3dc:	12 16       	cp	r1, r18
     3de:	13 06       	cpc	r1, r19
     3e0:	6c f5       	brge	.+90     	; 0x43c <_fpadd_parts+0x11a>
     3e2:	37 01       	movw	r6, r14
     3e4:	48 01       	movw	r8, r16
     3e6:	06 2e       	mov	r0, r22
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <_fpadd_parts+0xd0>
     3ea:	96 94       	lsr	r9
     3ec:	87 94       	ror	r8
     3ee:	77 94       	ror	r7
     3f0:	67 94       	ror	r6
     3f2:	0a 94       	dec	r0
     3f4:	d2 f7       	brpl	.-12     	; 0x3ea <_fpadd_parts+0xc8>
     3f6:	21 e0       	ldi	r18, 0x01	; 1
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	04 c0       	rjmp	.+8      	; 0x408 <_fpadd_parts+0xe6>
     400:	22 0f       	add	r18, r18
     402:	33 1f       	adc	r19, r19
     404:	44 1f       	adc	r20, r20
     406:	55 1f       	adc	r21, r21
     408:	6a 95       	dec	r22
     40a:	d2 f7       	brpl	.-12     	; 0x400 <_fpadd_parts+0xde>
     40c:	21 50       	subi	r18, 0x01	; 1
     40e:	30 40       	sbci	r19, 0x00	; 0
     410:	40 40       	sbci	r20, 0x00	; 0
     412:	50 40       	sbci	r21, 0x00	; 0
     414:	2e 21       	and	r18, r14
     416:	3f 21       	and	r19, r15
     418:	40 23       	and	r20, r16
     41a:	51 23       	and	r21, r17
     41c:	21 15       	cp	r18, r1
     41e:	31 05       	cpc	r19, r1
     420:	41 05       	cpc	r20, r1
     422:	51 05       	cpc	r21, r1
     424:	21 f0       	breq	.+8      	; 0x42e <_fpadd_parts+0x10c>
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	79 01       	movw	r14, r18
     430:	8a 01       	movw	r16, r20
     432:	e6 28       	or	r14, r6
     434:	f7 28       	or	r15, r7
     436:	08 29       	or	r16, r8
     438:	19 29       	or	r17, r9
     43a:	3c c0       	rjmp	.+120    	; 0x4b4 <_fpadd_parts+0x192>
     43c:	23 2b       	or	r18, r19
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <_fpadd_parts+0x192>
     440:	26 0e       	add	r2, r22
     442:	37 1e       	adc	r3, r23
     444:	35 01       	movw	r6, r10
     446:	46 01       	movw	r8, r12
     448:	06 2e       	mov	r0, r22
     44a:	04 c0       	rjmp	.+8      	; 0x454 <_fpadd_parts+0x132>
     44c:	96 94       	lsr	r9
     44e:	87 94       	ror	r8
     450:	77 94       	ror	r7
     452:	67 94       	ror	r6
     454:	0a 94       	dec	r0
     456:	d2 f7       	brpl	.-12     	; 0x44c <_fpadd_parts+0x12a>
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <_fpadd_parts+0x148>
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	44 1f       	adc	r20, r20
     468:	55 1f       	adc	r21, r21
     46a:	6a 95       	dec	r22
     46c:	d2 f7       	brpl	.-12     	; 0x462 <_fpadd_parts+0x140>
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	30 40       	sbci	r19, 0x00	; 0
     472:	40 40       	sbci	r20, 0x00	; 0
     474:	50 40       	sbci	r21, 0x00	; 0
     476:	2a 21       	and	r18, r10
     478:	3b 21       	and	r19, r11
     47a:	4c 21       	and	r20, r12
     47c:	5d 21       	and	r21, r13
     47e:	21 15       	cp	r18, r1
     480:	31 05       	cpc	r19, r1
     482:	41 05       	cpc	r20, r1
     484:	51 05       	cpc	r21, r1
     486:	21 f0       	breq	.+8      	; 0x490 <_fpadd_parts+0x16e>
     488:	21 e0       	ldi	r18, 0x01	; 1
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	50 e0       	ldi	r21, 0x00	; 0
     490:	59 01       	movw	r10, r18
     492:	6a 01       	movw	r12, r20
     494:	a6 28       	or	r10, r6
     496:	b7 28       	or	r11, r7
     498:	c8 28       	or	r12, r8
     49a:	d9 28       	or	r13, r9
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <_fpadd_parts+0x192>
     49e:	82 15       	cp	r24, r2
     4a0:	93 05       	cpc	r25, r3
     4a2:	2c f0       	brlt	.+10     	; 0x4ae <_fpadd_parts+0x18c>
     4a4:	1c 01       	movw	r2, r24
     4a6:	aa 24       	eor	r10, r10
     4a8:	bb 24       	eor	r11, r11
     4aa:	65 01       	movw	r12, r10
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <_fpadd_parts+0x192>
     4ae:	ee 24       	eor	r14, r14
     4b0:	ff 24       	eor	r15, r15
     4b2:	87 01       	movw	r16, r14
     4b4:	11 96       	adiw	r26, 0x01	; 1
     4b6:	9c 91       	ld	r25, X
     4b8:	d2 01       	movw	r26, r4
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	8c 91       	ld	r24, X
     4be:	98 17       	cp	r25, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <_fpadd_parts+0x1a2>
     4c2:	45 c0       	rjmp	.+138    	; 0x54e <_fpadd_parts+0x22c>
     4c4:	99 23       	and	r25, r25
     4c6:	39 f0       	breq	.+14     	; 0x4d6 <_fpadd_parts+0x1b4>
     4c8:	a8 01       	movw	r20, r16
     4ca:	97 01       	movw	r18, r14
     4cc:	2a 19       	sub	r18, r10
     4ce:	3b 09       	sbc	r19, r11
     4d0:	4c 09       	sbc	r20, r12
     4d2:	5d 09       	sbc	r21, r13
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <_fpadd_parts+0x1c0>
     4d6:	a6 01       	movw	r20, r12
     4d8:	95 01       	movw	r18, r10
     4da:	2e 19       	sub	r18, r14
     4dc:	3f 09       	sbc	r19, r15
     4de:	40 0b       	sbc	r20, r16
     4e0:	51 0b       	sbc	r21, r17
     4e2:	57 fd       	sbrc	r21, 7
     4e4:	08 c0       	rjmp	.+16     	; 0x4f6 <_fpadd_parts+0x1d4>
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	33 82       	std	Z+3, r3	; 0x03
     4ea:	22 82       	std	Z+2, r2	; 0x02
     4ec:	24 83       	std	Z+4, r18	; 0x04
     4ee:	35 83       	std	Z+5, r19	; 0x05
     4f0:	46 83       	std	Z+6, r20	; 0x06
     4f2:	57 83       	std	Z+7, r21	; 0x07
     4f4:	1d c0       	rjmp	.+58     	; 0x530 <_fpadd_parts+0x20e>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	81 83       	std	Z+1, r24	; 0x01
     4fa:	33 82       	std	Z+3, r3	; 0x03
     4fc:	22 82       	std	Z+2, r2	; 0x02
     4fe:	88 27       	eor	r24, r24
     500:	99 27       	eor	r25, r25
     502:	dc 01       	movw	r26, r24
     504:	82 1b       	sub	r24, r18
     506:	93 0b       	sbc	r25, r19
     508:	a4 0b       	sbc	r26, r20
     50a:	b5 0b       	sbc	r27, r21
     50c:	84 83       	std	Z+4, r24	; 0x04
     50e:	95 83       	std	Z+5, r25	; 0x05
     510:	a6 83       	std	Z+6, r26	; 0x06
     512:	b7 83       	std	Z+7, r27	; 0x07
     514:	0d c0       	rjmp	.+26     	; 0x530 <_fpadd_parts+0x20e>
     516:	22 0f       	add	r18, r18
     518:	33 1f       	adc	r19, r19
     51a:	44 1f       	adc	r20, r20
     51c:	55 1f       	adc	r21, r21
     51e:	24 83       	std	Z+4, r18	; 0x04
     520:	35 83       	std	Z+5, r19	; 0x05
     522:	46 83       	std	Z+6, r20	; 0x06
     524:	57 83       	std	Z+7, r21	; 0x07
     526:	82 81       	ldd	r24, Z+2	; 0x02
     528:	93 81       	ldd	r25, Z+3	; 0x03
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	93 83       	std	Z+3, r25	; 0x03
     52e:	82 83       	std	Z+2, r24	; 0x02
     530:	24 81       	ldd	r18, Z+4	; 0x04
     532:	35 81       	ldd	r19, Z+5	; 0x05
     534:	46 81       	ldd	r20, Z+6	; 0x06
     536:	57 81       	ldd	r21, Z+7	; 0x07
     538:	da 01       	movw	r26, r20
     53a:	c9 01       	movw	r24, r18
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	a1 09       	sbc	r26, r1
     540:	b1 09       	sbc	r27, r1
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	9f 4f       	sbci	r25, 0xFF	; 255
     546:	af 4f       	sbci	r26, 0xFF	; 255
     548:	bf 43       	sbci	r27, 0x3F	; 63
     54a:	28 f3       	brcs	.-54     	; 0x516 <_fpadd_parts+0x1f4>
     54c:	0b c0       	rjmp	.+22     	; 0x564 <_fpadd_parts+0x242>
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	33 82       	std	Z+3, r3	; 0x03
     552:	22 82       	std	Z+2, r2	; 0x02
     554:	ea 0c       	add	r14, r10
     556:	fb 1c       	adc	r15, r11
     558:	0c 1d       	adc	r16, r12
     55a:	1d 1d       	adc	r17, r13
     55c:	e4 82       	std	Z+4, r14	; 0x04
     55e:	f5 82       	std	Z+5, r15	; 0x05
     560:	06 83       	std	Z+6, r16	; 0x06
     562:	17 83       	std	Z+7, r17	; 0x07
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	80 83       	st	Z, r24
     568:	24 81       	ldd	r18, Z+4	; 0x04
     56a:	35 81       	ldd	r19, Z+5	; 0x05
     56c:	46 81       	ldd	r20, Z+6	; 0x06
     56e:	57 81       	ldd	r21, Z+7	; 0x07
     570:	57 ff       	sbrs	r21, 7
     572:	1a c0       	rjmp	.+52     	; 0x5a8 <_fpadd_parts+0x286>
     574:	c9 01       	movw	r24, r18
     576:	aa 27       	eor	r26, r26
     578:	97 fd       	sbrc	r25, 7
     57a:	a0 95       	com	r26
     57c:	ba 2f       	mov	r27, r26
     57e:	81 70       	andi	r24, 0x01	; 1
     580:	90 70       	andi	r25, 0x00	; 0
     582:	a0 70       	andi	r26, 0x00	; 0
     584:	b0 70       	andi	r27, 0x00	; 0
     586:	56 95       	lsr	r21
     588:	47 95       	ror	r20
     58a:	37 95       	ror	r19
     58c:	27 95       	ror	r18
     58e:	82 2b       	or	r24, r18
     590:	93 2b       	or	r25, r19
     592:	a4 2b       	or	r26, r20
     594:	b5 2b       	or	r27, r21
     596:	84 83       	std	Z+4, r24	; 0x04
     598:	95 83       	std	Z+5, r25	; 0x05
     59a:	a6 83       	std	Z+6, r26	; 0x06
     59c:	b7 83       	std	Z+7, r27	; 0x07
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	93 83       	std	Z+3, r25	; 0x03
     5a6:	82 83       	std	Z+2, r24	; 0x02
     5a8:	df 01       	movw	r26, r30
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <_fpadd_parts+0x28c>
     5ac:	d2 01       	movw	r26, r4
     5ae:	cd 01       	movw	r24, r26
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	e2 e1       	ldi	r30, 0x12	; 18
     5b6:	0c 94 89 3a 	jmp	0x7512	; 0x7512 <__epilogue_restores__>

000005ba <__subsf3>:
     5ba:	a0 e2       	ldi	r26, 0x20	; 32
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	e3 ee       	ldi	r30, 0xE3	; 227
     5c0:	f2 e0       	ldi	r31, 0x02	; 2
     5c2:	0c 94 79 3a 	jmp	0x74f2	; 0x74f2 <__prologue_saves__+0x18>
     5c6:	69 83       	std	Y+1, r22	; 0x01
     5c8:	7a 83       	std	Y+2, r23	; 0x02
     5ca:	8b 83       	std	Y+3, r24	; 0x03
     5cc:	9c 83       	std	Y+4, r25	; 0x04
     5ce:	2d 83       	std	Y+5, r18	; 0x05
     5d0:	3e 83       	std	Y+6, r19	; 0x06
     5d2:	4f 83       	std	Y+7, r20	; 0x07
     5d4:	58 87       	std	Y+8, r21	; 0x08
     5d6:	e9 e0       	ldi	r30, 0x09	; 9
     5d8:	ee 2e       	mov	r14, r30
     5da:	f1 2c       	mov	r15, r1
     5dc:	ec 0e       	add	r14, r28
     5de:	fd 1e       	adc	r15, r29
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	b7 01       	movw	r22, r14
     5e6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5ea:	8e 01       	movw	r16, r28
     5ec:	0f 5e       	subi	r16, 0xEF	; 239
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	ce 01       	movw	r24, r28
     5f2:	05 96       	adiw	r24, 0x05	; 5
     5f4:	b8 01       	movw	r22, r16
     5f6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     5fa:	8a 89       	ldd	r24, Y+18	; 0x12
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	89 27       	eor	r24, r25
     600:	8a 8b       	std	Y+18, r24	; 0x12
     602:	c7 01       	movw	r24, r14
     604:	b8 01       	movw	r22, r16
     606:	ae 01       	movw	r20, r28
     608:	47 5e       	subi	r20, 0xE7	; 231
     60a:	5f 4f       	sbci	r21, 0xFF	; 255
     60c:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     610:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     614:	a0 96       	adiw	r28, 0x20	; 32
     616:	e6 e0       	ldi	r30, 0x06	; 6
     618:	0c 94 95 3a 	jmp	0x752a	; 0x752a <__epilogue_restores__+0x18>

0000061c <__addsf3>:
     61c:	a0 e2       	ldi	r26, 0x20	; 32
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	e4 e1       	ldi	r30, 0x14	; 20
     622:	f3 e0       	ldi	r31, 0x03	; 3
     624:	0c 94 79 3a 	jmp	0x74f2	; 0x74f2 <__prologue_saves__+0x18>
     628:	69 83       	std	Y+1, r22	; 0x01
     62a:	7a 83       	std	Y+2, r23	; 0x02
     62c:	8b 83       	std	Y+3, r24	; 0x03
     62e:	9c 83       	std	Y+4, r25	; 0x04
     630:	2d 83       	std	Y+5, r18	; 0x05
     632:	3e 83       	std	Y+6, r19	; 0x06
     634:	4f 83       	std	Y+7, r20	; 0x07
     636:	58 87       	std	Y+8, r21	; 0x08
     638:	f9 e0       	ldi	r31, 0x09	; 9
     63a:	ef 2e       	mov	r14, r31
     63c:	f1 2c       	mov	r15, r1
     63e:	ec 0e       	add	r14, r28
     640:	fd 1e       	adc	r15, r29
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	b7 01       	movw	r22, r14
     648:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     64c:	8e 01       	movw	r16, r28
     64e:	0f 5e       	subi	r16, 0xEF	; 239
     650:	1f 4f       	sbci	r17, 0xFF	; 255
     652:	ce 01       	movw	r24, r28
     654:	05 96       	adiw	r24, 0x05	; 5
     656:	b8 01       	movw	r22, r16
     658:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     65c:	c7 01       	movw	r24, r14
     65e:	b8 01       	movw	r22, r16
     660:	ae 01       	movw	r20, r28
     662:	47 5e       	subi	r20, 0xE7	; 231
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	0e 94 91 01 	call	0x322	; 0x322 <_fpadd_parts>
     66a:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     66e:	a0 96       	adiw	r28, 0x20	; 32
     670:	e6 e0       	ldi	r30, 0x06	; 6
     672:	0c 94 95 3a 	jmp	0x752a	; 0x752a <__epilogue_restores__+0x18>

00000676 <__mulsf3>:
     676:	a0 e2       	ldi	r26, 0x20	; 32
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e1 e4       	ldi	r30, 0x41	; 65
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	0c 94 6d 3a 	jmp	0x74da	; 0x74da <__prologue_saves__>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d 83       	std	Y+5, r18	; 0x05
     68c:	3e 83       	std	Y+6, r19	; 0x06
     68e:	4f 83       	std	Y+7, r20	; 0x07
     690:	58 87       	std	Y+8, r21	; 0x08
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	be 01       	movw	r22, r28
     698:	67 5f       	subi	r22, 0xF7	; 247
     69a:	7f 4f       	sbci	r23, 0xFF	; 255
     69c:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6a0:	ce 01       	movw	r24, r28
     6a2:	05 96       	adiw	r24, 0x05	; 5
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5e       	subi	r22, 0xEF	; 239
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     6ae:	99 85       	ldd	r25, Y+9	; 0x09
     6b0:	92 30       	cpi	r25, 0x02	; 2
     6b2:	88 f0       	brcs	.+34     	; 0x6d6 <__mulsf3+0x60>
     6b4:	89 89       	ldd	r24, Y+17	; 0x11
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	c8 f0       	brcs	.+50     	; 0x6ec <__mulsf3+0x76>
     6ba:	94 30       	cpi	r25, 0x04	; 4
     6bc:	19 f4       	brne	.+6      	; 0x6c4 <__mulsf3+0x4e>
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	51 f4       	brne	.+20     	; 0x6d6 <__mulsf3+0x60>
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__mulsf3+0x56>
     6c4:	84 30       	cpi	r24, 0x04	; 4
     6c6:	29 f4       	brne	.+10     	; 0x6d2 <__mulsf3+0x5c>
     6c8:	92 30       	cpi	r25, 0x02	; 2
     6ca:	81 f4       	brne	.+32     	; 0x6ec <__mulsf3+0x76>
     6cc:	85 e3       	ldi	r24, 0x35	; 53
     6ce:	94 e0       	ldi	r25, 0x04	; 4
     6d0:	c6 c0       	rjmp	.+396    	; 0x85e <__mulsf3+0x1e8>
     6d2:	92 30       	cpi	r25, 0x02	; 2
     6d4:	49 f4       	brne	.+18     	; 0x6e8 <__mulsf3+0x72>
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6da:	8a 89       	ldd	r24, Y+18	; 0x12
     6dc:	98 13       	cpse	r25, r24
     6de:	21 e0       	ldi	r18, 0x01	; 1
     6e0:	2a 87       	std	Y+10, r18	; 0x0a
     6e2:	ce 01       	movw	r24, r28
     6e4:	09 96       	adiw	r24, 0x09	; 9
     6e6:	bb c0       	rjmp	.+374    	; 0x85e <__mulsf3+0x1e8>
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	49 f4       	brne	.+18     	; 0x6fe <__mulsf3+0x88>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	9a 85       	ldd	r25, Y+10	; 0x0a
     6f0:	8a 89       	ldd	r24, Y+18	; 0x12
     6f2:	98 13       	cpse	r25, r24
     6f4:	21 e0       	ldi	r18, 0x01	; 1
     6f6:	2a 8b       	std	Y+18, r18	; 0x12
     6f8:	ce 01       	movw	r24, r28
     6fa:	41 96       	adiw	r24, 0x11	; 17
     6fc:	b0 c0       	rjmp	.+352    	; 0x85e <__mulsf3+0x1e8>
     6fe:	2d 84       	ldd	r2, Y+13	; 0x0d
     700:	3e 84       	ldd	r3, Y+14	; 0x0e
     702:	4f 84       	ldd	r4, Y+15	; 0x0f
     704:	58 88       	ldd	r5, Y+16	; 0x10
     706:	6d 88       	ldd	r6, Y+21	; 0x15
     708:	7e 88       	ldd	r7, Y+22	; 0x16
     70a:	8f 88       	ldd	r8, Y+23	; 0x17
     70c:	98 8c       	ldd	r9, Y+24	; 0x18
     70e:	ee 24       	eor	r14, r14
     710:	ff 24       	eor	r15, r15
     712:	87 01       	movw	r16, r14
     714:	aa 24       	eor	r10, r10
     716:	bb 24       	eor	r11, r11
     718:	65 01       	movw	r12, r10
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	e0 e0       	ldi	r30, 0x00	; 0
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	c1 01       	movw	r24, r2
     728:	81 70       	andi	r24, 0x01	; 1
     72a:	90 70       	andi	r25, 0x00	; 0
     72c:	89 2b       	or	r24, r25
     72e:	e9 f0       	breq	.+58     	; 0x76a <__mulsf3+0xf4>
     730:	e6 0c       	add	r14, r6
     732:	f7 1c       	adc	r15, r7
     734:	08 1d       	adc	r16, r8
     736:	19 1d       	adc	r17, r9
     738:	9a 01       	movw	r18, r20
     73a:	ab 01       	movw	r20, r22
     73c:	2a 0d       	add	r18, r10
     73e:	3b 1d       	adc	r19, r11
     740:	4c 1d       	adc	r20, r12
     742:	5d 1d       	adc	r21, r13
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	e6 14       	cp	r14, r6
     74e:	f7 04       	cpc	r15, r7
     750:	08 05       	cpc	r16, r8
     752:	19 05       	cpc	r17, r9
     754:	20 f4       	brcc	.+8      	; 0x75e <__mulsf3+0xe8>
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a0 e0       	ldi	r26, 0x00	; 0
     75c:	b0 e0       	ldi	r27, 0x00	; 0
     75e:	ba 01       	movw	r22, r20
     760:	a9 01       	movw	r20, r18
     762:	48 0f       	add	r20, r24
     764:	59 1f       	adc	r21, r25
     766:	6a 1f       	adc	r22, r26
     768:	7b 1f       	adc	r23, r27
     76a:	aa 0c       	add	r10, r10
     76c:	bb 1c       	adc	r11, r11
     76e:	cc 1c       	adc	r12, r12
     770:	dd 1c       	adc	r13, r13
     772:	97 fe       	sbrs	r9, 7
     774:	08 c0       	rjmp	.+16     	; 0x786 <__mulsf3+0x110>
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	a8 2a       	or	r10, r24
     780:	b9 2a       	or	r11, r25
     782:	ca 2a       	or	r12, r26
     784:	db 2a       	or	r13, r27
     786:	31 96       	adiw	r30, 0x01	; 1
     788:	e0 32       	cpi	r30, 0x20	; 32
     78a:	f1 05       	cpc	r31, r1
     78c:	49 f0       	breq	.+18     	; 0x7a0 <__mulsf3+0x12a>
     78e:	66 0c       	add	r6, r6
     790:	77 1c       	adc	r7, r7
     792:	88 1c       	adc	r8, r8
     794:	99 1c       	adc	r9, r9
     796:	56 94       	lsr	r5
     798:	47 94       	ror	r4
     79a:	37 94       	ror	r3
     79c:	27 94       	ror	r2
     79e:	c3 cf       	rjmp	.-122    	; 0x726 <__mulsf3+0xb0>
     7a0:	fa 85       	ldd	r31, Y+10	; 0x0a
     7a2:	ea 89       	ldd	r30, Y+18	; 0x12
     7a4:	2b 89       	ldd	r18, Y+19	; 0x13
     7a6:	3c 89       	ldd	r19, Y+20	; 0x14
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	28 0f       	add	r18, r24
     7ae:	39 1f       	adc	r19, r25
     7b0:	2e 5f       	subi	r18, 0xFE	; 254
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	17 c0       	rjmp	.+46     	; 0x7e4 <__mulsf3+0x16e>
     7b6:	ca 01       	movw	r24, r20
     7b8:	81 70       	andi	r24, 0x01	; 1
     7ba:	90 70       	andi	r25, 0x00	; 0
     7bc:	89 2b       	or	r24, r25
     7be:	61 f0       	breq	.+24     	; 0x7d8 <__mulsf3+0x162>
     7c0:	16 95       	lsr	r17
     7c2:	07 95       	ror	r16
     7c4:	f7 94       	ror	r15
     7c6:	e7 94       	ror	r14
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e8       	ldi	r27, 0x80	; 128
     7d0:	e8 2a       	or	r14, r24
     7d2:	f9 2a       	or	r15, r25
     7d4:	0a 2b       	or	r16, r26
     7d6:	1b 2b       	or	r17, r27
     7d8:	76 95       	lsr	r23
     7da:	67 95       	ror	r22
     7dc:	57 95       	ror	r21
     7de:	47 95       	ror	r20
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	77 fd       	sbrc	r23, 7
     7e6:	e7 cf       	rjmp	.-50     	; 0x7b6 <__mulsf3+0x140>
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <__mulsf3+0x18c>
     7ea:	44 0f       	add	r20, r20
     7ec:	55 1f       	adc	r21, r21
     7ee:	66 1f       	adc	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	17 fd       	sbrc	r17, 7
     7f4:	41 60       	ori	r20, 0x01	; 1
     7f6:	ee 0c       	add	r14, r14
     7f8:	ff 1c       	adc	r15, r15
     7fa:	00 1f       	adc	r16, r16
     7fc:	11 1f       	adc	r17, r17
     7fe:	21 50       	subi	r18, 0x01	; 1
     800:	30 40       	sbci	r19, 0x00	; 0
     802:	40 30       	cpi	r20, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	59 07       	cpc	r21, r25
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	69 07       	cpc	r22, r25
     80c:	90 e4       	ldi	r25, 0x40	; 64
     80e:	79 07       	cpc	r23, r25
     810:	60 f3       	brcs	.-40     	; 0x7ea <__mulsf3+0x174>
     812:	2b 8f       	std	Y+27, r18	; 0x1b
     814:	3c 8f       	std	Y+28, r19	; 0x1c
     816:	db 01       	movw	r26, r22
     818:	ca 01       	movw	r24, r20
     81a:	8f 77       	andi	r24, 0x7F	; 127
     81c:	90 70       	andi	r25, 0x00	; 0
     81e:	a0 70       	andi	r26, 0x00	; 0
     820:	b0 70       	andi	r27, 0x00	; 0
     822:	80 34       	cpi	r24, 0x40	; 64
     824:	91 05       	cpc	r25, r1
     826:	a1 05       	cpc	r26, r1
     828:	b1 05       	cpc	r27, r1
     82a:	61 f4       	brne	.+24     	; 0x844 <__mulsf3+0x1ce>
     82c:	47 fd       	sbrc	r20, 7
     82e:	0a c0       	rjmp	.+20     	; 0x844 <__mulsf3+0x1ce>
     830:	e1 14       	cp	r14, r1
     832:	f1 04       	cpc	r15, r1
     834:	01 05       	cpc	r16, r1
     836:	11 05       	cpc	r17, r1
     838:	29 f0       	breq	.+10     	; 0x844 <__mulsf3+0x1ce>
     83a:	40 5c       	subi	r20, 0xC0	; 192
     83c:	5f 4f       	sbci	r21, 0xFF	; 255
     83e:	6f 4f       	sbci	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	40 78       	andi	r20, 0x80	; 128
     844:	1a 8e       	std	Y+26, r1	; 0x1a
     846:	fe 17       	cp	r31, r30
     848:	11 f0       	breq	.+4      	; 0x84e <__mulsf3+0x1d8>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	8a 8f       	std	Y+26, r24	; 0x1a
     84e:	4d 8f       	std	Y+29, r20	; 0x1d
     850:	5e 8f       	std	Y+30, r21	; 0x1e
     852:	6f 8f       	std	Y+31, r22	; 0x1f
     854:	78 a3       	std	Y+32, r23	; 0x20
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	89 8f       	std	Y+25, r24	; 0x19
     85a:	ce 01       	movw	r24, r28
     85c:	49 96       	adiw	r24, 0x19	; 25
     85e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     862:	a0 96       	adiw	r28, 0x20	; 32
     864:	e2 e1       	ldi	r30, 0x12	; 18
     866:	0c 94 89 3a 	jmp	0x7512	; 0x7512 <__epilogue_restores__>

0000086a <__divsf3>:
     86a:	a8 e1       	ldi	r26, 0x18	; 24
     86c:	b0 e0       	ldi	r27, 0x00	; 0
     86e:	eb e3       	ldi	r30, 0x3B	; 59
     870:	f4 e0       	ldi	r31, 0x04	; 4
     872:	0c 94 75 3a 	jmp	0x74ea	; 0x74ea <__prologue_saves__+0x10>
     876:	69 83       	std	Y+1, r22	; 0x01
     878:	7a 83       	std	Y+2, r23	; 0x02
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	2d 83       	std	Y+5, r18	; 0x05
     880:	3e 83       	std	Y+6, r19	; 0x06
     882:	4f 83       	std	Y+7, r20	; 0x07
     884:	58 87       	std	Y+8, r21	; 0x08
     886:	b9 e0       	ldi	r27, 0x09	; 9
     888:	eb 2e       	mov	r14, r27
     88a:	f1 2c       	mov	r15, r1
     88c:	ec 0e       	add	r14, r28
     88e:	fd 1e       	adc	r15, r29
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	b7 01       	movw	r22, r14
     896:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     89a:	8e 01       	movw	r16, r28
     89c:	0f 5e       	subi	r16, 0xEF	; 239
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	ce 01       	movw	r24, r28
     8a2:	05 96       	adiw	r24, 0x05	; 5
     8a4:	b8 01       	movw	r22, r16
     8a6:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     8aa:	29 85       	ldd	r18, Y+9	; 0x09
     8ac:	22 30       	cpi	r18, 0x02	; 2
     8ae:	08 f4       	brcc	.+2      	; 0x8b2 <__divsf3+0x48>
     8b0:	7e c0       	rjmp	.+252    	; 0x9ae <__divsf3+0x144>
     8b2:	39 89       	ldd	r19, Y+17	; 0x11
     8b4:	32 30       	cpi	r19, 0x02	; 2
     8b6:	10 f4       	brcc	.+4      	; 0x8bc <__divsf3+0x52>
     8b8:	b8 01       	movw	r22, r16
     8ba:	7c c0       	rjmp	.+248    	; 0x9b4 <__divsf3+0x14a>
     8bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     8be:	9a 89       	ldd	r25, Y+18	; 0x12
     8c0:	89 27       	eor	r24, r25
     8c2:	8a 87       	std	Y+10, r24	; 0x0a
     8c4:	24 30       	cpi	r18, 0x04	; 4
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__divsf3+0x62>
     8c8:	22 30       	cpi	r18, 0x02	; 2
     8ca:	31 f4       	brne	.+12     	; 0x8d8 <__divsf3+0x6e>
     8cc:	23 17       	cp	r18, r19
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <__divsf3+0x68>
     8d0:	6e c0       	rjmp	.+220    	; 0x9ae <__divsf3+0x144>
     8d2:	65 e3       	ldi	r22, 0x35	; 53
     8d4:	74 e0       	ldi	r23, 0x04	; 4
     8d6:	6e c0       	rjmp	.+220    	; 0x9b4 <__divsf3+0x14a>
     8d8:	34 30       	cpi	r19, 0x04	; 4
     8da:	39 f4       	brne	.+14     	; 0x8ea <__divsf3+0x80>
     8dc:	1d 86       	std	Y+13, r1	; 0x0d
     8de:	1e 86       	std	Y+14, r1	; 0x0e
     8e0:	1f 86       	std	Y+15, r1	; 0x0f
     8e2:	18 8a       	std	Y+16, r1	; 0x10
     8e4:	1c 86       	std	Y+12, r1	; 0x0c
     8e6:	1b 86       	std	Y+11, r1	; 0x0b
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <__divsf3+0x88>
     8ea:	32 30       	cpi	r19, 0x02	; 2
     8ec:	21 f4       	brne	.+8      	; 0x8f6 <__divsf3+0x8c>
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	89 87       	std	Y+9, r24	; 0x09
     8f2:	b7 01       	movw	r22, r14
     8f4:	5f c0       	rjmp	.+190    	; 0x9b4 <__divsf3+0x14a>
     8f6:	2b 85       	ldd	r18, Y+11	; 0x0b
     8f8:	3c 85       	ldd	r19, Y+12	; 0x0c
     8fa:	8b 89       	ldd	r24, Y+19	; 0x13
     8fc:	9c 89       	ldd	r25, Y+20	; 0x14
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	3c 87       	std	Y+12, r19	; 0x0c
     904:	2b 87       	std	Y+11, r18	; 0x0b
     906:	ed 84       	ldd	r14, Y+13	; 0x0d
     908:	fe 84       	ldd	r15, Y+14	; 0x0e
     90a:	0f 85       	ldd	r16, Y+15	; 0x0f
     90c:	18 89       	ldd	r17, Y+16	; 0x10
     90e:	ad 88       	ldd	r10, Y+21	; 0x15
     910:	be 88       	ldd	r11, Y+22	; 0x16
     912:	cf 88       	ldd	r12, Y+23	; 0x17
     914:	d8 8c       	ldd	r13, Y+24	; 0x18
     916:	ea 14       	cp	r14, r10
     918:	fb 04       	cpc	r15, r11
     91a:	0c 05       	cpc	r16, r12
     91c:	1d 05       	cpc	r17, r13
     91e:	40 f4       	brcc	.+16     	; 0x930 <__divsf3+0xc6>
     920:	ee 0c       	add	r14, r14
     922:	ff 1c       	adc	r15, r15
     924:	00 1f       	adc	r16, r16
     926:	11 1f       	adc	r17, r17
     928:	21 50       	subi	r18, 0x01	; 1
     92a:	30 40       	sbci	r19, 0x00	; 0
     92c:	3c 87       	std	Y+12, r19	; 0x0c
     92e:	2b 87       	std	Y+11, r18	; 0x0b
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e4       	ldi	r27, 0x40	; 64
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	ea 14       	cp	r14, r10
     946:	fb 04       	cpc	r15, r11
     948:	0c 05       	cpc	r16, r12
     94a:	1d 05       	cpc	r17, r13
     94c:	40 f0       	brcs	.+16     	; 0x95e <__divsf3+0xf4>
     94e:	28 2b       	or	r18, r24
     950:	39 2b       	or	r19, r25
     952:	4a 2b       	or	r20, r26
     954:	5b 2b       	or	r21, r27
     956:	ea 18       	sub	r14, r10
     958:	fb 08       	sbc	r15, r11
     95a:	0c 09       	sbc	r16, r12
     95c:	1d 09       	sbc	r17, r13
     95e:	b6 95       	lsr	r27
     960:	a7 95       	ror	r26
     962:	97 95       	ror	r25
     964:	87 95       	ror	r24
     966:	ee 0c       	add	r14, r14
     968:	ff 1c       	adc	r15, r15
     96a:	00 1f       	adc	r16, r16
     96c:	11 1f       	adc	r17, r17
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	6f 31       	cpi	r22, 0x1F	; 31
     974:	71 05       	cpc	r23, r1
     976:	31 f7       	brne	.-52     	; 0x944 <__divsf3+0xda>
     978:	da 01       	movw	r26, r20
     97a:	c9 01       	movw	r24, r18
     97c:	8f 77       	andi	r24, 0x7F	; 127
     97e:	90 70       	andi	r25, 0x00	; 0
     980:	a0 70       	andi	r26, 0x00	; 0
     982:	b0 70       	andi	r27, 0x00	; 0
     984:	80 34       	cpi	r24, 0x40	; 64
     986:	91 05       	cpc	r25, r1
     988:	a1 05       	cpc	r26, r1
     98a:	b1 05       	cpc	r27, r1
     98c:	61 f4       	brne	.+24     	; 0x9a6 <__divsf3+0x13c>
     98e:	27 fd       	sbrc	r18, 7
     990:	0a c0       	rjmp	.+20     	; 0x9a6 <__divsf3+0x13c>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	29 f0       	breq	.+10     	; 0x9a6 <__divsf3+0x13c>
     99c:	20 5c       	subi	r18, 0xC0	; 192
     99e:	3f 4f       	sbci	r19, 0xFF	; 255
     9a0:	4f 4f       	sbci	r20, 0xFF	; 255
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	20 78       	andi	r18, 0x80	; 128
     9a6:	2d 87       	std	Y+13, r18	; 0x0d
     9a8:	3e 87       	std	Y+14, r19	; 0x0e
     9aa:	4f 87       	std	Y+15, r20	; 0x0f
     9ac:	58 8b       	std	Y+16, r21	; 0x10
     9ae:	be 01       	movw	r22, r28
     9b0:	67 5f       	subi	r22, 0xF7	; 247
     9b2:	7f 4f       	sbci	r23, 0xFF	; 255
     9b4:	cb 01       	movw	r24, r22
     9b6:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     9ba:	68 96       	adiw	r28, 0x18	; 24
     9bc:	ea e0       	ldi	r30, 0x0A	; 10
     9be:	0c 94 91 3a 	jmp	0x7522	; 0x7522 <__epilogue_restores__+0x10>

000009c2 <__gtsf2>:
     9c2:	a8 e1       	ldi	r26, 0x18	; 24
     9c4:	b0 e0       	ldi	r27, 0x00	; 0
     9c6:	e7 ee       	ldi	r30, 0xE7	; 231
     9c8:	f4 e0       	ldi	r31, 0x04	; 4
     9ca:	0c 94 79 3a 	jmp	0x74f2	; 0x74f2 <__prologue_saves__+0x18>
     9ce:	69 83       	std	Y+1, r22	; 0x01
     9d0:	7a 83       	std	Y+2, r23	; 0x02
     9d2:	8b 83       	std	Y+3, r24	; 0x03
     9d4:	9c 83       	std	Y+4, r25	; 0x04
     9d6:	2d 83       	std	Y+5, r18	; 0x05
     9d8:	3e 83       	std	Y+6, r19	; 0x06
     9da:	4f 83       	std	Y+7, r20	; 0x07
     9dc:	58 87       	std	Y+8, r21	; 0x08
     9de:	89 e0       	ldi	r24, 0x09	; 9
     9e0:	e8 2e       	mov	r14, r24
     9e2:	f1 2c       	mov	r15, r1
     9e4:	ec 0e       	add	r14, r28
     9e6:	fd 1e       	adc	r15, r29
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	b7 01       	movw	r22, r14
     9ee:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     9f2:	8e 01       	movw	r16, r28
     9f4:	0f 5e       	subi	r16, 0xEF	; 239
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
     9f8:	ce 01       	movw	r24, r28
     9fa:	05 96       	adiw	r24, 0x05	; 5
     9fc:	b8 01       	movw	r22, r16
     9fe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a02:	89 85       	ldd	r24, Y+9	; 0x09
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	40 f0       	brcs	.+16     	; 0xa18 <__gtsf2+0x56>
     a08:	89 89       	ldd	r24, Y+17	; 0x11
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	28 f0       	brcs	.+10     	; 0xa18 <__gtsf2+0x56>
     a0e:	c7 01       	movw	r24, r14
     a10:	b8 01       	movw	r22, r16
     a12:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <__gtsf2+0x58>
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	68 96       	adiw	r28, 0x18	; 24
     a1c:	e6 e0       	ldi	r30, 0x06	; 6
     a1e:	0c 94 95 3a 	jmp	0x752a	; 0x752a <__epilogue_restores__+0x18>

00000a22 <__gesf2>:
     a22:	a8 e1       	ldi	r26, 0x18	; 24
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e7 e1       	ldi	r30, 0x17	; 23
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	0c 94 79 3a 	jmp	0x74f2	; 0x74f2 <__prologue_saves__+0x18>
     a2e:	69 83       	std	Y+1, r22	; 0x01
     a30:	7a 83       	std	Y+2, r23	; 0x02
     a32:	8b 83       	std	Y+3, r24	; 0x03
     a34:	9c 83       	std	Y+4, r25	; 0x04
     a36:	2d 83       	std	Y+5, r18	; 0x05
     a38:	3e 83       	std	Y+6, r19	; 0x06
     a3a:	4f 83       	std	Y+7, r20	; 0x07
     a3c:	58 87       	std	Y+8, r21	; 0x08
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	e8 2e       	mov	r14, r24
     a42:	f1 2c       	mov	r15, r1
     a44:	ec 0e       	add	r14, r28
     a46:	fd 1e       	adc	r15, r29
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	b7 01       	movw	r22, r14
     a4e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a52:	8e 01       	movw	r16, r28
     a54:	0f 5e       	subi	r16, 0xEF	; 239
     a56:	1f 4f       	sbci	r17, 0xFF	; 255
     a58:	ce 01       	movw	r24, r28
     a5a:	05 96       	adiw	r24, 0x05	; 5
     a5c:	b8 01       	movw	r22, r16
     a5e:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     a62:	89 85       	ldd	r24, Y+9	; 0x09
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	40 f0       	brcs	.+16     	; 0xa78 <__gesf2+0x56>
     a68:	89 89       	ldd	r24, Y+17	; 0x11
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	28 f0       	brcs	.+10     	; 0xa78 <__gesf2+0x56>
     a6e:	c7 01       	movw	r24, r14
     a70:	b8 01       	movw	r22, r16
     a72:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <__gesf2+0x58>
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	68 96       	adiw	r28, 0x18	; 24
     a7c:	e6 e0       	ldi	r30, 0x06	; 6
     a7e:	0c 94 95 3a 	jmp	0x752a	; 0x752a <__epilogue_restores__+0x18>

00000a82 <__ltsf2>:
     a82:	a8 e1       	ldi	r26, 0x18	; 24
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	e7 e4       	ldi	r30, 0x47	; 71
     a88:	f5 e0       	ldi	r31, 0x05	; 5
     a8a:	0c 94 79 3a 	jmp	0x74f2	; 0x74f2 <__prologue_saves__+0x18>
     a8e:	69 83       	std	Y+1, r22	; 0x01
     a90:	7a 83       	std	Y+2, r23	; 0x02
     a92:	8b 83       	std	Y+3, r24	; 0x03
     a94:	9c 83       	std	Y+4, r25	; 0x04
     a96:	2d 83       	std	Y+5, r18	; 0x05
     a98:	3e 83       	std	Y+6, r19	; 0x06
     a9a:	4f 83       	std	Y+7, r20	; 0x07
     a9c:	58 87       	std	Y+8, r21	; 0x08
     a9e:	89 e0       	ldi	r24, 0x09	; 9
     aa0:	e8 2e       	mov	r14, r24
     aa2:	f1 2c       	mov	r15, r1
     aa4:	ec 0e       	add	r14, r28
     aa6:	fd 1e       	adc	r15, r29
     aa8:	ce 01       	movw	r24, r28
     aaa:	01 96       	adiw	r24, 0x01	; 1
     aac:	b7 01       	movw	r22, r14
     aae:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ab2:	8e 01       	movw	r16, r28
     ab4:	0f 5e       	subi	r16, 0xEF	; 239
     ab6:	1f 4f       	sbci	r17, 0xFF	; 255
     ab8:	ce 01       	movw	r24, r28
     aba:	05 96       	adiw	r24, 0x05	; 5
     abc:	b8 01       	movw	r22, r16
     abe:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     ac2:	89 85       	ldd	r24, Y+9	; 0x09
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__ltsf2+0x56>
     ac8:	89 89       	ldd	r24, Y+17	; 0x11
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	28 f0       	brcs	.+10     	; 0xad8 <__ltsf2+0x56>
     ace:	c7 01       	movw	r24, r14
     ad0:	b8 01       	movw	r22, r16
     ad2:	0e 94 b7 08 	call	0x116e	; 0x116e <__fpcmp_parts_f>
     ad6:	01 c0       	rjmp	.+2      	; 0xada <__ltsf2+0x58>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	68 96       	adiw	r28, 0x18	; 24
     adc:	e6 e0       	ldi	r30, 0x06	; 6
     ade:	0c 94 95 3a 	jmp	0x752a	; 0x752a <__epilogue_restores__+0x18>

00000ae2 <__floatsisf>:
     ae2:	a8 e0       	ldi	r26, 0x08	; 8
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 76 3a 	jmp	0x74ec	; 0x74ec <__prologue_saves__+0x12>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	da 01       	movw	r26, r20
     af8:	c9 01       	movw	r24, r18
     afa:	88 27       	eor	r24, r24
     afc:	b7 fd       	sbrc	r27, 7
     afe:	83 95       	inc	r24
     b00:	99 27       	eor	r25, r25
     b02:	aa 27       	eor	r26, r26
     b04:	bb 27       	eor	r27, r27
     b06:	b8 2e       	mov	r11, r24
     b08:	21 15       	cp	r18, r1
     b0a:	31 05       	cpc	r19, r1
     b0c:	41 05       	cpc	r20, r1
     b0e:	51 05       	cpc	r21, r1
     b10:	19 f4       	brne	.+6      	; 0xb18 <__floatsisf+0x36>
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	89 83       	std	Y+1, r24	; 0x01
     b16:	3a c0       	rjmp	.+116    	; 0xb8c <__floatsisf+0xaa>
     b18:	88 23       	and	r24, r24
     b1a:	a9 f0       	breq	.+42     	; 0xb46 <__floatsisf+0x64>
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	38 07       	cpc	r19, r24
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	48 07       	cpc	r20, r24
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	58 07       	cpc	r21, r24
     b2a:	29 f4       	brne	.+10     	; 0xb36 <__floatsisf+0x54>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	9f ec       	ldi	r25, 0xCF	; 207
     b34:	30 c0       	rjmp	.+96     	; 0xb96 <__floatsisf+0xb4>
     b36:	ee 24       	eor	r14, r14
     b38:	ff 24       	eor	r15, r15
     b3a:	87 01       	movw	r16, r14
     b3c:	e2 1a       	sub	r14, r18
     b3e:	f3 0a       	sbc	r15, r19
     b40:	04 0b       	sbc	r16, r20
     b42:	15 0b       	sbc	r17, r21
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <__floatsisf+0x68>
     b46:	79 01       	movw	r14, r18
     b48:	8a 01       	movw	r16, r20
     b4a:	8e e1       	ldi	r24, 0x1E	; 30
     b4c:	c8 2e       	mov	r12, r24
     b4e:	d1 2c       	mov	r13, r1
     b50:	dc 82       	std	Y+4, r13	; 0x04
     b52:	cb 82       	std	Y+3, r12	; 0x03
     b54:	ed 82       	std	Y+5, r14	; 0x05
     b56:	fe 82       	std	Y+6, r15	; 0x06
     b58:	0f 83       	std	Y+7, r16	; 0x07
     b5a:	18 87       	std	Y+8, r17	; 0x08
     b5c:	c8 01       	movw	r24, r16
     b5e:	b7 01       	movw	r22, r14
     b60:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	18 16       	cp	r1, r24
     b68:	19 06       	cpc	r1, r25
     b6a:	84 f4       	brge	.+32     	; 0xb8c <__floatsisf+0xaa>
     b6c:	08 2e       	mov	r0, r24
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__floatsisf+0x96>
     b70:	ee 0c       	add	r14, r14
     b72:	ff 1c       	adc	r15, r15
     b74:	00 1f       	adc	r16, r16
     b76:	11 1f       	adc	r17, r17
     b78:	0a 94       	dec	r0
     b7a:	d2 f7       	brpl	.-12     	; 0xb70 <__floatsisf+0x8e>
     b7c:	ed 82       	std	Y+5, r14	; 0x05
     b7e:	fe 82       	std	Y+6, r15	; 0x06
     b80:	0f 83       	std	Y+7, r16	; 0x07
     b82:	18 87       	std	Y+8, r17	; 0x08
     b84:	c8 1a       	sub	r12, r24
     b86:	d9 0a       	sbc	r13, r25
     b88:	dc 82       	std	Y+4, r13	; 0x04
     b8a:	cb 82       	std	Y+3, r12	; 0x03
     b8c:	ba 82       	std	Y+2, r11	; 0x02
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     b96:	28 96       	adiw	r28, 0x08	; 8
     b98:	e9 e0       	ldi	r30, 0x09	; 9
     b9a:	0c 94 92 3a 	jmp	0x7524	; 0x7524 <__epilogue_restores__+0x12>

00000b9e <__fixsfsi>:
     b9e:	ac e0       	ldi	r26, 0x0C	; 12
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 7d 3a 	jmp	0x74fa	; 0x74fa <__prologue_saves__+0x20>
     baa:	69 83       	std	Y+1, r22	; 0x01
     bac:	7a 83       	std	Y+2, r23	; 0x02
     bae:	8b 83       	std	Y+3, r24	; 0x03
     bb0:	9c 83       	std	Y+4, r25	; 0x04
     bb2:	ce 01       	movw	r24, r28
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	be 01       	movw	r22, r28
     bb8:	6b 5f       	subi	r22, 0xFB	; 251
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	0e 94 3f 08 	call	0x107e	; 0x107e <__unpack_f>
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	82 30       	cpi	r24, 0x02	; 2
     bc4:	61 f1       	breq	.+88     	; 0xc1e <__fixsfsi+0x80>
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	50 f1       	brcs	.+84     	; 0xc1e <__fixsfsi+0x80>
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <__fixsfsi+0x38>
     bce:	8e 81       	ldd	r24, Y+6	; 0x06
     bd0:	88 23       	and	r24, r24
     bd2:	51 f1       	breq	.+84     	; 0xc28 <__fixsfsi+0x8a>
     bd4:	2e c0       	rjmp	.+92     	; 0xc32 <__fixsfsi+0x94>
     bd6:	2f 81       	ldd	r18, Y+7	; 0x07
     bd8:	38 85       	ldd	r19, Y+8	; 0x08
     bda:	37 fd       	sbrc	r19, 7
     bdc:	20 c0       	rjmp	.+64     	; 0xc1e <__fixsfsi+0x80>
     bde:	6e 81       	ldd	r22, Y+6	; 0x06
     be0:	2f 31       	cpi	r18, 0x1F	; 31
     be2:	31 05       	cpc	r19, r1
     be4:	1c f0       	brlt	.+6      	; 0xbec <__fixsfsi+0x4e>
     be6:	66 23       	and	r22, r22
     be8:	f9 f0       	breq	.+62     	; 0xc28 <__fixsfsi+0x8a>
     bea:	23 c0       	rjmp	.+70     	; 0xc32 <__fixsfsi+0x94>
     bec:	8e e1       	ldi	r24, 0x1E	; 30
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	82 1b       	sub	r24, r18
     bf2:	93 0b       	sbc	r25, r19
     bf4:	29 85       	ldd	r18, Y+9	; 0x09
     bf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf8:	4b 85       	ldd	r20, Y+11	; 0x0b
     bfa:	5c 85       	ldd	r21, Y+12	; 0x0c
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <__fixsfsi+0x68>
     bfe:	56 95       	lsr	r21
     c00:	47 95       	ror	r20
     c02:	37 95       	ror	r19
     c04:	27 95       	ror	r18
     c06:	8a 95       	dec	r24
     c08:	d2 f7       	brpl	.-12     	; 0xbfe <__fixsfsi+0x60>
     c0a:	66 23       	and	r22, r22
     c0c:	b1 f0       	breq	.+44     	; 0xc3a <__fixsfsi+0x9c>
     c0e:	50 95       	com	r21
     c10:	40 95       	com	r20
     c12:	30 95       	com	r19
     c14:	21 95       	neg	r18
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	4f 4f       	sbci	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__fixsfsi+0x9c>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <__fixsfsi+0x9c>
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	3f ef       	ldi	r19, 0xFF	; 255
     c2c:	4f ef       	ldi	r20, 0xFF	; 255
     c2e:	5f e7       	ldi	r21, 0x7F	; 127
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__fixsfsi+0x9c>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	50 e8       	ldi	r21, 0x80	; 128
     c3a:	b9 01       	movw	r22, r18
     c3c:	ca 01       	movw	r24, r20
     c3e:	2c 96       	adiw	r28, 0x0c	; 12
     c40:	e2 e0       	ldi	r30, 0x02	; 2
     c42:	0c 94 99 3a 	jmp	0x7532	; 0x7532 <__epilogue_restores__+0x20>

00000c46 <__floatunsisf>:
     c46:	a8 e0       	ldi	r26, 0x08	; 8
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e9 e2       	ldi	r30, 0x29	; 41
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	0c 94 75 3a 	jmp	0x74ea	; 0x74ea <__prologue_saves__+0x10>
     c52:	7b 01       	movw	r14, r22
     c54:	8c 01       	movw	r16, r24
     c56:	61 15       	cp	r22, r1
     c58:	71 05       	cpc	r23, r1
     c5a:	81 05       	cpc	r24, r1
     c5c:	91 05       	cpc	r25, r1
     c5e:	19 f4       	brne	.+6      	; 0xc66 <__floatunsisf+0x20>
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	89 83       	std	Y+1, r24	; 0x01
     c64:	60 c0       	rjmp	.+192    	; 0xd26 <__floatunsisf+0xe0>
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	8e e1       	ldi	r24, 0x1E	; 30
     c6c:	c8 2e       	mov	r12, r24
     c6e:	d1 2c       	mov	r13, r1
     c70:	dc 82       	std	Y+4, r13	; 0x04
     c72:	cb 82       	std	Y+3, r12	; 0x03
     c74:	ed 82       	std	Y+5, r14	; 0x05
     c76:	fe 82       	std	Y+6, r15	; 0x06
     c78:	0f 83       	std	Y+7, r16	; 0x07
     c7a:	18 87       	std	Y+8, r17	; 0x08
     c7c:	c8 01       	movw	r24, r16
     c7e:	b7 01       	movw	r22, r14
     c80:	0e 94 1b 07 	call	0xe36	; 0xe36 <__clzsi2>
     c84:	fc 01       	movw	r30, r24
     c86:	31 97       	sbiw	r30, 0x01	; 1
     c88:	f7 ff       	sbrs	r31, 7
     c8a:	3b c0       	rjmp	.+118    	; 0xd02 <__floatunsisf+0xbc>
     c8c:	22 27       	eor	r18, r18
     c8e:	33 27       	eor	r19, r19
     c90:	2e 1b       	sub	r18, r30
     c92:	3f 0b       	sbc	r19, r31
     c94:	57 01       	movw	r10, r14
     c96:	68 01       	movw	r12, r16
     c98:	02 2e       	mov	r0, r18
     c9a:	04 c0       	rjmp	.+8      	; 0xca4 <__floatunsisf+0x5e>
     c9c:	d6 94       	lsr	r13
     c9e:	c7 94       	ror	r12
     ca0:	b7 94       	ror	r11
     ca2:	a7 94       	ror	r10
     ca4:	0a 94       	dec	r0
     ca6:	d2 f7       	brpl	.-12     	; 0xc9c <__floatunsisf+0x56>
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	04 c0       	rjmp	.+8      	; 0xcc2 <__floatunsisf+0x7c>
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	aa 1f       	adc	r26, r26
     cc0:	bb 1f       	adc	r27, r27
     cc2:	2a 95       	dec	r18
     cc4:	d2 f7       	brpl	.-12     	; 0xcba <__floatunsisf+0x74>
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	a1 09       	sbc	r26, r1
     cca:	b1 09       	sbc	r27, r1
     ccc:	8e 21       	and	r24, r14
     cce:	9f 21       	and	r25, r15
     cd0:	a0 23       	and	r26, r16
     cd2:	b1 23       	and	r27, r17
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	21 f0       	breq	.+8      	; 0xce4 <__floatunsisf+0x9e>
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	4a 29       	or	r20, r10
     ce6:	5b 29       	or	r21, r11
     ce8:	6c 29       	or	r22, r12
     cea:	7d 29       	or	r23, r13
     cec:	4d 83       	std	Y+5, r20	; 0x05
     cee:	5e 83       	std	Y+6, r21	; 0x06
     cf0:	6f 83       	std	Y+7, r22	; 0x07
     cf2:	78 87       	std	Y+8, r23	; 0x08
     cf4:	8e e1       	ldi	r24, 0x1E	; 30
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	8e 1b       	sub	r24, r30
     cfa:	9f 0b       	sbc	r25, r31
     cfc:	9c 83       	std	Y+4, r25	; 0x04
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <__floatunsisf+0xe0>
     d02:	30 97       	sbiw	r30, 0x00	; 0
     d04:	81 f0       	breq	.+32     	; 0xd26 <__floatunsisf+0xe0>
     d06:	0e 2e       	mov	r0, r30
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__floatunsisf+0xcc>
     d0a:	ee 0c       	add	r14, r14
     d0c:	ff 1c       	adc	r15, r15
     d0e:	00 1f       	adc	r16, r16
     d10:	11 1f       	adc	r17, r17
     d12:	0a 94       	dec	r0
     d14:	d2 f7       	brpl	.-12     	; 0xd0a <__floatunsisf+0xc4>
     d16:	ed 82       	std	Y+5, r14	; 0x05
     d18:	fe 82       	std	Y+6, r15	; 0x06
     d1a:	0f 83       	std	Y+7, r16	; 0x07
     d1c:	18 87       	std	Y+8, r17	; 0x08
     d1e:	ce 1a       	sub	r12, r30
     d20:	df 0a       	sbc	r13, r31
     d22:	dc 82       	std	Y+4, r13	; 0x04
     d24:	cb 82       	std	Y+3, r12	; 0x03
     d26:	1a 82       	std	Y+2, r1	; 0x02
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__pack_f>
     d30:	28 96       	adiw	r28, 0x08	; 8
     d32:	ea e0       	ldi	r30, 0x0A	; 10
     d34:	0c 94 91 3a 	jmp	0x7522	; 0x7522 <__epilogue_restores__+0x10>

00000d38 <__ashldi3>:
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	60 97       	sbiw	r28, 0x10	; 16
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	a8 2f       	mov	r26, r24
     d54:	00 23       	and	r16, r16
     d56:	09 f4       	brne	.+2      	; 0xd5a <__ashldi3+0x22>
     d58:	61 c0       	rjmp	.+194    	; 0xe1c <__ashldi3+0xe4>
     d5a:	7e 01       	movw	r14, r28
     d5c:	08 94       	sec
     d5e:	e1 1c       	adc	r14, r1
     d60:	f1 1c       	adc	r15, r1
     d62:	88 e0       	ldi	r24, 0x08	; 8
     d64:	f7 01       	movw	r30, r14
     d66:	11 92       	st	Z+, r1
     d68:	8a 95       	dec	r24
     d6a:	e9 f7       	brne	.-6      	; 0xd66 <__ashldi3+0x2e>
     d6c:	29 83       	std	Y+1, r18	; 0x01
     d6e:	3a 83       	std	Y+2, r19	; 0x02
     d70:	4b 83       	std	Y+3, r20	; 0x03
     d72:	5c 83       	std	Y+4, r21	; 0x04
     d74:	6d 83       	std	Y+5, r22	; 0x05
     d76:	7e 83       	std	Y+6, r23	; 0x06
     d78:	af 83       	std	Y+7, r26	; 0x07
     d7a:	98 87       	std	Y+8, r25	; 0x08
     d7c:	80 e2       	ldi	r24, 0x20	; 32
     d7e:	80 1b       	sub	r24, r16
     d80:	e8 2f       	mov	r30, r24
     d82:	ff 27       	eor	r31, r31
     d84:	e7 fd       	sbrc	r30, 7
     d86:	f0 95       	com	r31
     d88:	49 81       	ldd	r20, Y+1	; 0x01
     d8a:	5a 81       	ldd	r21, Y+2	; 0x02
     d8c:	6b 81       	ldd	r22, Y+3	; 0x03
     d8e:	7c 81       	ldd	r23, Y+4	; 0x04
     d90:	18 16       	cp	r1, r24
     d92:	84 f0       	brlt	.+32     	; 0xdb4 <__ashldi3+0x7c>
     d94:	19 86       	std	Y+9, r1	; 0x09
     d96:	1a 86       	std	Y+10, r1	; 0x0a
     d98:	1b 86       	std	Y+11, r1	; 0x0b
     d9a:	1c 86       	std	Y+12, r1	; 0x0c
     d9c:	88 27       	eor	r24, r24
     d9e:	99 27       	eor	r25, r25
     da0:	8e 1b       	sub	r24, r30
     da2:	9f 0b       	sbc	r25, r31
     da4:	04 c0       	rjmp	.+8      	; 0xdae <__ashldi3+0x76>
     da6:	44 0f       	add	r20, r20
     da8:	55 1f       	adc	r21, r21
     daa:	66 1f       	adc	r22, r22
     dac:	77 1f       	adc	r23, r23
     dae:	8a 95       	dec	r24
     db0:	d2 f7       	brpl	.-12     	; 0xda6 <__ashldi3+0x6e>
     db2:	28 c0       	rjmp	.+80     	; 0xe04 <__ashldi3+0xcc>
     db4:	20 2f       	mov	r18, r16
     db6:	33 27       	eor	r19, r19
     db8:	27 fd       	sbrc	r18, 7
     dba:	30 95       	com	r19
     dbc:	db 01       	movw	r26, r22
     dbe:	ca 01       	movw	r24, r20
     dc0:	02 2e       	mov	r0, r18
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <__ashldi3+0x94>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	0a 94       	dec	r0
     dce:	d2 f7       	brpl	.-12     	; 0xdc4 <__ashldi3+0x8c>
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	ab 87       	std	Y+11, r26	; 0x0b
     dd6:	bc 87       	std	Y+12, r27	; 0x0c
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <__ashldi3+0xaa>
     dda:	76 95       	lsr	r23
     ddc:	67 95       	ror	r22
     dde:	57 95       	ror	r21
     de0:	47 95       	ror	r20
     de2:	ea 95       	dec	r30
     de4:	d2 f7       	brpl	.-12     	; 0xdda <__ashldi3+0xa2>
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	af 81       	ldd	r26, Y+7	; 0x07
     dec:	b8 85       	ldd	r27, Y+8	; 0x08
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__ashldi3+0xc0>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	aa 1f       	adc	r26, r26
     df6:	bb 1f       	adc	r27, r27
     df8:	2a 95       	dec	r18
     dfa:	d2 f7       	brpl	.-12     	; 0xdf0 <__ashldi3+0xb8>
     dfc:	48 2b       	or	r20, r24
     dfe:	59 2b       	or	r21, r25
     e00:	6a 2b       	or	r22, r26
     e02:	7b 2b       	or	r23, r27
     e04:	4d 87       	std	Y+13, r20	; 0x0d
     e06:	5e 87       	std	Y+14, r21	; 0x0e
     e08:	6f 87       	std	Y+15, r22	; 0x0f
     e0a:	78 8b       	std	Y+16, r23	; 0x10
     e0c:	29 85       	ldd	r18, Y+9	; 0x09
     e0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e10:	4b 85       	ldd	r20, Y+11	; 0x0b
     e12:	5c 85       	ldd	r21, Y+12	; 0x0c
     e14:	6d 85       	ldd	r22, Y+13	; 0x0d
     e16:	7e 85       	ldd	r23, Y+14	; 0x0e
     e18:	af 85       	ldd	r26, Y+15	; 0x0f
     e1a:	98 89       	ldd	r25, Y+16	; 0x10
     e1c:	8a 2f       	mov	r24, r26
     e1e:	60 96       	adiw	r28, 0x10	; 16
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	08 95       	ret

00000e36 <__clzsi2>:
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	7b 01       	movw	r14, r22
     e40:	8c 01       	movw	r16, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	e8 16       	cp	r14, r24
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	f8 06       	cpc	r15, r24
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	08 07       	cpc	r16, r24
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	18 07       	cpc	r17, r24
     e52:	88 f4       	brcc	.+34     	; 0xe76 <__clzsi2+0x40>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	e8 16       	cp	r14, r24
     e58:	f1 04       	cpc	r15, r1
     e5a:	01 05       	cpc	r16, r1
     e5c:	11 05       	cpc	r17, r1
     e5e:	31 f0       	breq	.+12     	; 0xe6c <__clzsi2+0x36>
     e60:	28 f0       	brcs	.+10     	; 0xe6c <__clzsi2+0x36>
     e62:	88 e0       	ldi	r24, 0x08	; 8
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <__clzsi2+0x64>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	12 c0       	rjmp	.+36     	; 0xe9a <__clzsi2+0x64>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	e8 16       	cp	r14, r24
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	f8 06       	cpc	r15, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	08 07       	cpc	r16, r24
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	18 07       	cpc	r17, r24
     e86:	28 f0       	brcs	.+10     	; 0xe92 <__clzsi2+0x5c>
     e88:	88 e1       	ldi	r24, 0x18	; 24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__clzsi2+0x64>
     e92:	80 e1       	ldi	r24, 0x10	; 16
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	20 e2       	ldi	r18, 0x20	; 32
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	28 1b       	sub	r18, r24
     ea4:	39 0b       	sbc	r19, r25
     ea6:	4a 0b       	sbc	r20, r26
     ea8:	5b 0b       	sbc	r21, r27
     eaa:	04 c0       	rjmp	.+8      	; 0xeb4 <__clzsi2+0x7e>
     eac:	16 95       	lsr	r17
     eae:	07 95       	ror	r16
     eb0:	f7 94       	ror	r15
     eb2:	e7 94       	ror	r14
     eb4:	8a 95       	dec	r24
     eb6:	d2 f7       	brpl	.-12     	; 0xeac <__clzsi2+0x76>
     eb8:	f7 01       	movw	r30, r14
     eba:	e3 5c       	subi	r30, 0xC3	; 195
     ebc:	fb 4f       	sbci	r31, 0xFB	; 251
     ebe:	80 81       	ld	r24, Z
     ec0:	28 1b       	sub	r18, r24
     ec2:	31 09       	sbc	r19, r1
     ec4:	41 09       	sbc	r20, r1
     ec6:	51 09       	sbc	r21, r1
     ec8:	c9 01       	movw	r24, r18
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	08 95       	ret

00000ed4 <__pack_f>:
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	fc 01       	movw	r30, r24
     ee0:	e4 80       	ldd	r14, Z+4	; 0x04
     ee2:	f5 80       	ldd	r15, Z+5	; 0x05
     ee4:	06 81       	ldd	r16, Z+6	; 0x06
     ee6:	17 81       	ldd	r17, Z+7	; 0x07
     ee8:	d1 80       	ldd	r13, Z+1	; 0x01
     eea:	80 81       	ld	r24, Z
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	48 f4       	brcc	.+18     	; 0xf02 <__pack_f+0x2e>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	a0 e1       	ldi	r26, 0x10	; 16
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e8 2a       	or	r14, r24
     efa:	f9 2a       	or	r15, r25
     efc:	0a 2b       	or	r16, r26
     efe:	1b 2b       	or	r17, r27
     f00:	a5 c0       	rjmp	.+330    	; 0x104c <__pack_f+0x178>
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	09 f4       	brne	.+2      	; 0xf08 <__pack_f+0x34>
     f06:	9f c0       	rjmp	.+318    	; 0x1046 <__pack_f+0x172>
     f08:	82 30       	cpi	r24, 0x02	; 2
     f0a:	21 f4       	brne	.+8      	; 0xf14 <__pack_f+0x40>
     f0c:	ee 24       	eor	r14, r14
     f0e:	ff 24       	eor	r15, r15
     f10:	87 01       	movw	r16, r14
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <__pack_f+0x4a>
     f14:	e1 14       	cp	r14, r1
     f16:	f1 04       	cpc	r15, r1
     f18:	01 05       	cpc	r16, r1
     f1a:	11 05       	cpc	r17, r1
     f1c:	19 f4       	brne	.+6      	; 0xf24 <__pack_f+0x50>
     f1e:	e0 e0       	ldi	r30, 0x00	; 0
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	96 c0       	rjmp	.+300    	; 0x1050 <__pack_f+0x17c>
     f24:	62 81       	ldd	r22, Z+2	; 0x02
     f26:	73 81       	ldd	r23, Z+3	; 0x03
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	62 38       	cpi	r22, 0x82	; 130
     f2c:	79 07       	cpc	r23, r25
     f2e:	0c f0       	brlt	.+2      	; 0xf32 <__pack_f+0x5e>
     f30:	5b c0       	rjmp	.+182    	; 0xfe8 <__pack_f+0x114>
     f32:	22 e8       	ldi	r18, 0x82	; 130
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	26 1b       	sub	r18, r22
     f38:	37 0b       	sbc	r19, r23
     f3a:	2a 31       	cpi	r18, 0x1A	; 26
     f3c:	31 05       	cpc	r19, r1
     f3e:	2c f0       	brlt	.+10     	; 0xf4a <__pack_f+0x76>
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	2a c0       	rjmp	.+84     	; 0xf9e <__pack_f+0xca>
     f4a:	b8 01       	movw	r22, r16
     f4c:	a7 01       	movw	r20, r14
     f4e:	02 2e       	mov	r0, r18
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <__pack_f+0x86>
     f52:	76 95       	lsr	r23
     f54:	67 95       	ror	r22
     f56:	57 95       	ror	r21
     f58:	47 95       	ror	r20
     f5a:	0a 94       	dec	r0
     f5c:	d2 f7       	brpl	.-12     	; 0xf52 <__pack_f+0x7e>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <__pack_f+0x9c>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	aa 1f       	adc	r26, r26
     f6e:	bb 1f       	adc	r27, r27
     f70:	2a 95       	dec	r18
     f72:	d2 f7       	brpl	.-12     	; 0xf68 <__pack_f+0x94>
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	a1 09       	sbc	r26, r1
     f78:	b1 09       	sbc	r27, r1
     f7a:	8e 21       	and	r24, r14
     f7c:	9f 21       	and	r25, r15
     f7e:	a0 23       	and	r26, r16
     f80:	b1 23       	and	r27, r17
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	a1 05       	cpc	r26, r1
     f86:	b1 05       	cpc	r27, r1
     f88:	21 f0       	breq	.+8      	; 0xf92 <__pack_f+0xbe>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	9a 01       	movw	r18, r20
     f94:	ab 01       	movw	r20, r22
     f96:	28 2b       	or	r18, r24
     f98:	39 2b       	or	r19, r25
     f9a:	4a 2b       	or	r20, r26
     f9c:	5b 2b       	or	r21, r27
     f9e:	da 01       	movw	r26, r20
     fa0:	c9 01       	movw	r24, r18
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	90 70       	andi	r25, 0x00	; 0
     fa6:	a0 70       	andi	r26, 0x00	; 0
     fa8:	b0 70       	andi	r27, 0x00	; 0
     faa:	80 34       	cpi	r24, 0x40	; 64
     fac:	91 05       	cpc	r25, r1
     fae:	a1 05       	cpc	r26, r1
     fb0:	b1 05       	cpc	r27, r1
     fb2:	39 f4       	brne	.+14     	; 0xfc2 <__pack_f+0xee>
     fb4:	27 ff       	sbrs	r18, 7
     fb6:	09 c0       	rjmp	.+18     	; 0xfca <__pack_f+0xf6>
     fb8:	20 5c       	subi	r18, 0xC0	; 192
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	4f 4f       	sbci	r20, 0xFF	; 255
     fbe:	5f 4f       	sbci	r21, 0xFF	; 255
     fc0:	04 c0       	rjmp	.+8      	; 0xfca <__pack_f+0xf6>
     fc2:	21 5c       	subi	r18, 0xC1	; 193
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	4f 4f       	sbci	r20, 0xFF	; 255
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	e0 e0       	ldi	r30, 0x00	; 0
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	20 30       	cpi	r18, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	3a 07       	cpc	r19, r26
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	4a 07       	cpc	r20, r26
     fd8:	a0 e4       	ldi	r26, 0x40	; 64
     fda:	5a 07       	cpc	r21, r26
     fdc:	10 f0       	brcs	.+4      	; 0xfe2 <__pack_f+0x10e>
     fde:	e1 e0       	ldi	r30, 0x01	; 1
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	79 01       	movw	r14, r18
     fe4:	8a 01       	movw	r16, r20
     fe6:	27 c0       	rjmp	.+78     	; 0x1036 <__pack_f+0x162>
     fe8:	60 38       	cpi	r22, 0x80	; 128
     fea:	71 05       	cpc	r23, r1
     fec:	64 f5       	brge	.+88     	; 0x1046 <__pack_f+0x172>
     fee:	fb 01       	movw	r30, r22
     ff0:	e1 58       	subi	r30, 0x81	; 129
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	d8 01       	movw	r26, r16
     ff6:	c7 01       	movw	r24, r14
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	90 70       	andi	r25, 0x00	; 0
     ffc:	a0 70       	andi	r26, 0x00	; 0
     ffe:	b0 70       	andi	r27, 0x00	; 0
    1000:	80 34       	cpi	r24, 0x40	; 64
    1002:	91 05       	cpc	r25, r1
    1004:	a1 05       	cpc	r26, r1
    1006:	b1 05       	cpc	r27, r1
    1008:	39 f4       	brne	.+14     	; 0x1018 <__pack_f+0x144>
    100a:	e7 fe       	sbrs	r14, 7
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <__pack_f+0x154>
    100e:	80 e4       	ldi	r24, 0x40	; 64
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	a0 e0       	ldi	r26, 0x00	; 0
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <__pack_f+0x14c>
    1018:	8f e3       	ldi	r24, 0x3F	; 63
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e8 0e       	add	r14, r24
    1022:	f9 1e       	adc	r15, r25
    1024:	0a 1f       	adc	r16, r26
    1026:	1b 1f       	adc	r17, r27
    1028:	17 ff       	sbrs	r17, 7
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <__pack_f+0x162>
    102c:	16 95       	lsr	r17
    102e:	07 95       	ror	r16
    1030:	f7 94       	ror	r15
    1032:	e7 94       	ror	r14
    1034:	31 96       	adiw	r30, 0x01	; 1
    1036:	87 e0       	ldi	r24, 0x07	; 7
    1038:	16 95       	lsr	r17
    103a:	07 95       	ror	r16
    103c:	f7 94       	ror	r15
    103e:	e7 94       	ror	r14
    1040:	8a 95       	dec	r24
    1042:	d1 f7       	brne	.-12     	; 0x1038 <__pack_f+0x164>
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <__pack_f+0x17c>
    1046:	ee 24       	eor	r14, r14
    1048:	ff 24       	eor	r15, r15
    104a:	87 01       	movw	r16, r14
    104c:	ef ef       	ldi	r30, 0xFF	; 255
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	6e 2f       	mov	r22, r30
    1052:	67 95       	ror	r22
    1054:	66 27       	eor	r22, r22
    1056:	67 95       	ror	r22
    1058:	90 2f       	mov	r25, r16
    105a:	9f 77       	andi	r25, 0x7F	; 127
    105c:	d7 94       	ror	r13
    105e:	dd 24       	eor	r13, r13
    1060:	d7 94       	ror	r13
    1062:	8e 2f       	mov	r24, r30
    1064:	86 95       	lsr	r24
    1066:	49 2f       	mov	r20, r25
    1068:	46 2b       	or	r20, r22
    106a:	58 2f       	mov	r21, r24
    106c:	5d 29       	or	r21, r13
    106e:	b7 01       	movw	r22, r14
    1070:	ca 01       	movw	r24, r20
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	08 95       	ret

0000107e <__unpack_f>:
    107e:	fc 01       	movw	r30, r24
    1080:	db 01       	movw	r26, r22
    1082:	40 81       	ld	r20, Z
    1084:	51 81       	ldd	r21, Z+1	; 0x01
    1086:	22 81       	ldd	r18, Z+2	; 0x02
    1088:	62 2f       	mov	r22, r18
    108a:	6f 77       	andi	r22, 0x7F	; 127
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	22 1f       	adc	r18, r18
    1090:	22 27       	eor	r18, r18
    1092:	22 1f       	adc	r18, r18
    1094:	93 81       	ldd	r25, Z+3	; 0x03
    1096:	89 2f       	mov	r24, r25
    1098:	88 0f       	add	r24, r24
    109a:	82 2b       	or	r24, r18
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	99 1f       	adc	r25, r25
    10a2:	99 27       	eor	r25, r25
    10a4:	99 1f       	adc	r25, r25
    10a6:	11 96       	adiw	r26, 0x01	; 1
    10a8:	9c 93       	st	X, r25
    10aa:	11 97       	sbiw	r26, 0x01	; 1
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	a9 f5       	brne	.+106    	; 0x111c <__unpack_f+0x9e>
    10b2:	41 15       	cp	r20, r1
    10b4:	51 05       	cpc	r21, r1
    10b6:	61 05       	cpc	r22, r1
    10b8:	71 05       	cpc	r23, r1
    10ba:	11 f4       	brne	.+4      	; 0x10c0 <__unpack_f+0x42>
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	37 c0       	rjmp	.+110    	; 0x112e <__unpack_f+0xb0>
    10c0:	82 e8       	ldi	r24, 0x82	; 130
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	13 96       	adiw	r26, 0x03	; 3
    10c6:	9c 93       	st	X, r25
    10c8:	8e 93       	st	-X, r24
    10ca:	12 97       	sbiw	r26, 0x02	; 2
    10cc:	9a 01       	movw	r18, r20
    10ce:	ab 01       	movw	r20, r22
    10d0:	67 e0       	ldi	r22, 0x07	; 7
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	44 1f       	adc	r20, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	6a 95       	dec	r22
    10dc:	d1 f7       	brne	.-12     	; 0x10d2 <__unpack_f+0x54>
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	8c 93       	st	X, r24
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <__unpack_f+0x80>
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	44 1f       	adc	r20, r20
    10ea:	55 1f       	adc	r21, r21
    10ec:	12 96       	adiw	r26, 0x02	; 2
    10ee:	8d 91       	ld	r24, X+
    10f0:	9c 91       	ld	r25, X
    10f2:	13 97       	sbiw	r26, 0x03	; 3
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	13 96       	adiw	r26, 0x03	; 3
    10f8:	9c 93       	st	X, r25
    10fa:	8e 93       	st	-X, r24
    10fc:	12 97       	sbiw	r26, 0x02	; 2
    10fe:	20 30       	cpi	r18, 0x00	; 0
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	38 07       	cpc	r19, r24
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	48 07       	cpc	r20, r24
    1108:	80 e4       	ldi	r24, 0x40	; 64
    110a:	58 07       	cpc	r21, r24
    110c:	58 f3       	brcs	.-42     	; 0x10e4 <__unpack_f+0x66>
    110e:	14 96       	adiw	r26, 0x04	; 4
    1110:	2d 93       	st	X+, r18
    1112:	3d 93       	st	X+, r19
    1114:	4d 93       	st	X+, r20
    1116:	5c 93       	st	X, r21
    1118:	17 97       	sbiw	r26, 0x07	; 7
    111a:	08 95       	ret
    111c:	2f 3f       	cpi	r18, 0xFF	; 255
    111e:	31 05       	cpc	r19, r1
    1120:	79 f4       	brne	.+30     	; 0x1140 <__unpack_f+0xc2>
    1122:	41 15       	cp	r20, r1
    1124:	51 05       	cpc	r21, r1
    1126:	61 05       	cpc	r22, r1
    1128:	71 05       	cpc	r23, r1
    112a:	19 f4       	brne	.+6      	; 0x1132 <__unpack_f+0xb4>
    112c:	84 e0       	ldi	r24, 0x04	; 4
    112e:	8c 93       	st	X, r24
    1130:	08 95       	ret
    1132:	64 ff       	sbrs	r22, 4
    1134:	03 c0       	rjmp	.+6      	; 0x113c <__unpack_f+0xbe>
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	8c 93       	st	X, r24
    113a:	12 c0       	rjmp	.+36     	; 0x1160 <__unpack_f+0xe2>
    113c:	1c 92       	st	X, r1
    113e:	10 c0       	rjmp	.+32     	; 0x1160 <__unpack_f+0xe2>
    1140:	2f 57       	subi	r18, 0x7F	; 127
    1142:	30 40       	sbci	r19, 0x00	; 0
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	3c 93       	st	X, r19
    1148:	2e 93       	st	-X, r18
    114a:	12 97       	sbiw	r26, 0x02	; 2
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	8c 93       	st	X, r24
    1150:	87 e0       	ldi	r24, 0x07	; 7
    1152:	44 0f       	add	r20, r20
    1154:	55 1f       	adc	r21, r21
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	8a 95       	dec	r24
    115c:	d1 f7       	brne	.-12     	; 0x1152 <__unpack_f+0xd4>
    115e:	70 64       	ori	r23, 0x40	; 64
    1160:	14 96       	adiw	r26, 0x04	; 4
    1162:	4d 93       	st	X+, r20
    1164:	5d 93       	st	X+, r21
    1166:	6d 93       	st	X+, r22
    1168:	7c 93       	st	X, r23
    116a:	17 97       	sbiw	r26, 0x07	; 7
    116c:	08 95       	ret

0000116e <__fpcmp_parts_f>:
    116e:	1f 93       	push	r17
    1170:	dc 01       	movw	r26, r24
    1172:	fb 01       	movw	r30, r22
    1174:	9c 91       	ld	r25, X
    1176:	92 30       	cpi	r25, 0x02	; 2
    1178:	08 f4       	brcc	.+2      	; 0x117c <__fpcmp_parts_f+0xe>
    117a:	47 c0       	rjmp	.+142    	; 0x120a <__fpcmp_parts_f+0x9c>
    117c:	80 81       	ld	r24, Z
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	08 f4       	brcc	.+2      	; 0x1184 <__fpcmp_parts_f+0x16>
    1182:	43 c0       	rjmp	.+134    	; 0x120a <__fpcmp_parts_f+0x9c>
    1184:	94 30       	cpi	r25, 0x04	; 4
    1186:	51 f4       	brne	.+20     	; 0x119c <__fpcmp_parts_f+0x2e>
    1188:	11 96       	adiw	r26, 0x01	; 1
    118a:	1c 91       	ld	r17, X
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	99 f5       	brne	.+102    	; 0x11f6 <__fpcmp_parts_f+0x88>
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	68 2f       	mov	r22, r24
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	61 1b       	sub	r22, r17
    1198:	71 09       	sbc	r23, r1
    119a:	3f c0       	rjmp	.+126    	; 0x121a <__fpcmp_parts_f+0xac>
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	21 f0       	breq	.+8      	; 0x11a8 <__fpcmp_parts_f+0x3a>
    11a0:	92 30       	cpi	r25, 0x02	; 2
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <__fpcmp_parts_f+0x42>
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	b9 f1       	breq	.+110    	; 0x1216 <__fpcmp_parts_f+0xa8>
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	88 23       	and	r24, r24
    11ac:	89 f1       	breq	.+98     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11ae:	2d c0       	rjmp	.+90     	; 0x120a <__fpcmp_parts_f+0x9c>
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	1c 91       	ld	r17, X
    11b4:	11 97       	sbiw	r26, 0x01	; 1
    11b6:	82 30       	cpi	r24, 0x02	; 2
    11b8:	f1 f0       	breq	.+60     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11ba:	81 81       	ldd	r24, Z+1	; 0x01
    11bc:	18 17       	cp	r17, r24
    11be:	d9 f4       	brne	.+54     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11c0:	12 96       	adiw	r26, 0x02	; 2
    11c2:	2d 91       	ld	r18, X+
    11c4:	3c 91       	ld	r19, X
    11c6:	13 97       	sbiw	r26, 0x03	; 3
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	82 17       	cp	r24, r18
    11ce:	93 07       	cpc	r25, r19
    11d0:	94 f0       	brlt	.+36     	; 0x11f6 <__fpcmp_parts_f+0x88>
    11d2:	28 17       	cp	r18, r24
    11d4:	39 07       	cpc	r19, r25
    11d6:	bc f0       	brlt	.+46     	; 0x1206 <__fpcmp_parts_f+0x98>
    11d8:	14 96       	adiw	r26, 0x04	; 4
    11da:	8d 91       	ld	r24, X+
    11dc:	9d 91       	ld	r25, X+
    11de:	0d 90       	ld	r0, X+
    11e0:	bc 91       	ld	r27, X
    11e2:	a0 2d       	mov	r26, r0
    11e4:	24 81       	ldd	r18, Z+4	; 0x04
    11e6:	35 81       	ldd	r19, Z+5	; 0x05
    11e8:	46 81       	ldd	r20, Z+6	; 0x06
    11ea:	57 81       	ldd	r21, Z+7	; 0x07
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	4a 07       	cpc	r20, r26
    11f2:	5b 07       	cpc	r21, r27
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <__fpcmp_parts_f+0x8e>
    11f6:	11 23       	and	r17, r17
    11f8:	41 f0       	breq	.+16     	; 0x120a <__fpcmp_parts_f+0x9c>
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <__fpcmp_parts_f+0xa2>
    11fc:	82 17       	cp	r24, r18
    11fe:	93 07       	cpc	r25, r19
    1200:	a4 07       	cpc	r26, r20
    1202:	b5 07       	cpc	r27, r21
    1204:	40 f4       	brcc	.+16     	; 0x1216 <__fpcmp_parts_f+0xa8>
    1206:	11 23       	and	r17, r17
    1208:	19 f0       	breq	.+6      	; 0x1210 <__fpcmp_parts_f+0xa2>
    120a:	61 e0       	ldi	r22, 0x01	; 1
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	05 c0       	rjmp	.+10     	; 0x121a <__fpcmp_parts_f+0xac>
    1210:	6f ef       	ldi	r22, 0xFF	; 255
    1212:	7f ef       	ldi	r23, 0xFF	; 255
    1214:	02 c0       	rjmp	.+4      	; 0x121a <__fpcmp_parts_f+0xac>
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	cb 01       	movw	r24, r22
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <USART_vInit>:
 * Breif      : This Function initialize USART depend on config.h
 * Parameters :  Nothing
 * return     :  Nothing
 */
void USART_vInit(void)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <USART_vInit+0x6>
    1226:	0f 92       	push	r0
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
  /* We will adjust this value according to the configrations then store it in UCSRC in one operation */
  u8 Local_u8UCSRC = 0;
    122c:	1b 82       	std	Y+3, r1	; 0x03

  /***** Check 3 Modes   *****/
#if (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_1X)

  CLR_BIT(UCSRA, UCSRA_U2X);
    122e:	ab e2       	ldi	r26, 0x2B	; 43
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	eb e2       	ldi	r30, 0x2B	; 43
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	8d 7f       	andi	r24, 0xFD	; 253
    123a:	8c 93       	st	X, r24

  /*Calculate The Baud Rate From The Equation */
  u16 Local_u16UBRR = (u16)((SYSTEM_FREQUENCY / (16 * USART_BAUD_RATE)) - 1);
    123c:	83 e3       	ldi	r24, 0x33	; 51
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	9a 83       	std	Y+2, r25	; 0x02
    1242:	89 83       	std	Y+1, r24	; 0x01
#endif
  /*
      $ Set Baud Rate
      Hint : UBRRH then UBRRL to avoid problems
   */
  UBRRH = (u8)(Local_u16UBRR << 8); /* MSBs at Local_u16UBRR */
    1244:	e0 e4       	ldi	r30, 0x40	; 64
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	10 82       	st	Z, r1
  UBRRL = (u8)Local_u16UBRR;
    124a:	e9 e2       	ldi	r30, 0x29	; 41
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	80 83       	st	Z, r24
  /*___________________________________________________________________________________________________________________*/

  /*Multi-Processor Communication mode*/
#if USART_MPCM == DISABLE
  CLR_BIT(UCSRA, UCSRA_MPCM);
    1252:	ab e2       	ldi	r26, 0x2B	; 43
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	eb e2       	ldi	r30, 0x2B	; 43
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8e 7f       	andi	r24, 0xFE	; 254
    125e:	8c 93       	st	X, r24

  /*UCSRC Register Config*/

  /*USART Mode*/
#if USART_MODE == ASYNCHRONOUS
  CLR_BIT(Local_u8UCSRC, UCSRC_UMSEL);
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	8f 7b       	andi	r24, 0xBF	; 191
    1264:	8b 83       	std	Y+3, r24	; 0x03
#endif

  /*Parity Mode*/
#if USART_PARITY_MODE == DISABLE

  CLR_BIT(Local_u8UCSRC, UCSRC_UPM0);
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	8f 7e       	andi	r24, 0xEF	; 239
    126a:	8b 83       	std	Y+3, r24	; 0x03
  CLR_BIT(Local_u8UCSRC, UCSRC_UPM1);
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	8f 7d       	andi	r24, 0xDF	; 223
    1270:	8b 83       	std	Y+3, r24	; 0x03
#endif

  /*Stop Bit*/
#if USART_STOP_BIT == STOP_BIT_1

  CLR_BIT(Local_u8UCSRC, UCSRC_USBS);
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	87 7f       	andi	r24, 0xF7	; 247
    1276:	8b 83       	std	Y+3, r24	; 0x03
  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
  CLR_BIT(UCSRB, UCSRB_UCSZ2);

#elif USART_DATA_SIZE == DATA_SIZE_8_BIT

  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ0);
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	82 60       	ori	r24, 0x02	; 2
    127c:	8b 83       	std	Y+3, r24	; 0x03
  SET_BIT(Local_u8UCSRC, UCSRC_UCSZ1);
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	84 60       	ori	r24, 0x04	; 4
    1282:	8b 83       	std	Y+3, r24	; 0x03
  CLR_BIT(UCSRB, UCSRB_UCSZ2);
    1284:	aa e2       	ldi	r26, 0x2A	; 42
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	ea e2       	ldi	r30, 0x2A	; 42
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8b 7f       	andi	r24, 0xFB	; 251
    1290:	8c 93       	st	X, r24
#endif

#endif

  /*Set UCSRC Mode*/
  SET_BIT(Local_u8UCSRC, UCSRC_URSEL);
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	80 68       	ori	r24, 0x80	; 128
    1296:	8b 83       	std	Y+3, r24	; 0x03

  /*Store the value in UCSRC Register (one operation) */
  UCSRC = Local_u8UCSRC;
    1298:	e0 e4       	ldi	r30, 0x40	; 64
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	80 83       	st	Z, r24

  /* Finally Enable the components */

  /*RX Complete Interrupt Enable*/
#if USART_RX_COMPLETE_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_RXCIE);
    12a0:	aa e2       	ldi	r26, 0x2A	; 42
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ea e2       	ldi	r30, 0x2A	; 42
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	8f 77       	andi	r24, 0x7F	; 127
    12ac:	8c 93       	st	X, r24
#error "Wrong USART_RX_COMPLETE_INTERRUPT config"
#endif

  /*TX Complete Interrupt Enable*/
#if USART_TX_COMPLETE_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_TXCIE);
    12ae:	aa e2       	ldi	r26, 0x2A	; 42
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	ea e2       	ldi	r30, 0x2A	; 42
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	8f 7b       	andi	r24, 0xBF	; 191
    12ba:	8c 93       	st	X, r24
#error "Wrong USART_TX_COMPLETE_INTERRUPT config"
#endif

  /*UDR Empty Interrupt Enable*/
#if USART_UDR_EMPTY_INTERRUPT == DISABLE
  CLR_BIT(UCSRB, UCSRB_UDRIE);
    12bc:	aa e2       	ldi	r26, 0x2A	; 42
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	ea e2       	ldi	r30, 0x2A	; 42
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	8f 7d       	andi	r24, 0xDF	; 223
    12c8:	8c 93       	st	X, r24

  CLR_BIT(UCSRB, UCSRB_RXEN);

#elif USART_RECEIVER_ENABLE == ENABLE

  SET_BIT(UCSRB, UCSRB_RXEN);
    12ca:	aa e2       	ldi	r26, 0x2A	; 42
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	ea e2       	ldi	r30, 0x2A	; 42
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	80 61       	ori	r24, 0x10	; 16
    12d6:	8c 93       	st	X, r24

  CLR_BIT(UCSRB, UCSRB_TXEN);

#elif USART_TRANSMITTER_ENABLE == ENABLE

  SET_BIT(UCSRB, UCSRB_TXEN);
    12d8:	aa e2       	ldi	r26, 0x2A	; 42
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	ea e2       	ldi	r30, 0x2A	; 42
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	88 60       	ori	r24, 0x08	; 8
    12e4:	8c 93       	st	X, r24
#else

#error "Wrong USART_TRANSMITTER_ENABLE config"

#endif
}
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <USART_u8SendData>:
 *		Copy_u8Data => Data to be send
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendData(u8 Copy_u8Data)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <USART_u8SendData+0x6>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <USART_u8SendData+0x8>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <USART_u8SendData+0xa>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	8e 83       	std	Y+6, r24	; 0x06
  u8 Local_u8ErrorState = OK;
    1302:	1d 82       	std	Y+5, r1	; 0x05
  u32 Local_u32TimeoutCounter = 0;
    1304:	19 82       	std	Y+1, r1	; 0x01
    1306:	1a 82       	std	Y+2, r1	; 0x02
    1308:	1b 82       	std	Y+3, r1	; 0x03
    130a:	1c 82       	std	Y+4, r1	; 0x04

  if (USART_u8State == IDLE)
    130c:	80 91 60 05 	lds	r24, 0x0560
    1310:	88 23       	and	r24, r24
    1312:	09 f0       	breq	.+2      	; 0x1316 <USART_u8SendData+0x24>
    1314:	44 c0       	rjmp	.+136    	; 0x139e <USART_u8SendData+0xac>
  {
    USART_u8State = BUSY;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	80 93 60 05 	sts	0x0560, r24
    131c:	0b c0       	rjmp	.+22     	; 0x1334 <USART_u8SendData+0x42>
      Hint : TIMEOUT to avoid infinity loop
     */
    /*Wait until a Receiving complete or Timing out*/
    while (((READ_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    {
      Local_u32TimeoutCounter++;
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	ab 81       	ldd	r26, Y+3	; 0x03
    1324:	bc 81       	ldd	r27, Y+4	; 0x04
    1326:	01 96       	adiw	r24, 0x01	; 1
    1328:	a1 1d       	adc	r26, r1
    132a:	b1 1d       	adc	r27, r1
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	ab 83       	std	Y+3, r26	; 0x03
    1332:	bc 83       	std	Y+4, r27	; 0x04

    /*
      Hint : TIMEOUT to avoid infinity loop
     */
    /*Wait until a Receiving complete or Timing out*/
    while (((READ_BIT(UCSRA, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    1334:	eb e2       	ldi	r30, 0x2B	; 43
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	88 2f       	mov	r24, r24
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	80 72       	andi	r24, 0x20	; 32
    1340:	90 70       	andi	r25, 0x00	; 0
    1342:	95 95       	asr	r25
    1344:	87 95       	ror	r24
    1346:	95 95       	asr	r25
    1348:	87 95       	ror	r24
    134a:	95 95       	asr	r25
    134c:	87 95       	ror	r24
    134e:	95 95       	asr	r25
    1350:	87 95       	ror	r24
    1352:	95 95       	asr	r25
    1354:	87 95       	ror	r24
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	61 f4       	brne	.+24     	; 0x1372 <USART_u8SendData+0x80>
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	ab 81       	ldd	r26, Y+3	; 0x03
    1360:	bc 81       	ldd	r27, Y+4	; 0x04
    1362:	80 31       	cpi	r24, 0x10	; 16
    1364:	27 e2       	ldi	r18, 0x27	; 39
    1366:	92 07       	cpc	r25, r18
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	a2 07       	cpc	r26, r18
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	b2 07       	cpc	r27, r18
    1370:	b1 f6       	brne	.-84     	; 0x131e <USART_u8SendData+0x2c>
    {
      Local_u32TimeoutCounter++;
    }

    if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	9a 81       	ldd	r25, Y+2	; 0x02
    1376:	ab 81       	ldd	r26, Y+3	; 0x03
    1378:	bc 81       	ldd	r27, Y+4	; 0x04
    137a:	80 31       	cpi	r24, 0x10	; 16
    137c:	27 e2       	ldi	r18, 0x27	; 39
    137e:	92 07       	cpc	r25, r18
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	a2 07       	cpc	r26, r18
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	b2 07       	cpc	r27, r18
    1388:	19 f4       	brne	.+6      	; 0x1390 <USART_u8SendData+0x9e>
    {
      Local_u8ErrorState = TIMEOUT_STATE;
    138a:	84 e0       	ldi	r24, 0x04	; 4
    138c:	8d 83       	std	Y+5, r24	; 0x05
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <USART_u8SendData+0xa6>
    }
    else
    {
      UDR = Copy_u8Data;
    1390:	ec e2       	ldi	r30, 0x2C	; 44
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	8e 81       	ldd	r24, Y+6	; 0x06
    1396:	80 83       	st	Z, r24
    }

    USART_u8State = IDLE;
    1398:	10 92 60 05 	sts	0x0560, r1
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <USART_u8SendData+0xb0>
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    13a4:	26 96       	adiw	r28, 0x06	; 6
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <USART_u8ReceiveData>:
 *		Copy_u8ReceivedData => pointer to carry received data
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveData(u8 *Copy_u8ReceivedData)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	27 97       	sbiw	r28, 0x07	; 7
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	9f 83       	std	Y+7, r25	; 0x07
    13cc:	8e 83       	std	Y+6, r24	; 0x06
  u8 Local_u8ErrorState = OK;
    13ce:	1d 82       	std	Y+5, r1	; 0x05
  u32 Local_u32TimeoutCounter = 0;
    13d0:	19 82       	std	Y+1, r1	; 0x01
    13d2:	1a 82       	std	Y+2, r1	; 0x02
    13d4:	1b 82       	std	Y+3, r1	; 0x03
    13d6:	1c 82       	std	Y+4, r1	; 0x04

  if (Copy_u8ReceivedData != NULL)
    13d8:	8e 81       	ldd	r24, Y+6	; 0x06
    13da:	9f 81       	ldd	r25, Y+7	; 0x07
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	09 f4       	brne	.+2      	; 0x13e2 <USART_u8ReceiveData+0x2c>
    13e0:	46 c0       	rjmp	.+140    	; 0x146e <USART_u8ReceiveData+0xb8>
  {
    if (USART_u8State == IDLE)
    13e2:	80 91 60 05 	lds	r24, 0x0560
    13e6:	88 23       	and	r24, r24
    13e8:	09 f0       	breq	.+2      	; 0x13ec <USART_u8ReceiveData+0x36>
    13ea:	3e c0       	rjmp	.+124    	; 0x1468 <USART_u8ReceiveData+0xb2>
    {
      USART_u8State = BUSY;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	80 93 60 05 	sts	0x0560, r24
    13f2:	0b c0       	rjmp	.+22     	; 0x140a <USART_u8ReceiveData+0x54>

      /*Wait until a receive complete*/
      while (((READ_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
      {
        Local_u32TimeoutCounter++;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	ab 81       	ldd	r26, Y+3	; 0x03
    13fa:	bc 81       	ldd	r27, Y+4	; 0x04
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	a1 1d       	adc	r26, r1
    1400:	b1 1d       	adc	r27, r1
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	9a 83       	std	Y+2, r25	; 0x02
    1406:	ab 83       	std	Y+3, r26	; 0x03
    1408:	bc 83       	std	Y+4, r27	; 0x04
    if (USART_u8State == IDLE)
    {
      USART_u8State = BUSY;

      /*Wait until a receive complete*/
      while (((READ_BIT(UCSRA, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    140a:	eb e2       	ldi	r30, 0x2B	; 43
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	88 1f       	adc	r24, r24
    1412:	88 27       	eor	r24, r24
    1414:	88 1f       	adc	r24, r24
    1416:	88 2f       	mov	r24, r24
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	90 70       	andi	r25, 0x00	; 0
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	61 f4       	brne	.+24     	; 0x1438 <USART_u8ReceiveData+0x82>
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	ab 81       	ldd	r26, Y+3	; 0x03
    1426:	bc 81       	ldd	r27, Y+4	; 0x04
    1428:	80 31       	cpi	r24, 0x10	; 16
    142a:	27 e2       	ldi	r18, 0x27	; 39
    142c:	92 07       	cpc	r25, r18
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	a2 07       	cpc	r26, r18
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	b2 07       	cpc	r27, r18
    1436:	f1 f6       	brne	.-68     	; 0x13f4 <USART_u8ReceiveData+0x3e>
      {
        Local_u32TimeoutCounter++;
      }

      if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	9a 81       	ldd	r25, Y+2	; 0x02
    143c:	ab 81       	ldd	r26, Y+3	; 0x03
    143e:	bc 81       	ldd	r27, Y+4	; 0x04
    1440:	80 31       	cpi	r24, 0x10	; 16
    1442:	27 e2       	ldi	r18, 0x27	; 39
    1444:	92 07       	cpc	r25, r18
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	a2 07       	cpc	r26, r18
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	b2 07       	cpc	r27, r18
    144e:	19 f4       	brne	.+6      	; 0x1456 <USART_u8ReceiveData+0xa0>
      {
        Local_u8ErrorState = TIMEOUT_STATE;
    1450:	84 e0       	ldi	r24, 0x04	; 4
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <USART_u8ReceiveData+0xac>
      }
      else
      {
        *Copy_u8ReceivedData = UDR;
    1456:	ec e2       	ldi	r30, 0x2C	; 44
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	ee 81       	ldd	r30, Y+6	; 0x06
    145e:	ff 81       	ldd	r31, Y+7	; 0x07
    1460:	80 83       	st	Z, r24
      }

      USART_u8State = IDLE;
    1462:	10 92 60 05 	sts	0x0560, r1
    1466:	05 c0       	rjmp	.+10     	; 0x1472 <USART_u8ReceiveData+0xbc>
    }
    else
    {
      Local_u8ErrorState = BUSY_STATE;
    1468:	83 e0       	ldi	r24, 0x03	; 3
    146a:	8d 83       	std	Y+5, r24	; 0x05
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <USART_u8ReceiveData+0xbc>
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1474:	27 96       	adiw	r28, 0x07	; 7
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <USART_u8SendStringSynch>:
 *		Copy_pu8String => pointer that holds the data
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendStringSynch(u8 *Copy_pu8String)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	65 97       	sbiw	r28, 0x15	; 21
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
    149a:	9d 8b       	std	Y+21, r25	; 0x15
    149c:	8c 8b       	std	Y+20, r24	; 0x14
  u8 Local_u8ErrorState = OK;
    149e:	1b 8a       	std	Y+19, r1	; 0x13

  u32 Local_u32Index = 0;
    14a0:	1f 86       	std	Y+15, r1	; 0x0f
    14a2:	18 8a       	std	Y+16, r1	; 0x10
    14a4:	19 8a       	std	Y+17, r1	; 0x11
    14a6:	1a 8a       	std	Y+18, r1	; 0x12

  if (Copy_pu8String != NULL)
    14a8:	8c 89       	ldd	r24, Y+20	; 0x14
    14aa:	9d 89       	ldd	r25, Y+21	; 0x15
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <USART_u8SendStringSynch+0x2c>
    14b0:	98 c0       	rjmp	.+304    	; 0x15e2 <USART_u8SendStringSynch+0x15c>
    14b2:	8b c0       	rjmp	.+278    	; 0x15ca <USART_u8SendStringSynch+0x144>
  {
    while (Copy_pu8String[Local_u32Index] != '\0')
    {
      Local_u8ErrorState = USART_u8SendData(Copy_pu8String[Local_u32Index]);
    14b4:	2f 85       	ldd	r18, Y+15	; 0x0f
    14b6:	38 89       	ldd	r19, Y+16	; 0x10
    14b8:	8c 89       	ldd	r24, Y+20	; 0x14
    14ba:	9d 89       	ldd	r25, Y+21	; 0x15
    14bc:	fc 01       	movw	r30, r24
    14be:	e2 0f       	add	r30, r18
    14c0:	f3 1f       	adc	r31, r19
    14c2:	80 81       	ld	r24, Z
    14c4:	0e 94 79 09 	call	0x12f2	; 0x12f2 <USART_u8SendData>
    14c8:	8b 8b       	std	Y+19, r24	; 0x13
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	a8 ec       	ldi	r26, 0xC8	; 200
    14d0:	b2 e4       	ldi	r27, 0x42	; 66
    14d2:	8b 87       	std	Y+11, r24	; 0x0b
    14d4:	9c 87       	std	Y+12, r25	; 0x0c
    14d6:	ad 87       	std	Y+13, r26	; 0x0d
    14d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14da:	6b 85       	ldd	r22, Y+11	; 0x0b
    14dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14de:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	4a ef       	ldi	r20, 0xFA	; 250
    14e8:	54 e4       	ldi	r21, 0x44	; 68
    14ea:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	8f 83       	std	Y+7, r24	; 0x07
    14f4:	98 87       	std	Y+8, r25	; 0x08
    14f6:	a9 87       	std	Y+9, r26	; 0x09
    14f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14fa:	6f 81       	ldd	r22, Y+7	; 0x07
    14fc:	78 85       	ldd	r23, Y+8	; 0x08
    14fe:	89 85       	ldd	r24, Y+9	; 0x09
    1500:	9a 85       	ldd	r25, Y+10	; 0x0a
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e8       	ldi	r20, 0x80	; 128
    1508:	5f e3       	ldi	r21, 0x3F	; 63
    150a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    150e:	88 23       	and	r24, r24
    1510:	2c f4       	brge	.+10     	; 0x151c <USART_u8SendStringSynch+0x96>
		__ticks = 1;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9e 83       	std	Y+6, r25	; 0x06
    1518:	8d 83       	std	Y+5, r24	; 0x05
    151a:	3f c0       	rjmp	.+126    	; 0x159a <USART_u8SendStringSynch+0x114>
	else if (__tmp > 65535)
    151c:	6f 81       	ldd	r22, Y+7	; 0x07
    151e:	78 85       	ldd	r23, Y+8	; 0x08
    1520:	89 85       	ldd	r24, Y+9	; 0x09
    1522:	9a 85       	ldd	r25, Y+10	; 0x0a
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	3f ef       	ldi	r19, 0xFF	; 255
    1528:	4f e7       	ldi	r20, 0x7F	; 127
    152a:	57 e4       	ldi	r21, 0x47	; 71
    152c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    1530:	18 16       	cp	r1, r24
    1532:	4c f5       	brge	.+82     	; 0x1586 <USART_u8SendStringSynch+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1534:	6b 85       	ldd	r22, Y+11	; 0x0b
    1536:	7c 85       	ldd	r23, Y+12	; 0x0c
    1538:	8d 85       	ldd	r24, Y+13	; 0x0d
    153a:	9e 85       	ldd	r25, Y+14	; 0x0e
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e2       	ldi	r20, 0x20	; 32
    1542:	51 e4       	ldi	r21, 0x41	; 65
    1544:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	9e 83       	std	Y+6, r25	; 0x06
    155a:	8d 83       	std	Y+5, r24	; 0x05
    155c:	0f c0       	rjmp	.+30     	; 0x157c <USART_u8SendStringSynch+0xf6>
    155e:	88 ec       	ldi	r24, 0xC8	; 200
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	9c 83       	std	Y+4, r25	; 0x04
    1564:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	9c 81       	ldd	r25, Y+4	; 0x04
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <USART_u8SendStringSynch+0xe4>
    156e:	9c 83       	std	Y+4, r25	; 0x04
    1570:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1572:	8d 81       	ldd	r24, Y+5	; 0x05
    1574:	9e 81       	ldd	r25, Y+6	; 0x06
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	9e 83       	std	Y+6, r25	; 0x06
    157a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157c:	8d 81       	ldd	r24, Y+5	; 0x05
    157e:	9e 81       	ldd	r25, Y+6	; 0x06
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	69 f7       	brne	.-38     	; 0x155e <USART_u8SendStringSynch+0xd8>
    1584:	14 c0       	rjmp	.+40     	; 0x15ae <USART_u8SendStringSynch+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1586:	6f 81       	ldd	r22, Y+7	; 0x07
    1588:	78 85       	ldd	r23, Y+8	; 0x08
    158a:	89 85       	ldd	r24, Y+9	; 0x09
    158c:	9a 85       	ldd	r25, Y+10	; 0x0a
    158e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <USART_u8SendStringSynch+0x120>
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01
      _delay_ms(100);
      Local_u32Index++;
    15ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    15b0:	98 89       	ldd	r25, Y+16	; 0x10
    15b2:	a9 89       	ldd	r26, Y+17	; 0x11
    15b4:	ba 89       	ldd	r27, Y+18	; 0x12
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	a1 1d       	adc	r26, r1
    15ba:	b1 1d       	adc	r27, r1
    15bc:	8f 87       	std	Y+15, r24	; 0x0f
    15be:	98 8b       	std	Y+16, r25	; 0x10
    15c0:	a9 8b       	std	Y+17, r26	; 0x11
    15c2:	ba 8b       	std	Y+18, r27	; 0x12
      if (Local_u8ErrorState != OK)
    15c4:	8b 89       	ldd	r24, Y+19	; 0x13
    15c6:	88 23       	and	r24, r24
    15c8:	71 f4       	brne	.+28     	; 0x15e6 <USART_u8SendStringSynch+0x160>

  u32 Local_u32Index = 0;

  if (Copy_pu8String != NULL)
  {
    while (Copy_pu8String[Local_u32Index] != '\0')
    15ca:	2f 85       	ldd	r18, Y+15	; 0x0f
    15cc:	38 89       	ldd	r19, Y+16	; 0x10
    15ce:	8c 89       	ldd	r24, Y+20	; 0x14
    15d0:	9d 89       	ldd	r25, Y+21	; 0x15
    15d2:	fc 01       	movw	r30, r24
    15d4:	e2 0f       	add	r30, r18
    15d6:	f3 1f       	adc	r31, r19
    15d8:	80 81       	ld	r24, Z
    15da:	88 23       	and	r24, r24
    15dc:	09 f0       	breq	.+2      	; 0x15e0 <USART_u8SendStringSynch+0x15a>
    15de:	6a cf       	rjmp	.-300    	; 0x14b4 <USART_u8SendStringSynch+0x2e>
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <USART_u8SendStringSynch+0x160>
      }
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	8b 8b       	std	Y+19, r24	; 0x13
  }

  return Local_u8ErrorState;
    15e6:	8b 89       	ldd	r24, Y+19	; 0x13
}
    15e8:	65 96       	adiw	r28, 0x15	; 21
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <USART_u8SendStringAsynch>:
 *      NotificationFunc => function that called after the transmit complete
 *
 * return     : Error status with type u8
 */
u8 USART_u8SendStringAsynch(u8 *Copy_pu8String, void (*NotificationFunc)(void))
{
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <USART_u8SendStringAsynch+0x6>
    1600:	00 d0       	rcall	.+0      	; 0x1602 <USART_u8SendStringAsynch+0x8>
    1602:	0f 92       	push	r0
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	9b 83       	std	Y+3, r25	; 0x03
    160a:	8a 83       	std	Y+2, r24	; 0x02
    160c:	7d 83       	std	Y+5, r23	; 0x05
    160e:	6c 83       	std	Y+4, r22	; 0x04
  u8 Local_u8ErrorState = OK;
    1610:	19 82       	std	Y+1, r1	; 0x01

  if (USART_u8State == IDLE)
    1612:	80 91 60 05 	lds	r24, 0x0560
    1616:	88 23       	and	r24, r24
    1618:	99 f5       	brne	.+102    	; 0x1680 <USART_u8SendStringAsynch+0x86>
  {
    if ((Copy_pu8String != NULL) && (NotificationFunc != NULL))
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	9b 81       	ldd	r25, Y+3	; 0x03
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	61 f1       	breq	.+88     	; 0x167a <USART_u8SendStringAsynch+0x80>
    1622:	8c 81       	ldd	r24, Y+4	; 0x04
    1624:	9d 81       	ldd	r25, Y+5	; 0x05
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	41 f1       	breq	.+80     	; 0x167a <USART_u8SendStringAsynch+0x80>
    {
      /*USART is now Busy*/
      USART_u8State = BUSY;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	80 93 60 05 	sts	0x0560, r24

      /*Assign the USART data globally*/
      USART_pu8SendData = Copy_pu8String;
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	9b 81       	ldd	r25, Y+3	; 0x03
    1634:	90 93 5b 05 	sts	0x055B, r25
    1638:	80 93 5a 05 	sts	0x055A, r24
      USART_pvNotificationFunc = NotificationFunc;
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	9d 81       	ldd	r25, Y+5	; 0x05
    1640:	90 93 5f 05 	sts	0x055F, r25
    1644:	80 93 5e 05 	sts	0x055E, r24

      /*Set Index to first element*/
      USART_u8Index = 0;
    1648:	10 92 62 05 	sts	0x0562, r1

      /*Send first Data */
      UDR = USART_pu8SendData[USART_u8Index];
    164c:	ac e2       	ldi	r26, 0x2C	; 44
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	20 91 5a 05 	lds	r18, 0x055A
    1654:	30 91 5b 05 	lds	r19, 0x055B
    1658:	80 91 62 05 	lds	r24, 0x0562
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	f9 01       	movw	r30, r18
    1662:	e8 0f       	add	r30, r24
    1664:	f9 1f       	adc	r31, r25
    1666:	80 81       	ld	r24, Z
    1668:	8c 93       	st	X, r24

      /*USART Transmit Interrupt Enable*/
      SET_BIT(UCSRB, UCSRB_TXCIE);
    166a:	aa e2       	ldi	r26, 0x2A	; 42
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	ea e2       	ldi	r30, 0x2A	; 42
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	80 64       	ori	r24, 0x40	; 64
    1676:	8c 93       	st	X, r24
    1678:	05 c0       	rjmp	.+10     	; 0x1684 <USART_u8SendStringAsynch+0x8a>
    }
    else
    {
      Local_u8ErrorState = NULL_POINTER;
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <USART_u8SendStringAsynch+0x8a>
    }
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    1680:	83 e0       	ldi	r24, 0x03	; 3
    1682:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    1684:	89 81       	ldd	r24, Y+1	; 0x01
}
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <USART_u8ReceiveBufferSynch>:
 *      Copy_u32BufferSize => size of array
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveBufferSynch(u8 *Copy_pu8String, u32 Copy_u32BufferSize)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	2b 97       	sbiw	r28, 0x0b	; 11
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	9f 83       	std	Y+7, r25	; 0x07
    16ac:	8e 83       	std	Y+6, r24	; 0x06
    16ae:	48 87       	std	Y+8, r20	; 0x08
    16b0:	59 87       	std	Y+9, r21	; 0x09
    16b2:	6a 87       	std	Y+10, r22	; 0x0a
    16b4:	7b 87       	std	Y+11, r23	; 0x0b
  u8 Local_u8ErrorState = OK;
    16b6:	1d 82       	std	Y+5, r1	; 0x05

  if (Copy_pu8String != NULL)
    16b8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ba:	9f 81       	ldd	r25, Y+7	; 0x07
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	51 f1       	breq	.+84     	; 0x1714 <USART_u8ReceiveBufferSynch+0x7e>
  {
    for (u32 Local_u32Index = 0; Local_u32Index < Copy_u32BufferSize; Local_u32Index++)
    16c0:	19 82       	std	Y+1, r1	; 0x01
    16c2:	1a 82       	std	Y+2, r1	; 0x02
    16c4:	1b 82       	std	Y+3, r1	; 0x03
    16c6:	1c 82       	std	Y+4, r1	; 0x04
    16c8:	17 c0       	rjmp	.+46     	; 0x16f8 <USART_u8ReceiveBufferSynch+0x62>
    {
      Local_u8ErrorState = USART_u8ReceiveData(&Copy_pu8String[Local_u32Index]);
    16ca:	29 81       	ldd	r18, Y+1	; 0x01
    16cc:	3a 81       	ldd	r19, Y+2	; 0x02
    16ce:	8e 81       	ldd	r24, Y+6	; 0x06
    16d0:	9f 81       	ldd	r25, Y+7	; 0x07
    16d2:	82 0f       	add	r24, r18
    16d4:	93 1f       	adc	r25, r19
    16d6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    16da:	8d 83       	std	Y+5, r24	; 0x05
      if (Local_u8ErrorState != OK)
    16dc:	8d 81       	ldd	r24, Y+5	; 0x05
    16de:	88 23       	and	r24, r24
    16e0:	d9 f4       	brne	.+54     	; 0x1718 <USART_u8ReceiveBufferSynch+0x82>
{
  u8 Local_u8ErrorState = OK;

  if (Copy_pu8String != NULL)
  {
    for (u32 Local_u32Index = 0; Local_u32Index < Copy_u32BufferSize; Local_u32Index++)
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	9a 81       	ldd	r25, Y+2	; 0x02
    16e6:	ab 81       	ldd	r26, Y+3	; 0x03
    16e8:	bc 81       	ldd	r27, Y+4	; 0x04
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	a1 1d       	adc	r26, r1
    16ee:	b1 1d       	adc	r27, r1
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	ab 83       	std	Y+3, r26	; 0x03
    16f6:	bc 83       	std	Y+4, r27	; 0x04
    16f8:	29 81       	ldd	r18, Y+1	; 0x01
    16fa:	3a 81       	ldd	r19, Y+2	; 0x02
    16fc:	4b 81       	ldd	r20, Y+3	; 0x03
    16fe:	5c 81       	ldd	r21, Y+4	; 0x04
    1700:	88 85       	ldd	r24, Y+8	; 0x08
    1702:	99 85       	ldd	r25, Y+9	; 0x09
    1704:	aa 85       	ldd	r26, Y+10	; 0x0a
    1706:	bb 85       	ldd	r27, Y+11	; 0x0b
    1708:	28 17       	cp	r18, r24
    170a:	39 07       	cpc	r19, r25
    170c:	4a 07       	cpc	r20, r26
    170e:	5b 07       	cpc	r21, r27
    1710:	e0 f2       	brcs	.-72     	; 0x16ca <USART_u8ReceiveBufferSynch+0x34>
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <USART_u8ReceiveBufferSynch+0x82>
      }
    }
  }
  else
  {
    Local_u8ErrorState = NULL_POINTER;
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	8d 83       	std	Y+5, r24	; 0x05
  }

  return Local_u8ErrorState;
    1718:	8d 81       	ldd	r24, Y+5	; 0x05
}
    171a:	2b 96       	adiw	r28, 0x0b	; 11
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <USART_u8ReceiveBufferAsynch>:
 *      NotificationFunc   => function that called after the received complete
 *
 * return     : Error status with type u8
 */
u8 USART_u8ReceiveBufferAsynch(u8 *Copy_pu8String, u32 Copy_u32BufferSize, void (*NotificationFunc)(void))
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	29 97       	sbiw	r28, 0x09	; 9
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	9b 83       	std	Y+3, r25	; 0x03
    1742:	8a 83       	std	Y+2, r24	; 0x02
    1744:	4c 83       	std	Y+4, r20	; 0x04
    1746:	5d 83       	std	Y+5, r21	; 0x05
    1748:	6e 83       	std	Y+6, r22	; 0x06
    174a:	7f 83       	std	Y+7, r23	; 0x07
    174c:	39 87       	std	Y+9, r19	; 0x09
    174e:	28 87       	std	Y+8, r18	; 0x08
  u8 Local_u8ErrorState = OK;
    1750:	19 82       	std	Y+1, r1	; 0x01

  if (USART_u8State == IDLE)
    1752:	80 91 60 05 	lds	r24, 0x0560
    1756:	88 23       	and	r24, r24
    1758:	39 f5       	brne	.+78     	; 0x17a8 <USART_u8ReceiveBufferAsynch+0x7c>
  {
    if ((Copy_pu8String != NULL) && (NotificationFunc != NULL))
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	9b 81       	ldd	r25, Y+3	; 0x03
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	01 f1       	breq	.+64     	; 0x17a2 <USART_u8ReceiveBufferAsynch+0x76>
    1762:	88 85       	ldd	r24, Y+8	; 0x08
    1764:	99 85       	ldd	r25, Y+9	; 0x09
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	e1 f0       	breq	.+56     	; 0x17a2 <USART_u8ReceiveBufferAsynch+0x76>
    {
      /*USART is now Busy*/
      USART_u8State = BUSY;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	80 93 60 05 	sts	0x0560, r24

      /*Assign the USART data globally*/
      USART_pu8ReceiveData = Copy_pu8String;
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	9b 81       	ldd	r25, Y+3	; 0x03
    1774:	90 93 5d 05 	sts	0x055D, r25
    1778:	80 93 5c 05 	sts	0x055C, r24
      USART_pvNotificationFunc = NotificationFunc;
    177c:	88 85       	ldd	r24, Y+8	; 0x08
    177e:	99 85       	ldd	r25, Y+9	; 0x09
    1780:	90 93 5f 05 	sts	0x055F, r25
    1784:	80 93 5e 05 	sts	0x055E, r24
      USART_u8BufferSize = Copy_u32BufferSize;
    1788:	8c 81       	ldd	r24, Y+4	; 0x04
    178a:	80 93 61 05 	sts	0x0561, r24

      /*Set Index to first element*/
      USART_u8Index = 0;
    178e:	10 92 62 05 	sts	0x0562, r1

      /*USART Recieve Interrupt Enable */
      SET_BIT(UCSRB, UCSRB_RXCIE);
    1792:	aa e2       	ldi	r26, 0x2A	; 42
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	ea e2       	ldi	r30, 0x2A	; 42
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	80 68       	ori	r24, 0x80	; 128
    179e:	8c 93       	st	X, r24
    17a0:	05 c0       	rjmp	.+10     	; 0x17ac <USART_u8ReceiveBufferAsynch+0x80>
    }
    else
    {
      Local_u8ErrorState = NULL_POINTER;
    17a2:	82 e0       	ldi	r24, 0x02	; 2
    17a4:	89 83       	std	Y+1, r24	; 0x01
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <USART_u8ReceiveBufferAsynch+0x80>
    }
  }
  else
  {
    Local_u8ErrorState = BUSY_STATE;
    17a8:	83 e0       	ldi	r24, 0x03	; 3
    17aa:	89 83       	std	Y+1, r24	; 0x01
  }

  return Local_u8ErrorState;
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ae:	29 96       	adiw	r28, 0x09	; 9
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <__vector_13>:
/*___________________________________________________________________________________________________________________*/

/* ISR for RX complete */
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    17c0:	1f 92       	push	r1
    17c2:	0f 92       	push	r0
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	0f 92       	push	r0
    17c8:	11 24       	eor	r1, r1
    17ca:	2f 93       	push	r18
    17cc:	3f 93       	push	r19
    17ce:	4f 93       	push	r20
    17d0:	5f 93       	push	r21
    17d2:	6f 93       	push	r22
    17d4:	7f 93       	push	r23
    17d6:	8f 93       	push	r24
    17d8:	9f 93       	push	r25
    17da:	af 93       	push	r26
    17dc:	bf 93       	push	r27
    17de:	ef 93       	push	r30
    17e0:	ff 93       	push	r31
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
  /*Receive next Data*/
  USART_pu8ReceiveData[USART_u8Index] = UDR;
    17ea:	20 91 5c 05 	lds	r18, 0x055C
    17ee:	30 91 5d 05 	lds	r19, 0x055D
    17f2:	80 91 62 05 	lds	r24, 0x0562
    17f6:	88 2f       	mov	r24, r24
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	d9 01       	movw	r26, r18
    17fc:	a8 0f       	add	r26, r24
    17fe:	b9 1f       	adc	r27, r25
    1800:	ec e2       	ldi	r30, 0x2C	; 44
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	8c 93       	st	X, r24

  /*Increment Data index of the buffer*/
  USART_u8Index++;
    1808:	80 91 62 05 	lds	r24, 0x0562
    180c:	8f 5f       	subi	r24, 0xFF	; 255
    180e:	80 93 62 05 	sts	0x0562, r24

  if (USART_u8Index == USART_u8BufferSize)
    1812:	90 91 62 05 	lds	r25, 0x0562
    1816:	80 91 61 05 	lds	r24, 0x0561
    181a:	98 17       	cp	r25, r24
    181c:	b1 f4       	brne	.+44     	; 0x184a <__vector_13+0x8a>
  {
    /*Send Data Complete*/

    USART_u8Index = 0;
    181e:	10 92 62 05 	sts	0x0562, r1
    /*USART is now IDLE*/
    USART_u8State = IDLE;
    1822:	10 92 60 05 	sts	0x0560, r1

    /*Call Notification Function*/
    if (USART_pvNotificationFunc != NULL)
    1826:	80 91 5e 05 	lds	r24, 0x055E
    182a:	90 91 5f 05 	lds	r25, 0x055F
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	29 f0       	breq	.+10     	; 0x183c <__vector_13+0x7c>
    {
      USART_pvNotificationFunc();
    1832:	e0 91 5e 05 	lds	r30, 0x055E
    1836:	f0 91 5f 05 	lds	r31, 0x055F
    183a:	09 95       	icall
    }

    /*USART Recieve Interrupt Disable*/
    CLR_BIT(UCSRB, UCSRB_RXCIE);
    183c:	aa e2       	ldi	r26, 0x2A	; 42
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	ea e2       	ldi	r30, 0x2A	; 42
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	8f 77       	andi	r24, 0x7F	; 127
    1848:	8c 93       	st	X, r24
  }
  else
  {
    /*Do Noting*/
  }
}
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	ff 91       	pop	r31
    1850:	ef 91       	pop	r30
    1852:	bf 91       	pop	r27
    1854:	af 91       	pop	r26
    1856:	9f 91       	pop	r25
    1858:	8f 91       	pop	r24
    185a:	7f 91       	pop	r23
    185c:	6f 91       	pop	r22
    185e:	5f 91       	pop	r21
    1860:	4f 91       	pop	r20
    1862:	3f 91       	pop	r19
    1864:	2f 91       	pop	r18
    1866:	0f 90       	pop	r0
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	0f 90       	pop	r0
    186c:	1f 90       	pop	r1
    186e:	18 95       	reti

00001870 <__vector_15>:

//-------------------------------------------------------------------------------------------------------------------------------
/* ISR for TX complete */
void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
    1870:	1f 92       	push	r1
    1872:	0f 92       	push	r0
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	0f 92       	push	r0
    1878:	11 24       	eor	r1, r1
    187a:	2f 93       	push	r18
    187c:	3f 93       	push	r19
    187e:	4f 93       	push	r20
    1880:	5f 93       	push	r21
    1882:	6f 93       	push	r22
    1884:	7f 93       	push	r23
    1886:	8f 93       	push	r24
    1888:	9f 93       	push	r25
    188a:	af 93       	push	r26
    188c:	bf 93       	push	r27
    188e:	ef 93       	push	r30
    1890:	ff 93       	push	r31
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62

  /*Increment Data index of the buffer*/
  USART_u8Index++;
    189a:	80 91 62 05 	lds	r24, 0x0562
    189e:	8f 5f       	subi	r24, 0xFF	; 255
    18a0:	80 93 62 05 	sts	0x0562, r24

  if (USART_pu8SendData[USART_u8Index] == '\0')
    18a4:	20 91 5a 05 	lds	r18, 0x055A
    18a8:	30 91 5b 05 	lds	r19, 0x055B
    18ac:	80 91 62 05 	lds	r24, 0x0562
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	f9 01       	movw	r30, r18
    18b6:	e8 0f       	add	r30, r24
    18b8:	f9 1f       	adc	r31, r25
    18ba:	80 81       	ld	r24, Z
    18bc:	88 23       	and	r24, r24
    18be:	b9 f4       	brne	.+46     	; 0x18ee <__vector_15+0x7e>
  {
    /*Receive Data Complete*/
    USART_u8Index = 0;
    18c0:	10 92 62 05 	sts	0x0562, r1

    /*USART is now IDLE*/
    USART_u8State = IDLE;
    18c4:	10 92 60 05 	sts	0x0560, r1

    /*Call Notification Function*/
    if (USART_pvNotificationFunc != NULL)
    18c8:	80 91 5e 05 	lds	r24, 0x055E
    18cc:	90 91 5f 05 	lds	r25, 0x055F
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	29 f0       	breq	.+10     	; 0x18de <__vector_15+0x6e>
    {
      USART_pvNotificationFunc();
    18d4:	e0 91 5e 05 	lds	r30, 0x055E
    18d8:	f0 91 5f 05 	lds	r31, 0x055F
    18dc:	09 95       	icall
    }

    /*USART Transmit Interrupt Disable*/
    CLR_BIT(UCSRB, UCSRB_TXCIE);
    18de:	aa e2       	ldi	r26, 0x2A	; 42
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	ea e2       	ldi	r30, 0x2A	; 42
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 7b       	andi	r24, 0xBF	; 191
    18ea:	8c 93       	st	X, r24
    18ec:	0f c0       	rjmp	.+30     	; 0x190c <__vector_15+0x9c>
  }
  else
  {
    /*Send Data not Complete/
    /Send next Data*/
    UDR = USART_pu8SendData[USART_u8Index];
    18ee:	ac e2       	ldi	r26, 0x2C	; 44
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	20 91 5a 05 	lds	r18, 0x055A
    18f6:	30 91 5b 05 	lds	r19, 0x055B
    18fa:	80 91 62 05 	lds	r24, 0x0562
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	f9 01       	movw	r30, r18
    1904:	e8 0f       	add	r30, r24
    1906:	f9 1f       	adc	r31, r25
    1908:	80 81       	ld	r24, Z
    190a:	8c 93       	st	X, r24
  }
}
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	ff 91       	pop	r31
    1912:	ef 91       	pop	r30
    1914:	bf 91       	pop	r27
    1916:	af 91       	pop	r26
    1918:	9f 91       	pop	r25
    191a:	8f 91       	pop	r24
    191c:	7f 91       	pop	r23
    191e:	6f 91       	pop	r22
    1920:	5f 91       	pop	r21
    1922:	4f 91       	pop	r20
    1924:	3f 91       	pop	r19
    1926:	2f 91       	pop	r18
    1928:	0f 90       	pop	r0
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	0f 90       	pop	r0
    192e:	1f 90       	pop	r1
    1930:	18 95       	reti

00001932 <EEPROM_vWrite>:
Function Returns     : void
Function Arguments   : unsigned short address, unsigned char data
Function Description :  write one byte to the given  address.
*/
void EEPROM_vWrite(u16 address, u8 data)
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	00 d0       	rcall	.+0      	; 0x1938 <EEPROM_vWrite+0x6>
    1938:	0f 92       	push	r0
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	9a 83       	std	Y+2, r25	; 0x02
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	6b 83       	std	Y+3, r22	; 0x03
  /*set up address register*/
  EEAR_REG = address;
    1944:	ee e3       	ldi	r30, 0x3E	; 62
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	91 83       	std	Z+1, r25	; 0x01
    194e:	80 83       	st	Z, r24
  /*set up data register*/
  EEDR_REG = data;
    1950:	ed e3       	ldi	r30, 0x3D	; 61
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	80 83       	st	Z, r24
  /*write logical one to EEMWE*/
  SET_BIT(EECR_REG, EECR_EEMWE);
    1958:	ac e3       	ldi	r26, 0x3C	; 60
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	ec e3       	ldi	r30, 0x3C	; 60
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	84 60       	ori	r24, 0x04	; 4
    1964:	8c 93       	st	X, r24
  /*start EEPROM write by setting EEWE*/
  SET_BIT(EECR_REG, EECR_EEWE );
    1966:	ac e3       	ldi	r26, 0x3C	; 60
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	ec e3       	ldi	r30, 0x3C	; 60
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	82 60       	ori	r24, 0x02	; 2
    1972:	8c 93       	st	X, r24
  /* wait for completion of  write operation*/
  while (READ_BIT(EECR_REG, EECR_EEWE) == 1);
    1974:	ec e3       	ldi	r30, 0x3C	; 60
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	88 2f       	mov	r24, r24
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	82 70       	andi	r24, 0x02	; 2
    1980:	90 70       	andi	r25, 0x00	; 0
    1982:	95 95       	asr	r25
    1984:	87 95       	ror	r24
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	91 05       	cpc	r25, r1
    198a:	a1 f3       	breq	.-24     	; 0x1974 <EEPROM_vWrite+0x42>
}
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <EEPROM_vRead>:
Function Returns     : unsigned char
Function Arguments   :  unsigned short address
Function Description :  read one byte from the given  address.
*/
u8 EEPROM_vRead(u16 address)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <EEPROM_vRead+0x6>
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	9a 83       	std	Y+2, r25	; 0x02
    19a4:	89 83       	std	Y+1, r24	; 0x01
  /*set up address register*/
  EEARL_REG = (char)address;
    19a6:	ee e3       	ldi	r30, 0x3E	; 62
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	80 83       	st	Z, r24
  EEARH_REG = (char)(address >> 8);
    19ae:	ef e3       	ldi	r30, 0x3F	; 63
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	9a 81       	ldd	r25, Y+2	; 0x02
    19b6:	89 2f       	mov	r24, r25
    19b8:	99 27       	eor	r25, r25
    19ba:	80 83       	st	Z, r24
  /*start EEPROM read by setting EERE*/
  SET_BIT(EECR_REG, EECR_EERE);
    19bc:	ac e3       	ldi	r26, 0x3C	; 60
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ec e3       	ldi	r30, 0x3C	; 60
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	81 60       	ori	r24, 0x01	; 1
    19c8:	8c 93       	st	X, r24
  /*return data from data register*/
  return EEDR_REG;
    19ca:	ed e3       	ldi	r30, 0x3D	; 61
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <DIO_enumSetPinDir>:
      =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */

DIO_errorStatus DIO_enumSetPinDir(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Direction)
{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	28 97       	sbiw	r28, 0x08	; 8
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
    19ee:	8a 83       	std	Y+2, r24	; 0x02
    19f0:	6b 83       	std	Y+3, r22	; 0x03
    19f2:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	84 30       	cpi	r24, 0x04	; 4
    19fc:	08 f0       	brcs	.+2      	; 0x1a00 <DIO_enumSetPinDir+0x26>
    19fe:	f1 c0       	rjmp	.+482    	; 0x1be2 <DIO_enumSetPinDir+0x208>
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	88 30       	cpi	r24, 0x08	; 8
    1a04:	08 f0       	brcs	.+2      	; 0x1a08 <DIO_enumSetPinDir+0x2e>
    1a06:	ed c0       	rjmp	.+474    	; 0x1be2 <DIO_enumSetPinDir+0x208>
  {
    if (Copy_u8Direction == DIO_PIN_OUTPUT)
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	09 f0       	breq	.+2      	; 0x1a10 <DIO_enumSetPinDir+0x36>
    1a0e:	6f c0       	rjmp	.+222    	; 0x1aee <DIO_enumSetPinDir+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	38 87       	std	Y+8, r19	; 0x08
    1a18:	2f 83       	std	Y+7, r18	; 0x07
    1a1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a1c:	98 85       	ldd	r25, Y+8	; 0x08
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	91 05       	cpc	r25, r1
    1a22:	49 f1       	breq	.+82     	; 0x1a76 <DIO_enumSetPinDir+0x9c>
    1a24:	2f 81       	ldd	r18, Y+7	; 0x07
    1a26:	38 85       	ldd	r19, Y+8	; 0x08
    1a28:	22 30       	cpi	r18, 0x02	; 2
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	2c f4       	brge	.+10     	; 0x1a38 <DIO_enumSetPinDir+0x5e>
    1a2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a30:	98 85       	ldd	r25, Y+8	; 0x08
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	61 f0       	breq	.+24     	; 0x1a4e <DIO_enumSetPinDir+0x74>
    1a36:	d6 c0       	rjmp	.+428    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
    1a38:	2f 81       	ldd	r18, Y+7	; 0x07
    1a3a:	38 85       	ldd	r19, Y+8	; 0x08
    1a3c:	22 30       	cpi	r18, 0x02	; 2
    1a3e:	31 05       	cpc	r19, r1
    1a40:	71 f1       	breq	.+92     	; 0x1a9e <DIO_enumSetPinDir+0xc4>
    1a42:	8f 81       	ldd	r24, Y+7	; 0x07
    1a44:	98 85       	ldd	r25, Y+8	; 0x08
    1a46:	83 30       	cpi	r24, 0x03	; 3
    1a48:	91 05       	cpc	r25, r1
    1a4a:	e9 f1       	breq	.+122    	; 0x1ac6 <DIO_enumSetPinDir+0xec>
    1a4c:	cb c0       	rjmp	.+406    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(DDRA_REG, Copy_u8PIN);
    1a4e:	aa e3       	ldi	r26, 0x3A	; 58
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	ea e3       	ldi	r30, 0x3A	; 58
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	48 2f       	mov	r20, r24
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	02 2e       	mov	r0, r18
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <DIO_enumSetPinDir+0x92>
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	0a 94       	dec	r0
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <DIO_enumSetPinDir+0x8e>
    1a70:	84 2b       	or	r24, r20
    1a72:	8c 93       	st	X, r24
    1a74:	b7 c0       	rjmp	.+366    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(DDRB_REG, Copy_u8PIN);
    1a76:	a7 e3       	ldi	r26, 0x37	; 55
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e7 e3       	ldi	r30, 0x37	; 55
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	48 2f       	mov	r20, r24
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	28 2f       	mov	r18, r24
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	02 2e       	mov	r0, r18
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <DIO_enumSetPinDir+0xba>
    1a90:	88 0f       	add	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	0a 94       	dec	r0
    1a96:	e2 f7       	brpl	.-8      	; 0x1a90 <DIO_enumSetPinDir+0xb6>
    1a98:	84 2b       	or	r24, r20
    1a9a:	8c 93       	st	X, r24
    1a9c:	a3 c0       	rjmp	.+326    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(DDRC_REG, Copy_u8PIN);
    1a9e:	a4 e3       	ldi	r26, 0x34	; 52
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e4 e3       	ldi	r30, 0x34	; 52
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	48 2f       	mov	r20, r24
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	02 2e       	mov	r0, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <DIO_enumSetPinDir+0xe2>
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	0a 94       	dec	r0
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <DIO_enumSetPinDir+0xde>
    1ac0:	84 2b       	or	r24, r20
    1ac2:	8c 93       	st	X, r24
    1ac4:	8f c0       	rjmp	.+286    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(DDRD_REG, Copy_u8PIN);
    1ac6:	a1 e3       	ldi	r26, 0x31	; 49
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e1 e3       	ldi	r30, 0x31	; 49
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	48 2f       	mov	r20, r24
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 2e       	mov	r0, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <DIO_enumSetPinDir+0x10a>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	0a 94       	dec	r0
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <DIO_enumSetPinDir+0x106>
    1ae8:	84 2b       	or	r24, r20
    1aea:	8c 93       	st	X, r24
    1aec:	7b c0       	rjmp	.+246    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else if (Copy_u8Direction == DIO_PIN_INPUT)
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	88 23       	and	r24, r24
    1af2:	09 f0       	breq	.+2      	; 0x1af6 <DIO_enumSetPinDir+0x11c>
    1af4:	74 c0       	rjmp	.+232    	; 0x1bde <DIO_enumSetPinDir+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	3e 83       	std	Y+6, r19	; 0x06
    1afe:	2d 83       	std	Y+5, r18	; 0x05
    1b00:	8d 81       	ldd	r24, Y+5	; 0x05
    1b02:	9e 81       	ldd	r25, Y+6	; 0x06
    1b04:	81 30       	cpi	r24, 0x01	; 1
    1b06:	91 05       	cpc	r25, r1
    1b08:	59 f1       	breq	.+86     	; 0x1b60 <DIO_enumSetPinDir+0x186>
    1b0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b0c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b0e:	22 30       	cpi	r18, 0x02	; 2
    1b10:	31 05       	cpc	r19, r1
    1b12:	2c f4       	brge	.+10     	; 0x1b1e <DIO_enumSetPinDir+0x144>
    1b14:	8d 81       	ldd	r24, Y+5	; 0x05
    1b16:	9e 81       	ldd	r25, Y+6	; 0x06
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	69 f0       	breq	.+26     	; 0x1b36 <DIO_enumSetPinDir+0x15c>
    1b1c:	63 c0       	rjmp	.+198    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
    1b1e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b20:	3e 81       	ldd	r19, Y+6	; 0x06
    1b22:	22 30       	cpi	r18, 0x02	; 2
    1b24:	31 05       	cpc	r19, r1
    1b26:	89 f1       	breq	.+98     	; 0x1b8a <DIO_enumSetPinDir+0x1b0>
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2c:	83 30       	cpi	r24, 0x03	; 3
    1b2e:	91 05       	cpc	r25, r1
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <DIO_enumSetPinDir+0x15a>
    1b32:	40 c0       	rjmp	.+128    	; 0x1bb4 <DIO_enumSetPinDir+0x1da>
    1b34:	57 c0       	rjmp	.+174    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    1b36:	aa e3       	ldi	r26, 0x3A	; 58
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	ea e3       	ldi	r30, 0x3A	; 58
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	48 2f       	mov	r20, r24
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	02 2e       	mov	r0, r18
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <DIO_enumSetPinDir+0x17a>
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	0a 94       	dec	r0
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <DIO_enumSetPinDir+0x176>
    1b58:	80 95       	com	r24
    1b5a:	84 23       	and	r24, r20
    1b5c:	8c 93       	st	X, r24
    1b5e:	42 c0       	rjmp	.+132    	; 0x1be4 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    1b60:	a7 e3       	ldi	r26, 0x37	; 55
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e7 e3       	ldi	r30, 0x37	; 55
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	48 2f       	mov	r20, r24
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	02 2e       	mov	r0, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <DIO_enumSetPinDir+0x1a4>
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	0a 94       	dec	r0
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <DIO_enumSetPinDir+0x1a0>
    1b82:	80 95       	com	r24
    1b84:	84 23       	and	r24, r20
    1b86:	8c 93       	st	X, r24
    1b88:	2d c0       	rjmp	.+90     	; 0x1be4 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    1b8a:	a4 e3       	ldi	r26, 0x34	; 52
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e4 e3       	ldi	r30, 0x34	; 52
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	48 2f       	mov	r20, r24
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	02 2e       	mov	r0, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <DIO_enumSetPinDir+0x1ce>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	0a 94       	dec	r0
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <DIO_enumSetPinDir+0x1ca>
    1bac:	80 95       	com	r24
    1bae:	84 23       	and	r24, r20
    1bb0:	8c 93       	st	X, r24
    1bb2:	18 c0       	rjmp	.+48     	; 0x1be4 <DIO_enumSetPinDir+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    1bb4:	a1 e3       	ldi	r26, 0x31	; 49
    1bb6:	b0 e0       	ldi	r27, 0x00	; 0
    1bb8:	e1 e3       	ldi	r30, 0x31	; 49
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	80 81       	ld	r24, Z
    1bbe:	48 2f       	mov	r20, r24
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	02 2e       	mov	r0, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_enumSetPinDir+0x1f8>
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	0a 94       	dec	r0
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <DIO_enumSetPinDir+0x1f4>
    1bd6:	80 95       	com	r24
    1bd8:	84 23       	and	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	03 c0       	rjmp	.+6      	; 0x1be4 <DIO_enumSetPinDir+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    1bde:	19 82       	std	Y+1, r1	; 0x01
    1be0:	01 c0       	rjmp	.+2      	; 0x1be4 <DIO_enumSetPinDir+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1be2:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1be6:	28 96       	adiw	r28, 0x08	; 8
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <DIO_enumWritePinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8Value)
{
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	28 97       	sbiw	r28, 0x08	; 8
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	8a 83       	std	Y+2, r24	; 0x02
    1c0e:	6b 83       	std	Y+3, r22	; 0x03
    1c10:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	89 83       	std	Y+1, r24	; 0x01

  /* Make sure that the Port ID and Pin ID are in the valid range */
  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	84 30       	cpi	r24, 0x04	; 4
    1c1a:	08 f0       	brcs	.+2      	; 0x1c1e <DIO_enumWritePinVal+0x26>
    1c1c:	f1 c0       	rjmp	.+482    	; 0x1e00 <DIO_enumWritePinVal+0x208>
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	88 30       	cpi	r24, 0x08	; 8
    1c22:	08 f0       	brcs	.+2      	; 0x1c26 <DIO_enumWritePinVal+0x2e>
    1c24:	ed c0       	rjmp	.+474    	; 0x1e00 <DIO_enumWritePinVal+0x208>
  {
    if (Copy_u8Value == DIO_PIN_OUTPUT)
    1c26:	8c 81       	ldd	r24, Y+4	; 0x04
    1c28:	81 30       	cpi	r24, 0x01	; 1
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <DIO_enumWritePinVal+0x36>
    1c2c:	6f c0       	rjmp	.+222    	; 0x1d0c <DIO_enumWritePinVal+0x114>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	38 87       	std	Y+8, r19	; 0x08
    1c36:	2f 83       	std	Y+7, r18	; 0x07
    1c38:	8f 81       	ldd	r24, Y+7	; 0x07
    1c3a:	98 85       	ldd	r25, Y+8	; 0x08
    1c3c:	81 30       	cpi	r24, 0x01	; 1
    1c3e:	91 05       	cpc	r25, r1
    1c40:	49 f1       	breq	.+82     	; 0x1c94 <DIO_enumWritePinVal+0x9c>
    1c42:	2f 81       	ldd	r18, Y+7	; 0x07
    1c44:	38 85       	ldd	r19, Y+8	; 0x08
    1c46:	22 30       	cpi	r18, 0x02	; 2
    1c48:	31 05       	cpc	r19, r1
    1c4a:	2c f4       	brge	.+10     	; 0x1c56 <DIO_enumWritePinVal+0x5e>
    1c4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c4e:	98 85       	ldd	r25, Y+8	; 0x08
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	61 f0       	breq	.+24     	; 0x1c6c <DIO_enumWritePinVal+0x74>
    1c54:	d6 c0       	rjmp	.+428    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
    1c56:	2f 81       	ldd	r18, Y+7	; 0x07
    1c58:	38 85       	ldd	r19, Y+8	; 0x08
    1c5a:	22 30       	cpi	r18, 0x02	; 2
    1c5c:	31 05       	cpc	r19, r1
    1c5e:	71 f1       	breq	.+92     	; 0x1cbc <DIO_enumWritePinVal+0xc4>
    1c60:	8f 81       	ldd	r24, Y+7	; 0x07
    1c62:	98 85       	ldd	r25, Y+8	; 0x08
    1c64:	83 30       	cpi	r24, 0x03	; 3
    1c66:	91 05       	cpc	r25, r1
    1c68:	e9 f1       	breq	.+122    	; 0x1ce4 <DIO_enumWritePinVal+0xec>
    1c6a:	cb c0       	rjmp	.+406    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        SET_BIT(PORTA_REG, Copy_u8PIN);
    1c6c:	ab e3       	ldi	r26, 0x3B	; 59
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	eb e3       	ldi	r30, 0x3B	; 59
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	48 2f       	mov	r20, r24
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	02 2e       	mov	r0, r18
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <DIO_enumWritePinVal+0x92>
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	0a 94       	dec	r0
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <DIO_enumWritePinVal+0x8e>
    1c8e:	84 2b       	or	r24, r20
    1c90:	8c 93       	st	X, r24
    1c92:	b7 c0       	rjmp	.+366    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        SET_BIT(PORTB_REG, Copy_u8PIN);
    1c94:	a8 e3       	ldi	r26, 0x38	; 56
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e8 e3       	ldi	r30, 0x38	; 56
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	02 2e       	mov	r0, r18
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <DIO_enumWritePinVal+0xba>
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	0a 94       	dec	r0
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <DIO_enumWritePinVal+0xb6>
    1cb6:	84 2b       	or	r24, r20
    1cb8:	8c 93       	st	X, r24
    1cba:	a3 c0       	rjmp	.+326    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        SET_BIT(PORTC_REG, Copy_u8PIN);
    1cbc:	a5 e3       	ldi	r26, 0x35	; 53
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e5 e3       	ldi	r30, 0x35	; 53
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	48 2f       	mov	r20, r24
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 2e       	mov	r0, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <DIO_enumWritePinVal+0xe2>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	0a 94       	dec	r0
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <DIO_enumWritePinVal+0xde>
    1cde:	84 2b       	or	r24, r20
    1ce0:	8c 93       	st	X, r24
    1ce2:	8f c0       	rjmp	.+286    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        SET_BIT(PORTD_REG, Copy_u8PIN);
    1ce4:	a2 e3       	ldi	r26, 0x32	; 50
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e2 e3       	ldi	r30, 0x32	; 50
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	48 2f       	mov	r20, r24
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	02 2e       	mov	r0, r18
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <DIO_enumWritePinVal+0x10a>
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	0a 94       	dec	r0
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <DIO_enumWritePinVal+0x106>
    1d06:	84 2b       	or	r24, r20
    1d08:	8c 93       	st	X, r24
    1d0a:	7b c0       	rjmp	.+246    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else if (Copy_u8Value == DIO_PIN_INPUT)
    1d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0e:	88 23       	and	r24, r24
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <DIO_enumWritePinVal+0x11c>
    1d12:	74 c0       	rjmp	.+232    	; 0x1dfc <DIO_enumWritePinVal+0x204>
    {
      /* Check on the Required PORT Number */
      switch (Copy_u8PORT)
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	3e 83       	std	Y+6, r19	; 0x06
    1d1c:	2d 83       	std	Y+5, r18	; 0x05
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	91 05       	cpc	r25, r1
    1d26:	59 f1       	breq	.+86     	; 0x1d7e <DIO_enumWritePinVal+0x186>
    1d28:	2d 81       	ldd	r18, Y+5	; 0x05
    1d2a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d2c:	22 30       	cpi	r18, 0x02	; 2
    1d2e:	31 05       	cpc	r19, r1
    1d30:	2c f4       	brge	.+10     	; 0x1d3c <DIO_enumWritePinVal+0x144>
    1d32:	8d 81       	ldd	r24, Y+5	; 0x05
    1d34:	9e 81       	ldd	r25, Y+6	; 0x06
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	69 f0       	breq	.+26     	; 0x1d54 <DIO_enumWritePinVal+0x15c>
    1d3a:	63 c0       	rjmp	.+198    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
    1d3c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d3e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d40:	22 30       	cpi	r18, 0x02	; 2
    1d42:	31 05       	cpc	r19, r1
    1d44:	89 f1       	breq	.+98     	; 0x1da8 <DIO_enumWritePinVal+0x1b0>
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	83 30       	cpi	r24, 0x03	; 3
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <DIO_enumWritePinVal+0x15a>
    1d50:	40 c0       	rjmp	.+128    	; 0x1dd2 <DIO_enumWritePinVal+0x1da>
    1d52:	57 c0       	rjmp	.+174    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
      {
      case DIO_PORTA:
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    1d54:	ab e3       	ldi	r26, 0x3B	; 59
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	eb e3       	ldi	r30, 0x3B	; 59
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 2e       	mov	r0, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <DIO_enumWritePinVal+0x17a>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <DIO_enumWritePinVal+0x176>
    1d76:	80 95       	com	r24
    1d78:	84 23       	and	r24, r20
    1d7a:	8c 93       	st	X, r24
    1d7c:	42 c0       	rjmp	.+132    	; 0x1e02 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTB:
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    1d7e:	a8 e3       	ldi	r26, 0x38	; 56
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e8 e3       	ldi	r30, 0x38	; 56
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	48 2f       	mov	r20, r24
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	02 2e       	mov	r0, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <DIO_enumWritePinVal+0x1a4>
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	0a 94       	dec	r0
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <DIO_enumWritePinVal+0x1a0>
    1da0:	80 95       	com	r24
    1da2:	84 23       	and	r24, r20
    1da4:	8c 93       	st	X, r24
    1da6:	2d c0       	rjmp	.+90     	; 0x1e02 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTC:
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    1da8:	a5 e3       	ldi	r26, 0x35	; 53
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e5 e3       	ldi	r30, 0x35	; 53
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	48 2f       	mov	r20, r24
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	02 2e       	mov	r0, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_enumWritePinVal+0x1ce>
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	0a 94       	dec	r0
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <DIO_enumWritePinVal+0x1ca>
    1dca:	80 95       	com	r24
    1dcc:	84 23       	and	r24, r20
    1dce:	8c 93       	st	X, r24
    1dd0:	18 c0       	rjmp	.+48     	; 0x1e02 <DIO_enumWritePinVal+0x20a>
        break;
      case DIO_PORTD:
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    1dd2:	a2 e3       	ldi	r26, 0x32	; 50
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e2 e3       	ldi	r30, 0x32	; 50
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	48 2f       	mov	r20, r24
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 2e       	mov	r0, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <DIO_enumWritePinVal+0x1f8>
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	0a 94       	dec	r0
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <DIO_enumWritePinVal+0x1f4>
    1df4:	80 95       	com	r24
    1df6:	84 23       	and	r24, r20
    1df8:	8c 93       	st	X, r24
    1dfa:	03 c0       	rjmp	.+6      	; 0x1e02 <DIO_enumWritePinVal+0x20a>
        break;
      }
    }
    else
    {
      LOC_enumState = DIO_NOK;
    1dfc:	19 82       	std	Y+1, r1	; 0x01
    1dfe:	01 c0       	rjmp	.+2      	; 0x1e02 <DIO_enumWritePinVal+0x20a>
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    1e00:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e04:	28 96       	adiw	r28, 0x08	; 8
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <DIO_enumReadPinVal>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
      => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */
DIO_errorStatus DIO_enumReadPinVal(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 *Copy_Pu8Data)
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	27 97       	sbiw	r28, 0x07	; 7
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	de bf       	out	0x3e, r29	; 62
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	cd bf       	out	0x3d, r28	; 61
    1e2a:	8a 83       	std	Y+2, r24	; 0x02
    1e2c:	6b 83       	std	Y+3, r22	; 0x03
    1e2e:	5d 83       	std	Y+5, r21	; 0x05
    1e30:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	84 30       	cpi	r24, 0x04	; 4
    1e3a:	08 f0       	brcs	.+2      	; 0x1e3e <DIO_enumReadPinVal+0x28>
    1e3c:	a6 c0       	rjmp	.+332    	; 0x1f8a <DIO_enumReadPinVal+0x174>
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	88 30       	cpi	r24, 0x08	; 8
    1e42:	08 f0       	brcs	.+2      	; 0x1e46 <DIO_enumReadPinVal+0x30>
    1e44:	a2 c0       	rjmp	.+324    	; 0x1f8a <DIO_enumReadPinVal+0x174>
  {
    /* Check on the Required PORT Number */
    switch (Copy_u8PORT)
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	3f 83       	std	Y+7, r19	; 0x07
    1e4e:	2e 83       	std	Y+6, r18	; 0x06
    1e50:	4e 81       	ldd	r20, Y+6	; 0x06
    1e52:	5f 81       	ldd	r21, Y+7	; 0x07
    1e54:	41 30       	cpi	r20, 0x01	; 1
    1e56:	51 05       	cpc	r21, r1
    1e58:	c1 f1       	breq	.+112    	; 0x1eca <DIO_enumReadPinVal+0xb4>
    1e5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e5e:	82 30       	cpi	r24, 0x02	; 2
    1e60:	91 05       	cpc	r25, r1
    1e62:	34 f4       	brge	.+12     	; 0x1e70 <DIO_enumReadPinVal+0x5a>
    1e64:	2e 81       	ldd	r18, Y+6	; 0x06
    1e66:	3f 81       	ldd	r19, Y+7	; 0x07
    1e68:	21 15       	cp	r18, r1
    1e6a:	31 05       	cpc	r19, r1
    1e6c:	71 f0       	breq	.+28     	; 0x1e8a <DIO_enumReadPinVal+0x74>
    1e6e:	8e c0       	rjmp	.+284    	; 0x1f8c <DIO_enumReadPinVal+0x176>
    1e70:	4e 81       	ldd	r20, Y+6	; 0x06
    1e72:	5f 81       	ldd	r21, Y+7	; 0x07
    1e74:	42 30       	cpi	r20, 0x02	; 2
    1e76:	51 05       	cpc	r21, r1
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <DIO_enumReadPinVal+0x66>
    1e7a:	47 c0       	rjmp	.+142    	; 0x1f0a <DIO_enumReadPinVal+0xf4>
    1e7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e80:	83 30       	cpi	r24, 0x03	; 3
    1e82:	91 05       	cpc	r25, r1
    1e84:	09 f4       	brne	.+2      	; 0x1e88 <DIO_enumReadPinVal+0x72>
    1e86:	61 c0       	rjmp	.+194    	; 0x1f4a <DIO_enumReadPinVal+0x134>
    1e88:	81 c0       	rjmp	.+258    	; 0x1f8c <DIO_enumReadPinVal+0x176>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = READ_BIT(PINA_REG, Copy_u8PIN);
    1e8a:	e9 e3       	ldi	r30, 0x39	; 57
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	48 2f       	mov	r20, r24
    1e92:	50 e0       	ldi	r21, 0x00	; 0
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <DIO_enumReadPinVal+0x8e>
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	2a 95       	dec	r18
    1ea6:	e2 f7       	brpl	.-8      	; 0x1ea0 <DIO_enumReadPinVal+0x8a>
    1ea8:	9a 01       	movw	r18, r20
    1eaa:	28 23       	and	r18, r24
    1eac:	39 23       	and	r19, r25
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	88 2f       	mov	r24, r24
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a9 01       	movw	r20, r18
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <DIO_enumReadPinVal+0xa6>
    1eb8:	55 95       	asr	r21
    1eba:	47 95       	ror	r20
    1ebc:	8a 95       	dec	r24
    1ebe:	e2 f7       	brpl	.-8      	; 0x1eb8 <DIO_enumReadPinVal+0xa2>
    1ec0:	ca 01       	movw	r24, r20
    1ec2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ec4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ec6:	80 83       	st	Z, r24
    1ec8:	61 c0       	rjmp	.+194    	; 0x1f8c <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = READ_BIT(PINB_REG, Copy_u8PIN);
    1eca:	e6 e3       	ldi	r30, 0x36	; 54
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	48 2f       	mov	r20, r24
    1ed2:	50 e0       	ldi	r21, 0x00	; 0
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	02 c0       	rjmp	.+4      	; 0x1ee4 <DIO_enumReadPinVal+0xce>
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	2a 95       	dec	r18
    1ee6:	e2 f7       	brpl	.-8      	; 0x1ee0 <DIO_enumReadPinVal+0xca>
    1ee8:	9a 01       	movw	r18, r20
    1eea:	28 23       	and	r18, r24
    1eec:	39 23       	and	r19, r25
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	88 2f       	mov	r24, r24
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	a9 01       	movw	r20, r18
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <DIO_enumReadPinVal+0xe6>
    1ef8:	55 95       	asr	r21
    1efa:	47 95       	ror	r20
    1efc:	8a 95       	dec	r24
    1efe:	e2 f7       	brpl	.-8      	; 0x1ef8 <DIO_enumReadPinVal+0xe2>
    1f00:	ca 01       	movw	r24, r20
    1f02:	ec 81       	ldd	r30, Y+4	; 0x04
    1f04:	fd 81       	ldd	r31, Y+5	; 0x05
    1f06:	80 83       	st	Z, r24
    1f08:	41 c0       	rjmp	.+130    	; 0x1f8c <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = READ_BIT(PINC_REG, Copy_u8PIN);
    1f0a:	e3 e3       	ldi	r30, 0x33	; 51
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	48 2f       	mov	r20, r24
    1f12:	50 e0       	ldi	r21, 0x00	; 0
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <DIO_enumReadPinVal+0x10e>
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	2a 95       	dec	r18
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <DIO_enumReadPinVal+0x10a>
    1f28:	9a 01       	movw	r18, r20
    1f2a:	28 23       	and	r18, r24
    1f2c:	39 23       	and	r19, r25
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a9 01       	movw	r20, r18
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <DIO_enumReadPinVal+0x126>
    1f38:	55 95       	asr	r21
    1f3a:	47 95       	ror	r20
    1f3c:	8a 95       	dec	r24
    1f3e:	e2 f7       	brpl	.-8      	; 0x1f38 <DIO_enumReadPinVal+0x122>
    1f40:	ca 01       	movw	r24, r20
    1f42:	ec 81       	ldd	r30, Y+4	; 0x04
    1f44:	fd 81       	ldd	r31, Y+5	; 0x05
    1f46:	80 83       	st	Z, r24
    1f48:	21 c0       	rjmp	.+66     	; 0x1f8c <DIO_enumReadPinVal+0x176>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = READ_BIT(PIND_REG, Copy_u8PIN);
    1f4a:	e0 e3       	ldi	r30, 0x30	; 48
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	48 2f       	mov	r20, r24
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <DIO_enumReadPinVal+0x14e>
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	2a 95       	dec	r18
    1f66:	e2 f7       	brpl	.-8      	; 0x1f60 <DIO_enumReadPinVal+0x14a>
    1f68:	9a 01       	movw	r18, r20
    1f6a:	28 23       	and	r18, r24
    1f6c:	39 23       	and	r19, r25
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	88 2f       	mov	r24, r24
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a9 01       	movw	r20, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <DIO_enumReadPinVal+0x166>
    1f78:	55 95       	asr	r21
    1f7a:	47 95       	ror	r20
    1f7c:	8a 95       	dec	r24
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <DIO_enumReadPinVal+0x162>
    1f80:	ca 01       	movw	r24, r20
    1f82:	ec 81       	ldd	r30, Y+4	; 0x04
    1f84:	fd 81       	ldd	r31, Y+5	; 0x05
    1f86:	80 83       	st	Z, r24
    1f88:	01 c0       	rjmp	.+2      	; 0x1f8c <DIO_enumReadPinVal+0x176>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    1f8a:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f8e:	27 96       	adiw	r28, 0x07	; 7
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <DIO_enumTogglePinVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePinVal(u8 Copy_u8PORT, u8 Copy_u8PIN)
{
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	00 d0       	rcall	.+0      	; 0x1fa6 <DIO_enumTogglePinVal+0x6>
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <DIO_enumTogglePinVal+0x8>
    1fa8:	0f 92       	push	r0
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	8a 83       	std	Y+2, r24	; 0x02
    1fb0:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	84 30       	cpi	r24, 0x04	; 4
    1fba:	08 f0       	brcs	.+2      	; 0x1fbe <DIO_enumTogglePinVal+0x1e>
    1fbc:	73 c0       	rjmp	.+230    	; 0x20a4 <DIO_enumTogglePinVal+0x104>
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	88 30       	cpi	r24, 0x08	; 8
    1fc2:	08 f0       	brcs	.+2      	; 0x1fc6 <DIO_enumTogglePinVal+0x26>
    1fc4:	6f c0       	rjmp	.+222    	; 0x20a4 <DIO_enumTogglePinVal+0x104>
  {
    switch (Copy_u8PORT)
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	3d 83       	std	Y+5, r19	; 0x05
    1fce:	2c 83       	std	Y+4, r18	; 0x04
    1fd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd4:	81 30       	cpi	r24, 0x01	; 1
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	49 f1       	breq	.+82     	; 0x202c <DIO_enumTogglePinVal+0x8c>
    1fda:	2c 81       	ldd	r18, Y+4	; 0x04
    1fdc:	3d 81       	ldd	r19, Y+5	; 0x05
    1fde:	22 30       	cpi	r18, 0x02	; 2
    1fe0:	31 05       	cpc	r19, r1
    1fe2:	2c f4       	brge	.+10     	; 0x1fee <DIO_enumTogglePinVal+0x4e>
    1fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	61 f0       	breq	.+24     	; 0x2004 <DIO_enumTogglePinVal+0x64>
    1fec:	5c c0       	rjmp	.+184    	; 0x20a6 <DIO_enumTogglePinVal+0x106>
    1fee:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff2:	22 30       	cpi	r18, 0x02	; 2
    1ff4:	31 05       	cpc	r19, r1
    1ff6:	71 f1       	breq	.+92     	; 0x2054 <DIO_enumTogglePinVal+0xb4>
    1ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffa:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffc:	83 30       	cpi	r24, 0x03	; 3
    1ffe:	91 05       	cpc	r25, r1
    2000:	e9 f1       	breq	.+122    	; 0x207c <DIO_enumTogglePinVal+0xdc>
    2002:	51 c0       	rjmp	.+162    	; 0x20a6 <DIO_enumTogglePinVal+0x106>
    {
    case DIO_PORTA:
      TOG_BIT(PORTA_REG, Copy_u8PIN);
    2004:	ab e3       	ldi	r26, 0x3B	; 59
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	eb e3       	ldi	r30, 0x3B	; 59
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	48 2f       	mov	r20, r24
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	02 2e       	mov	r0, r18
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <DIO_enumTogglePinVal+0x82>
    201e:	88 0f       	add	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	0a 94       	dec	r0
    2024:	e2 f7       	brpl	.-8      	; 0x201e <DIO_enumTogglePinVal+0x7e>
    2026:	84 27       	eor	r24, r20
    2028:	8c 93       	st	X, r24
    202a:	3d c0       	rjmp	.+122    	; 0x20a6 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTB:
      TOG_BIT(PORTB_REG, Copy_u8PIN);
    202c:	a8 e3       	ldi	r26, 0x38	; 56
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e8 e3       	ldi	r30, 0x38	; 56
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	48 2f       	mov	r20, r24
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	02 2e       	mov	r0, r18
    2044:	02 c0       	rjmp	.+4      	; 0x204a <DIO_enumTogglePinVal+0xaa>
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	0a 94       	dec	r0
    204c:	e2 f7       	brpl	.-8      	; 0x2046 <DIO_enumTogglePinVal+0xa6>
    204e:	84 27       	eor	r24, r20
    2050:	8c 93       	st	X, r24
    2052:	29 c0       	rjmp	.+82     	; 0x20a6 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTC:
      TOG_BIT(PORTC_REG, Copy_u8PIN);
    2054:	a5 e3       	ldi	r26, 0x35	; 53
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	e5 e3       	ldi	r30, 0x35	; 53
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	48 2f       	mov	r20, r24
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	02 2e       	mov	r0, r18
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <DIO_enumTogglePinVal+0xd2>
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	0a 94       	dec	r0
    2074:	e2 f7       	brpl	.-8      	; 0x206e <DIO_enumTogglePinVal+0xce>
    2076:	84 27       	eor	r24, r20
    2078:	8c 93       	st	X, r24
    207a:	15 c0       	rjmp	.+42     	; 0x20a6 <DIO_enumTogglePinVal+0x106>
      break;
    case DIO_PORTD:
      TOG_BIT(PORTD_REG, Copy_u8PIN);
    207c:	a2 e3       	ldi	r26, 0x32	; 50
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e2 e3       	ldi	r30, 0x32	; 50
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	48 2f       	mov	r20, r24
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	02 2e       	mov	r0, r18
    2094:	02 c0       	rjmp	.+4      	; 0x209a <DIO_enumTogglePinVal+0xfa>
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	0a 94       	dec	r0
    209c:	e2 f7       	brpl	.-8      	; 0x2096 <DIO_enumTogglePinVal+0xf6>
    209e:	84 27       	eor	r24, r20
    20a0:	8c 93       	st	X, r24
    20a2:	01 c0       	rjmp	.+2      	; 0x20a6 <DIO_enumTogglePinVal+0x106>
    }
  }
  else
  {
    /* in case of error in the Pin ID or PORT ID */
    LOC_enumState = DIO_NOK;
    20a4:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <DIO_enumConnectPullUp>:
      =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
    =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_errorStatus DIO_enumConnectPullUp(u8 Copy_u8PORT, u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <DIO_enumConnectPullUp+0x6>
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <DIO_enumConnectPullUp+0x8>
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <DIO_enumConnectPullUp+0xa>
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	8a 83       	std	Y+2, r24	; 0x02
    20c8:	6b 83       	std	Y+3, r22	; 0x03
    20ca:	4c 83       	std	Y+4, r20	; 0x04
  DIO_errorStatus LOC_enumState = DIO_OK;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	84 30       	cpi	r24, 0x04	; 4
    20d4:	08 f0       	brcs	.+2      	; 0x20d8 <DIO_enumConnectPullUp+0x20>
    20d6:	3e c1       	rjmp	.+636    	; 0x2354 <DIO_enumConnectPullUp+0x29c>
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	88 30       	cpi	r24, 0x08	; 8
    20dc:	08 f0       	brcs	.+2      	; 0x20e0 <DIO_enumConnectPullUp+0x28>
    20de:	3a c1       	rjmp	.+628    	; 0x2354 <DIO_enumConnectPullUp+0x29c>
  {
    switch (Copy_u8PORT)
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	3e 83       	std	Y+6, r19	; 0x06
    20e8:	2d 83       	std	Y+5, r18	; 0x05
    20ea:	8d 81       	ldd	r24, Y+5	; 0x05
    20ec:	9e 81       	ldd	r25, Y+6	; 0x06
    20ee:	81 30       	cpi	r24, 0x01	; 1
    20f0:	91 05       	cpc	r25, r1
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <DIO_enumConnectPullUp+0x3e>
    20f4:	5d c0       	rjmp	.+186    	; 0x21b0 <DIO_enumConnectPullUp+0xf8>
    20f6:	2d 81       	ldd	r18, Y+5	; 0x05
    20f8:	3e 81       	ldd	r19, Y+6	; 0x06
    20fa:	22 30       	cpi	r18, 0x02	; 2
    20fc:	31 05       	cpc	r19, r1
    20fe:	2c f4       	brge	.+10     	; 0x210a <DIO_enumConnectPullUp+0x52>
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	71 f0       	breq	.+28     	; 0x2124 <DIO_enumConnectPullUp+0x6c>
    2108:	26 c1       	rjmp	.+588    	; 0x2356 <DIO_enumConnectPullUp+0x29e>
    210a:	2d 81       	ldd	r18, Y+5	; 0x05
    210c:	3e 81       	ldd	r19, Y+6	; 0x06
    210e:	22 30       	cpi	r18, 0x02	; 2
    2110:	31 05       	cpc	r19, r1
    2112:	09 f4       	brne	.+2      	; 0x2116 <DIO_enumConnectPullUp+0x5e>
    2114:	93 c0       	rjmp	.+294    	; 0x223c <DIO_enumConnectPullUp+0x184>
    2116:	8d 81       	ldd	r24, Y+5	; 0x05
    2118:	9e 81       	ldd	r25, Y+6	; 0x06
    211a:	83 30       	cpi	r24, 0x03	; 3
    211c:	91 05       	cpc	r25, r1
    211e:	09 f4       	brne	.+2      	; 0x2122 <DIO_enumConnectPullUp+0x6a>
    2120:	d3 c0       	rjmp	.+422    	; 0x22c8 <DIO_enumConnectPullUp+0x210>
    2122:	19 c1       	rjmp	.+562    	; 0x2356 <DIO_enumConnectPullUp+0x29e>
    {
    /* Connect or disconnect the pull up resistance to the given pin in port A */
    case DIO_PORTA:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    2124:	8c 81       	ldd	r24, Y+4	; 0x04
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	71 f5       	brne	.+92     	; 0x2186 <DIO_enumConnectPullUp+0xce>
      {
        CLR_BIT(SFIOR_REG, PUD); // It's default is zero
    212a:	a0 e5       	ldi	r26, 0x50	; 80
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e0 e5       	ldi	r30, 0x50	; 80
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	8b 7f       	andi	r24, 0xFB	; 251
    2136:	8c 93       	st	X, r24
        CLR_BIT(DDRA_REG, Copy_u8PIN);
    2138:	aa e3       	ldi	r26, 0x3A	; 58
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	ea e3       	ldi	r30, 0x3A	; 58
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	48 2f       	mov	r20, r24
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	28 2f       	mov	r18, r24
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <DIO_enumConnectPullUp+0x9c>
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	2a 95       	dec	r18
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <DIO_enumConnectPullUp+0x98>
    2158:	80 95       	com	r24
    215a:	84 23       	and	r24, r20
    215c:	8c 93       	st	X, r24
        SET_BIT(PORTA_REG, Copy_u8PIN);
    215e:	ab e3       	ldi	r26, 0x3B	; 59
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	eb e3       	ldi	r30, 0x3B	; 59
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	48 2f       	mov	r20, r24
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	02 2e       	mov	r0, r18
    2176:	02 c0       	rjmp	.+4      	; 0x217c <DIO_enumConnectPullUp+0xc4>
    2178:	88 0f       	add	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	0a 94       	dec	r0
    217e:	e2 f7       	brpl	.-8      	; 0x2178 <DIO_enumConnectPullUp+0xc0>
    2180:	84 2b       	or	r24, r20
    2182:	8c 93       	st	X, r24
    2184:	e8 c0       	rjmp	.+464    	; 0x2356 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTA_REG, Copy_u8PIN);
    2186:	ab e3       	ldi	r26, 0x3B	; 59
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	eb e3       	ldi	r30, 0x3B	; 59
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	48 2f       	mov	r20, r24
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	02 2e       	mov	r0, r18
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <DIO_enumConnectPullUp+0xec>
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	0a 94       	dec	r0
    21a6:	e2 f7       	brpl	.-8      	; 0x21a0 <DIO_enumConnectPullUp+0xe8>
    21a8:	80 95       	com	r24
    21aa:	84 23       	and	r24, r20
    21ac:	8c 93       	st	X, r24
    21ae:	d3 c0       	rjmp	.+422    	; 0x2356 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port B */
    case DIO_PORTB:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    21b0:	8c 81       	ldd	r24, Y+4	; 0x04
    21b2:	81 30       	cpi	r24, 0x01	; 1
    21b4:	71 f5       	brne	.+92     	; 0x2212 <DIO_enumConnectPullUp+0x15a>
      {
        CLR_BIT(SFIOR_REG, PUD);
    21b6:	a0 e5       	ldi	r26, 0x50	; 80
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e0 e5       	ldi	r30, 0x50	; 80
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	8b 7f       	andi	r24, 0xFB	; 251
    21c2:	8c 93       	st	X, r24
        CLR_BIT(DDRB_REG, Copy_u8PIN);
    21c4:	a7 e3       	ldi	r26, 0x37	; 55
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e7 e3       	ldi	r30, 0x37	; 55
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	48 2f       	mov	r20, r24
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <DIO_enumConnectPullUp+0x128>
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	2a 95       	dec	r18
    21e2:	e2 f7       	brpl	.-8      	; 0x21dc <DIO_enumConnectPullUp+0x124>
    21e4:	80 95       	com	r24
    21e6:	84 23       	and	r24, r20
    21e8:	8c 93       	st	X, r24
        SET_BIT(PORTB_REG, Copy_u8PIN);
    21ea:	a8 e3       	ldi	r26, 0x38	; 56
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e8 e3       	ldi	r30, 0x38	; 56
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	48 2f       	mov	r20, r24
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	02 2e       	mov	r0, r18
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <DIO_enumConnectPullUp+0x150>
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	0a 94       	dec	r0
    220a:	e2 f7       	brpl	.-8      	; 0x2204 <DIO_enumConnectPullUp+0x14c>
    220c:	84 2b       	or	r24, r20
    220e:	8c 93       	st	X, r24
    2210:	a2 c0       	rjmp	.+324    	; 0x2356 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTB_REG, Copy_u8PIN);
    2212:	a8 e3       	ldi	r26, 0x38	; 56
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e8 e3       	ldi	r30, 0x38	; 56
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	48 2f       	mov	r20, r24
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	02 2e       	mov	r0, r18
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <DIO_enumConnectPullUp+0x178>
    222c:	88 0f       	add	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	0a 94       	dec	r0
    2232:	e2 f7       	brpl	.-8      	; 0x222c <DIO_enumConnectPullUp+0x174>
    2234:	80 95       	com	r24
    2236:	84 23       	and	r24, r20
    2238:	8c 93       	st	X, r24
    223a:	8d c0       	rjmp	.+282    	; 0x2356 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port C */
    case DIO_PORTC:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    223c:	8c 81       	ldd	r24, Y+4	; 0x04
    223e:	81 30       	cpi	r24, 0x01	; 1
    2240:	71 f5       	brne	.+92     	; 0x229e <DIO_enumConnectPullUp+0x1e6>
      {
        CLR_BIT(SFIOR_REG, PUD);
    2242:	a0 e5       	ldi	r26, 0x50	; 80
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e0 e5       	ldi	r30, 0x50	; 80
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	8b 7f       	andi	r24, 0xFB	; 251
    224e:	8c 93       	st	X, r24
        CLR_BIT(DDRC_REG, Copy_u8PIN);
    2250:	a4 e3       	ldi	r26, 0x34	; 52
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e4 e3       	ldi	r30, 0x34	; 52
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	48 2f       	mov	r20, r24
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	02 c0       	rjmp	.+4      	; 0x226c <DIO_enumConnectPullUp+0x1b4>
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	2a 95       	dec	r18
    226e:	e2 f7       	brpl	.-8      	; 0x2268 <DIO_enumConnectPullUp+0x1b0>
    2270:	80 95       	com	r24
    2272:	84 23       	and	r24, r20
    2274:	8c 93       	st	X, r24
        SET_BIT(PORTC_REG, Copy_u8PIN);
    2276:	a5 e3       	ldi	r26, 0x35	; 53
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	e5 e3       	ldi	r30, 0x35	; 53
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	48 2f       	mov	r20, r24
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	02 2e       	mov	r0, r18
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <DIO_enumConnectPullUp+0x1dc>
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	0a 94       	dec	r0
    2296:	e2 f7       	brpl	.-8      	; 0x2290 <DIO_enumConnectPullUp+0x1d8>
    2298:	84 2b       	or	r24, r20
    229a:	8c 93       	st	X, r24
    229c:	5c c0       	rjmp	.+184    	; 0x2356 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTC_REG, Copy_u8PIN);
    229e:	a5 e3       	ldi	r26, 0x35	; 53
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	e5 e3       	ldi	r30, 0x35	; 53
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	48 2f       	mov	r20, r24
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	02 2e       	mov	r0, r18
    22b6:	02 c0       	rjmp	.+4      	; 0x22bc <DIO_enumConnectPullUp+0x204>
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	0a 94       	dec	r0
    22be:	e2 f7       	brpl	.-8      	; 0x22b8 <DIO_enumConnectPullUp+0x200>
    22c0:	80 95       	com	r24
    22c2:	84 23       	and	r24, r20
    22c4:	8c 93       	st	X, r24
    22c6:	47 c0       	rjmp	.+142    	; 0x2356 <DIO_enumConnectPullUp+0x29e>
      }
      break;
      /* Connect or disconnect the pull up resistance to the given pin in port D */
    case DIO_PORTD:
      if (Copy_u8ConnectPullup == DIO_PIN_HIGH)
    22c8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ca:	81 30       	cpi	r24, 0x01	; 1
    22cc:	71 f5       	brne	.+92     	; 0x232a <DIO_enumConnectPullUp+0x272>
      {
        CLR_BIT(SFIOR_REG, PUD);
    22ce:	a0 e5       	ldi	r26, 0x50	; 80
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e0 e5       	ldi	r30, 0x50	; 80
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	8b 7f       	andi	r24, 0xFB	; 251
    22da:	8c 93       	st	X, r24
        CLR_BIT(DDRD_REG, Copy_u8PIN);
    22dc:	a1 e3       	ldi	r26, 0x31	; 49
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e1 e3       	ldi	r30, 0x31	; 49
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	48 2f       	mov	r20, r24
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <DIO_enumConnectPullUp+0x240>
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	2a 95       	dec	r18
    22fa:	e2 f7       	brpl	.-8      	; 0x22f4 <DIO_enumConnectPullUp+0x23c>
    22fc:	80 95       	com	r24
    22fe:	84 23       	and	r24, r20
    2300:	8c 93       	st	X, r24
        SET_BIT(PORTD_REG, Copy_u8PIN);
    2302:	a2 e3       	ldi	r26, 0x32	; 50
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e2 e3       	ldi	r30, 0x32	; 50
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	48 2f       	mov	r20, r24
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	02 2e       	mov	r0, r18
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <DIO_enumConnectPullUp+0x268>
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	0a 94       	dec	r0
    2322:	e2 f7       	brpl	.-8      	; 0x231c <DIO_enumConnectPullUp+0x264>
    2324:	84 2b       	or	r24, r20
    2326:	8c 93       	st	X, r24
    2328:	16 c0       	rjmp	.+44     	; 0x2356 <DIO_enumConnectPullUp+0x29e>
      }
      else
      {
        CLR_BIT(PORTD_REG, Copy_u8PIN);
    232a:	a2 e3       	ldi	r26, 0x32	; 50
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e2 e3       	ldi	r30, 0x32	; 50
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	48 2f       	mov	r20, r24
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	02 2e       	mov	r0, r18
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <DIO_enumConnectPullUp+0x290>
    2344:	88 0f       	add	r24, r24
    2346:	99 1f       	adc	r25, r25
    2348:	0a 94       	dec	r0
    234a:	e2 f7       	brpl	.-8      	; 0x2344 <DIO_enumConnectPullUp+0x28c>
    234c:	80 95       	com	r24
    234e:	84 23       	and	r24, r20
    2350:	8c 93       	st	X, r24
    2352:	01 c0       	rjmp	.+2      	; 0x2356 <DIO_enumConnectPullUp+0x29e>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    2354:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    2356:	89 81       	ldd	r24, Y+1	; 0x01
}
    2358:	26 96       	adiw	r28, 0x06	; 6
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <DIO_enumSetPortDir>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_errorStatus DIO_enumSetPortDir(u8 Copy_u8PORT, u8 Copy_u8Direction)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	00 d0       	rcall	.+0      	; 0x2370 <DIO_enumSetPortDir+0x6>
    2370:	00 d0       	rcall	.+0      	; 0x2372 <DIO_enumSetPortDir+0x8>
    2372:	0f 92       	push	r0
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	8a 83       	std	Y+2, r24	; 0x02
    237a:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD))
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	84 30       	cpi	r24, 0x04	; 4
    2384:	a8 f5       	brcc	.+106    	; 0x23f0 <DIO_enumSetPortDir+0x86>
  {
    switch (Copy_u8PORT)
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	28 2f       	mov	r18, r24
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	3d 83       	std	Y+5, r19	; 0x05
    238e:	2c 83       	std	Y+4, r18	; 0x04
    2390:	8c 81       	ldd	r24, Y+4	; 0x04
    2392:	9d 81       	ldd	r25, Y+5	; 0x05
    2394:	81 30       	cpi	r24, 0x01	; 1
    2396:	91 05       	cpc	r25, r1
    2398:	d1 f0       	breq	.+52     	; 0x23ce <DIO_enumSetPortDir+0x64>
    239a:	2c 81       	ldd	r18, Y+4	; 0x04
    239c:	3d 81       	ldd	r19, Y+5	; 0x05
    239e:	22 30       	cpi	r18, 0x02	; 2
    23a0:	31 05       	cpc	r19, r1
    23a2:	2c f4       	brge	.+10     	; 0x23ae <DIO_enumSetPortDir+0x44>
    23a4:	8c 81       	ldd	r24, Y+4	; 0x04
    23a6:	9d 81       	ldd	r25, Y+5	; 0x05
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	61 f0       	breq	.+24     	; 0x23c4 <DIO_enumSetPortDir+0x5a>
    23ac:	1f c0       	rjmp	.+62     	; 0x23ec <DIO_enumSetPortDir+0x82>
    23ae:	2c 81       	ldd	r18, Y+4	; 0x04
    23b0:	3d 81       	ldd	r19, Y+5	; 0x05
    23b2:	22 30       	cpi	r18, 0x02	; 2
    23b4:	31 05       	cpc	r19, r1
    23b6:	81 f0       	breq	.+32     	; 0x23d8 <DIO_enumSetPortDir+0x6e>
    23b8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ba:	9d 81       	ldd	r25, Y+5	; 0x05
    23bc:	83 30       	cpi	r24, 0x03	; 3
    23be:	91 05       	cpc	r25, r1
    23c0:	81 f0       	breq	.+32     	; 0x23e2 <DIO_enumSetPortDir+0x78>
    23c2:	14 c0       	rjmp	.+40     	; 0x23ec <DIO_enumSetPortDir+0x82>
    {
    case DIO_PORTA:
      DDRA_REG = Copy_u8Direction;
    23c4:	ea e3       	ldi	r30, 0x3A	; 58
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	80 83       	st	Z, r24
    23cc:	12 c0       	rjmp	.+36     	; 0x23f2 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTB:
      DDRB_REG = Copy_u8Direction;
    23ce:	e7 e3       	ldi	r30, 0x37	; 55
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	80 83       	st	Z, r24
    23d6:	0d c0       	rjmp	.+26     	; 0x23f2 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTC:
      DDRC_REG = Copy_u8Direction;
    23d8:	e4 e3       	ldi	r30, 0x34	; 52
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	80 83       	st	Z, r24
    23e0:	08 c0       	rjmp	.+16     	; 0x23f2 <DIO_enumSetPortDir+0x88>
      break;
    case DIO_PORTD:
      DDRD_REG = Copy_u8Direction;
    23e2:	e1 e3       	ldi	r30, 0x31	; 49
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	80 83       	st	Z, r24
    23ea:	03 c0       	rjmp	.+6      	; 0x23f2 <DIO_enumSetPortDir+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    23ec:	19 82       	std	Y+1, r1	; 0x01
    23ee:	01 c0       	rjmp	.+2      	; 0x23f2 <DIO_enumSetPortDir+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    23f0:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <DIO_enumWritePortVal>:
      =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_errorStatus DIO_enumWritePortVal(u8 Copy_u8PORT, u8 Copy_u8Value)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	00 d0       	rcall	.+0      	; 0x240a <DIO_enumWritePortVal+0x6>
    240a:	00 d0       	rcall	.+0      	; 0x240c <DIO_enumWritePortVal+0x8>
    240c:	0f 92       	push	r0
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	8a 83       	std	Y+2, r24	; 0x02
    2414:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	89 83       	std	Y+1, r24	; 0x01
  if ((Copy_u8PORT <= DIO_PORTD) && ((Copy_u8Value <= 255) || (Copy_u8Value == DIO_PORT_LOW) || (Copy_u8Value == DIO_PORT_HIGH)))
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	84 30       	cpi	r24, 0x04	; 4
    241e:	a8 f5       	brcc	.+106    	; 0x248a <DIO_enumWritePortVal+0x86>
  {
    switch (Copy_u8PORT)
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	28 2f       	mov	r18, r24
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	3d 83       	std	Y+5, r19	; 0x05
    2428:	2c 83       	std	Y+4, r18	; 0x04
    242a:	8c 81       	ldd	r24, Y+4	; 0x04
    242c:	9d 81       	ldd	r25, Y+5	; 0x05
    242e:	81 30       	cpi	r24, 0x01	; 1
    2430:	91 05       	cpc	r25, r1
    2432:	d1 f0       	breq	.+52     	; 0x2468 <DIO_enumWritePortVal+0x64>
    2434:	2c 81       	ldd	r18, Y+4	; 0x04
    2436:	3d 81       	ldd	r19, Y+5	; 0x05
    2438:	22 30       	cpi	r18, 0x02	; 2
    243a:	31 05       	cpc	r19, r1
    243c:	2c f4       	brge	.+10     	; 0x2448 <DIO_enumWritePortVal+0x44>
    243e:	8c 81       	ldd	r24, Y+4	; 0x04
    2440:	9d 81       	ldd	r25, Y+5	; 0x05
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	61 f0       	breq	.+24     	; 0x245e <DIO_enumWritePortVal+0x5a>
    2446:	1f c0       	rjmp	.+62     	; 0x2486 <DIO_enumWritePortVal+0x82>
    2448:	2c 81       	ldd	r18, Y+4	; 0x04
    244a:	3d 81       	ldd	r19, Y+5	; 0x05
    244c:	22 30       	cpi	r18, 0x02	; 2
    244e:	31 05       	cpc	r19, r1
    2450:	81 f0       	breq	.+32     	; 0x2472 <DIO_enumWritePortVal+0x6e>
    2452:	8c 81       	ldd	r24, Y+4	; 0x04
    2454:	9d 81       	ldd	r25, Y+5	; 0x05
    2456:	83 30       	cpi	r24, 0x03	; 3
    2458:	91 05       	cpc	r25, r1
    245a:	81 f0       	breq	.+32     	; 0x247c <DIO_enumWritePortVal+0x78>
    245c:	14 c0       	rjmp	.+40     	; 0x2486 <DIO_enumWritePortVal+0x82>
    {
    case DIO_PORTA:
      PORTA_REG= Copy_u8Value;
    245e:	eb e3       	ldi	r30, 0x3B	; 59
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	8b 81       	ldd	r24, Y+3	; 0x03
    2464:	80 83       	st	Z, r24
    2466:	12 c0       	rjmp	.+36     	; 0x248c <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTB:
      PORTB_REG = Copy_u8Value;
    2468:	e8 e3       	ldi	r30, 0x38	; 56
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	80 83       	st	Z, r24
    2470:	0d c0       	rjmp	.+26     	; 0x248c <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTC:
      PORTC_REG = Copy_u8Value;
    2472:	e5 e3       	ldi	r30, 0x35	; 53
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	80 83       	st	Z, r24
    247a:	08 c0       	rjmp	.+16     	; 0x248c <DIO_enumWritePortVal+0x88>
      break;
    case DIO_PORTD:
      PORTD_REG = Copy_u8Value;
    247c:	e2 e3       	ldi	r30, 0x32	; 50
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	8b 81       	ldd	r24, Y+3	; 0x03
    2482:	80 83       	st	Z, r24
    2484:	03 c0       	rjmp	.+6      	; 0x248c <DIO_enumWritePortVal+0x88>
      break;
    default:
      LOC_enumState = DIO_NOK;
    2486:	19 82       	std	Y+1, r1	; 0x01
    2488:	01 c0       	rjmp	.+2      	; 0x248c <DIO_enumWritePortVal+0x88>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    248a:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    248c:	89 81       	ldd	r24, Y+1	; 0x01
}
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <DIO_enumReadPorVal>:
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
    => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_errorStatus DIO_enumReadPorVal(u8 Copy_u8PORT, u8 *Copy_Pu8Data)
{
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	27 97       	sbiw	r28, 0x07	; 7
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	cd bf       	out	0x3d, r28	; 61
    24b2:	8a 83       	std	Y+2, r24	; 0x02
    24b4:	7c 83       	std	Y+4, r23	; 0x04
    24b6:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	84 30       	cpi	r24, 0x04	; 4
    24c0:	08 f0       	brcs	.+2      	; 0x24c4 <DIO_enumReadPorVal+0x26>
    24c2:	3f c0       	rjmp	.+126    	; 0x2542 <DIO_enumReadPorVal+0xa4>
  {
    switch (Copy_u8PORT)
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	3f 83       	std	Y+7, r19	; 0x07
    24cc:	2e 83       	std	Y+6, r18	; 0x06
    24ce:	8e 81       	ldd	r24, Y+6	; 0x06
    24d0:	9f 81       	ldd	r25, Y+7	; 0x07
    24d2:	81 30       	cpi	r24, 0x01	; 1
    24d4:	91 05       	cpc	r25, r1
    24d6:	e1 f0       	breq	.+56     	; 0x2510 <DIO_enumReadPorVal+0x72>
    24d8:	2e 81       	ldd	r18, Y+6	; 0x06
    24da:	3f 81       	ldd	r19, Y+7	; 0x07
    24dc:	22 30       	cpi	r18, 0x02	; 2
    24de:	31 05       	cpc	r19, r1
    24e0:	2c f4       	brge	.+10     	; 0x24ec <DIO_enumReadPorVal+0x4e>
    24e2:	8e 81       	ldd	r24, Y+6	; 0x06
    24e4:	9f 81       	ldd	r25, Y+7	; 0x07
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	61 f0       	breq	.+24     	; 0x2502 <DIO_enumReadPorVal+0x64>
    24ea:	27 c0       	rjmp	.+78     	; 0x253a <DIO_enumReadPorVal+0x9c>
    24ec:	2e 81       	ldd	r18, Y+6	; 0x06
    24ee:	3f 81       	ldd	r19, Y+7	; 0x07
    24f0:	22 30       	cpi	r18, 0x02	; 2
    24f2:	31 05       	cpc	r19, r1
    24f4:	a1 f0       	breq	.+40     	; 0x251e <DIO_enumReadPorVal+0x80>
    24f6:	8e 81       	ldd	r24, Y+6	; 0x06
    24f8:	9f 81       	ldd	r25, Y+7	; 0x07
    24fa:	83 30       	cpi	r24, 0x03	; 3
    24fc:	91 05       	cpc	r25, r1
    24fe:	b1 f0       	breq	.+44     	; 0x252c <DIO_enumReadPorVal+0x8e>
    2500:	1c c0       	rjmp	.+56     	; 0x253a <DIO_enumReadPorVal+0x9c>
    {
    case DIO_PORTA:
      *Copy_Pu8Data = PINA_REG;
    2502:	e9 e3       	ldi	r30, 0x39	; 57
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	eb 81       	ldd	r30, Y+3	; 0x03
    250a:	fc 81       	ldd	r31, Y+4	; 0x04
    250c:	80 83       	st	Z, r24
    250e:	16 c0       	rjmp	.+44     	; 0x253c <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTB:
      *Copy_Pu8Data = PINB_REG;
    2510:	e6 e3       	ldi	r30, 0x36	; 54
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	eb 81       	ldd	r30, Y+3	; 0x03
    2518:	fc 81       	ldd	r31, Y+4	; 0x04
    251a:	80 83       	st	Z, r24
    251c:	0f c0       	rjmp	.+30     	; 0x253c <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTC:
      *Copy_Pu8Data = PINC_REG;
    251e:	e3 e3       	ldi	r30, 0x33	; 51
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	eb 81       	ldd	r30, Y+3	; 0x03
    2526:	fc 81       	ldd	r31, Y+4	; 0x04
    2528:	80 83       	st	Z, r24
    252a:	08 c0       	rjmp	.+16     	; 0x253c <DIO_enumReadPorVal+0x9e>
      break;
    case DIO_PORTD:
      *Copy_Pu8Data = PIND_REG;
    252c:	e0 e3       	ldi	r30, 0x30	; 48
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	eb 81       	ldd	r30, Y+3	; 0x03
    2534:	fc 81       	ldd	r31, Y+4	; 0x04
    2536:	80 83       	st	Z, r24
    2538:	01 c0       	rjmp	.+2      	; 0x253c <DIO_enumReadPorVal+0x9e>
      break;
    default:
      LOC_enumState = DIO_NOK;
    253a:	19 82       	std	Y+1, r1	; 0x01
      break;
    }
    return LOC_enumState;
    253c:	99 81       	ldd	r25, Y+1	; 0x01
    253e:	9d 83       	std	Y+5, r25	; 0x05
    2540:	03 c0       	rjmp	.+6      	; 0x2548 <DIO_enumReadPorVal+0xaa>
  }
  else
  {
    LOC_enumState = DIO_NOK;
    2542:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    2544:	29 81       	ldd	r18, Y+1	; 0x01
    2546:	2d 83       	std	Y+5, r18	; 0x05
    2548:	8d 81       	ldd	r24, Y+5	; 0x05
}
    254a:	27 96       	adiw	r28, 0x07	; 7
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <DIO_enumTogglePortValue>:
 * Parameters :
    =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_errorStatus DIO_enumTogglePortValue(u8 Copy_u8PORT)
{
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	00 d0       	rcall	.+0      	; 0x2562 <DIO_enumTogglePortValue+0x6>
    2562:	00 d0       	rcall	.+0      	; 0x2564 <DIO_enumTogglePortValue+0x8>
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	8a 83       	std	Y+2, r24	; 0x02
  DIO_errorStatus LOC_enumState = DIO_OK;
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	89 83       	std	Y+1, r24	; 0x01

  if (Copy_u8PORT <= DIO_PORTD)
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	84 30       	cpi	r24, 0x04	; 4
    2572:	08 f0       	brcs	.+2      	; 0x2576 <DIO_enumTogglePortValue+0x1a>
    2574:	3f c0       	rjmp	.+126    	; 0x25f4 <DIO_enumTogglePortValue+0x98>
  {
    switch (Copy_u8PORT)
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	3c 83       	std	Y+4, r19	; 0x04
    257e:	2b 83       	std	Y+3, r18	; 0x03
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	9c 81       	ldd	r25, Y+4	; 0x04
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	91 05       	cpc	r25, r1
    2588:	e9 f0       	breq	.+58     	; 0x25c4 <DIO_enumTogglePortValue+0x68>
    258a:	2b 81       	ldd	r18, Y+3	; 0x03
    258c:	3c 81       	ldd	r19, Y+4	; 0x04
    258e:	22 30       	cpi	r18, 0x02	; 2
    2590:	31 05       	cpc	r19, r1
    2592:	2c f4       	brge	.+10     	; 0x259e <DIO_enumTogglePortValue+0x42>
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	9c 81       	ldd	r25, Y+4	; 0x04
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	61 f0       	breq	.+24     	; 0x25b4 <DIO_enumTogglePortValue+0x58>
    259c:	2c c0       	rjmp	.+88     	; 0x25f6 <DIO_enumTogglePortValue+0x9a>
    259e:	2b 81       	ldd	r18, Y+3	; 0x03
    25a0:	3c 81       	ldd	r19, Y+4	; 0x04
    25a2:	22 30       	cpi	r18, 0x02	; 2
    25a4:	31 05       	cpc	r19, r1
    25a6:	b1 f0       	breq	.+44     	; 0x25d4 <DIO_enumTogglePortValue+0x78>
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	9c 81       	ldd	r25, Y+4	; 0x04
    25ac:	83 30       	cpi	r24, 0x03	; 3
    25ae:	91 05       	cpc	r25, r1
    25b0:	c9 f0       	breq	.+50     	; 0x25e4 <DIO_enumTogglePortValue+0x88>
    25b2:	21 c0       	rjmp	.+66     	; 0x25f6 <DIO_enumTogglePortValue+0x9a>
    {
    case DIO_PORTA:
      PORTA_REG = ~PORTA_REG;
    25b4:	ab e3       	ldi	r26, 0x3B	; 59
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	eb e3       	ldi	r30, 0x3B	; 59
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	80 95       	com	r24
    25c0:	8c 93       	st	X, r24
    25c2:	19 c0       	rjmp	.+50     	; 0x25f6 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTB:
      PORTB_REG = ~PORTB_REG;
    25c4:	a8 e3       	ldi	r26, 0x38	; 56
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	e8 e3       	ldi	r30, 0x38	; 56
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	80 95       	com	r24
    25d0:	8c 93       	st	X, r24
    25d2:	11 c0       	rjmp	.+34     	; 0x25f6 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTC:
      PORTC_REG = ~PORTC_REG;
    25d4:	a5 e3       	ldi	r26, 0x35	; 53
    25d6:	b0 e0       	ldi	r27, 0x00	; 0
    25d8:	e5 e3       	ldi	r30, 0x35	; 53
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	80 95       	com	r24
    25e0:	8c 93       	st	X, r24
    25e2:	09 c0       	rjmp	.+18     	; 0x25f6 <DIO_enumTogglePortValue+0x9a>
      break;
    case DIO_PORTD:
      PORTD_REG = ~PORTD_REG;
    25e4:	a2 e3       	ldi	r26, 0x32	; 50
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e2 e3       	ldi	r30, 0x32	; 50
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	80 95       	com	r24
    25f0:	8c 93       	st	X, r24
    25f2:	01 c0       	rjmp	.+2      	; 0x25f6 <DIO_enumTogglePortValue+0x9a>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    25f4:	19 82       	std	Y+1, r1	; 0x01
  }
  return LOC_enumState;
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <DIO_vWriteLowNibble>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_errorStatus DIO_vWriteLowNibble(u8 Copy_u8PORT, u8 value)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <DIO_vWriteLowNibble+0x6>
    260c:	00 d0       	rcall	.+0      	; 0x260e <DIO_vWriteLowNibble+0x8>
    260e:	0f 92       	push	r0
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	8a 83       	std	Y+2, r24	; 0x02
    2616:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    261c:	8a 81       	ldd	r24, Y+2	; 0x02
    261e:	84 30       	cpi	r24, 0x04	; 4
    2620:	08 f0       	brcs	.+2      	; 0x2624 <DIO_vWriteLowNibble+0x1e>
    2622:	62 c0       	rjmp	.+196    	; 0x26e8 <DIO_vWriteLowNibble+0xe2>
  {
    value &= 0x0F;
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	8f 70       	andi	r24, 0x0F	; 15
    2628:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    262a:	8a 81       	ldd	r24, Y+2	; 0x02
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	3d 83       	std	Y+5, r19	; 0x05
    2632:	2c 83       	std	Y+4, r18	; 0x04
    2634:	8c 81       	ldd	r24, Y+4	; 0x04
    2636:	9d 81       	ldd	r25, Y+5	; 0x05
    2638:	81 30       	cpi	r24, 0x01	; 1
    263a:	91 05       	cpc	r25, r1
    263c:	29 f1       	breq	.+74     	; 0x2688 <DIO_vWriteLowNibble+0x82>
    263e:	2c 81       	ldd	r18, Y+4	; 0x04
    2640:	3d 81       	ldd	r19, Y+5	; 0x05
    2642:	22 30       	cpi	r18, 0x02	; 2
    2644:	31 05       	cpc	r19, r1
    2646:	2c f4       	brge	.+10     	; 0x2652 <DIO_vWriteLowNibble+0x4c>
    2648:	8c 81       	ldd	r24, Y+4	; 0x04
    264a:	9d 81       	ldd	r25, Y+5	; 0x05
    264c:	00 97       	sbiw	r24, 0x00	; 0
    264e:	61 f0       	breq	.+24     	; 0x2668 <DIO_vWriteLowNibble+0x62>
    2650:	4c c0       	rjmp	.+152    	; 0x26ea <DIO_vWriteLowNibble+0xe4>
    2652:	2c 81       	ldd	r18, Y+4	; 0x04
    2654:	3d 81       	ldd	r19, Y+5	; 0x05
    2656:	22 30       	cpi	r18, 0x02	; 2
    2658:	31 05       	cpc	r19, r1
    265a:	31 f1       	breq	.+76     	; 0x26a8 <DIO_vWriteLowNibble+0xa2>
    265c:	8c 81       	ldd	r24, Y+4	; 0x04
    265e:	9d 81       	ldd	r25, Y+5	; 0x05
    2660:	83 30       	cpi	r24, 0x03	; 3
    2662:	91 05       	cpc	r25, r1
    2664:	89 f1       	breq	.+98     	; 0x26c8 <DIO_vWriteLowNibble+0xc2>
    2666:	41 c0       	rjmp	.+130    	; 0x26ea <DIO_vWriteLowNibble+0xe4>
    {
    case DIO_PORTA:
      PORTA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    2668:	ab e3       	ldi	r26, 0x3B	; 59
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	eb e3       	ldi	r30, 0x3B	; 59
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	80 7f       	andi	r24, 0xF0	; 240
    2674:	8c 93       	st	X, r24
      PORTA_REG |= value;
    2676:	ab e3       	ldi	r26, 0x3B	; 59
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	eb e3       	ldi	r30, 0x3B	; 59
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	90 81       	ld	r25, Z
    2680:	8b 81       	ldd	r24, Y+3	; 0x03
    2682:	89 2b       	or	r24, r25
    2684:	8c 93       	st	X, r24
    2686:	31 c0       	rjmp	.+98     	; 0x26ea <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    2688:	a8 e3       	ldi	r26, 0x38	; 56
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	e8 e3       	ldi	r30, 0x38	; 56
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	80 7f       	andi	r24, 0xF0	; 240
    2694:	8c 93       	st	X, r24
      PORTB_REG |= value;
    2696:	a8 e3       	ldi	r26, 0x38	; 56
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e8 e3       	ldi	r30, 0x38	; 56
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	90 81       	ld	r25, Z
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	89 2b       	or	r24, r25
    26a4:	8c 93       	st	X, r24
    26a6:	21 c0       	rjmp	.+66     	; 0x26ea <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    26a8:	a5 e3       	ldi	r26, 0x35	; 53
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	e5 e3       	ldi	r30, 0x35	; 53
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	80 7f       	andi	r24, 0xF0	; 240
    26b4:	8c 93       	st	X, r24
      PORTC_REG |= value;
    26b6:	a5 e3       	ldi	r26, 0x35	; 53
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e5 e3       	ldi	r30, 0x35	; 53
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	90 81       	ld	r25, Z
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	89 2b       	or	r24, r25
    26c4:	8c 93       	st	X, r24
    26c6:	11 c0       	rjmp	.+34     	; 0x26ea <DIO_vWriteLowNibble+0xe4>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    26c8:	a2 e3       	ldi	r26, 0x32	; 50
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	e2 e3       	ldi	r30, 0x32	; 50
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	80 7f       	andi	r24, 0xF0	; 240
    26d4:	8c 93       	st	X, r24
      PORTD_REG |= value;
    26d6:	a2 e3       	ldi	r26, 0x32	; 50
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	e2 e3       	ldi	r30, 0x32	; 50
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	90 81       	ld	r25, Z
    26e0:	8b 81       	ldd	r24, Y+3	; 0x03
    26e2:	89 2b       	or	r24, r25
    26e4:	8c 93       	st	X, r24
    26e6:	01 c0       	rjmp	.+2      	; 0x26ea <DIO_vWriteLowNibble+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    26e8:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	cf 91       	pop	r28
    26f8:	df 91       	pop	r29
    26fa:	08 95       	ret

000026fc <DIO_vWriteHighNibble>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_errorStatus DIO_vWriteHighNibble(u8 Copy_u8PORT, u8 value)
{
    26fc:	df 93       	push	r29
    26fe:	cf 93       	push	r28
    2700:	00 d0       	rcall	.+0      	; 0x2702 <DIO_vWriteHighNibble+0x6>
    2702:	00 d0       	rcall	.+0      	; 0x2704 <DIO_vWriteHighNibble+0x8>
    2704:	0f 92       	push	r0
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	8a 83       	std	Y+2, r24	; 0x02
    270c:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	84 30       	cpi	r24, 0x04	; 4
    2716:	08 f0       	brcs	.+2      	; 0x271a <DIO_vWriteHighNibble+0x1e>
    2718:	63 c0       	rjmp	.+198    	; 0x27e0 <DIO_vWriteHighNibble+0xe4>
  {
    value <<= 4;
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	82 95       	swap	r24
    271e:	80 7f       	andi	r24, 0xF0	; 240
    2720:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2722:	8a 81       	ldd	r24, Y+2	; 0x02
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	3d 83       	std	Y+5, r19	; 0x05
    272a:	2c 83       	std	Y+4, r18	; 0x04
    272c:	8c 81       	ldd	r24, Y+4	; 0x04
    272e:	9d 81       	ldd	r25, Y+5	; 0x05
    2730:	81 30       	cpi	r24, 0x01	; 1
    2732:	91 05       	cpc	r25, r1
    2734:	29 f1       	breq	.+74     	; 0x2780 <DIO_vWriteHighNibble+0x84>
    2736:	2c 81       	ldd	r18, Y+4	; 0x04
    2738:	3d 81       	ldd	r19, Y+5	; 0x05
    273a:	22 30       	cpi	r18, 0x02	; 2
    273c:	31 05       	cpc	r19, r1
    273e:	2c f4       	brge	.+10     	; 0x274a <DIO_vWriteHighNibble+0x4e>
    2740:	8c 81       	ldd	r24, Y+4	; 0x04
    2742:	9d 81       	ldd	r25, Y+5	; 0x05
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	61 f0       	breq	.+24     	; 0x2760 <DIO_vWriteHighNibble+0x64>
    2748:	4c c0       	rjmp	.+152    	; 0x27e2 <DIO_vWriteHighNibble+0xe6>
    274a:	2c 81       	ldd	r18, Y+4	; 0x04
    274c:	3d 81       	ldd	r19, Y+5	; 0x05
    274e:	22 30       	cpi	r18, 0x02	; 2
    2750:	31 05       	cpc	r19, r1
    2752:	31 f1       	breq	.+76     	; 0x27a0 <DIO_vWriteHighNibble+0xa4>
    2754:	8c 81       	ldd	r24, Y+4	; 0x04
    2756:	9d 81       	ldd	r25, Y+5	; 0x05
    2758:	83 30       	cpi	r24, 0x03	; 3
    275a:	91 05       	cpc	r25, r1
    275c:	89 f1       	breq	.+98     	; 0x27c0 <DIO_vWriteHighNibble+0xc4>
    275e:	41 c0       	rjmp	.+130    	; 0x27e2 <DIO_vWriteHighNibble+0xe6>
    {
    case DIO_PORTA:
      PORTA_REG &= 0x0F;
    2760:	ab e3       	ldi	r26, 0x3B	; 59
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	eb e3       	ldi	r30, 0x3B	; 59
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	8f 70       	andi	r24, 0x0F	; 15
    276c:	8c 93       	st	X, r24
      PORTA_REG|= value;
    276e:	ab e3       	ldi	r26, 0x3B	; 59
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	eb e3       	ldi	r30, 0x3B	; 59
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	90 81       	ld	r25, Z
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	89 2b       	or	r24, r25
    277c:	8c 93       	st	X, r24
    277e:	31 c0       	rjmp	.+98     	; 0x27e2 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTB:
      PORTB_REG &= 0x0F;
    2780:	a8 e3       	ldi	r26, 0x38	; 56
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e8 e3       	ldi	r30, 0x38	; 56
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	8f 70       	andi	r24, 0x0F	; 15
    278c:	8c 93       	st	X, r24
      PORTB_REG |= value;
    278e:	a8 e3       	ldi	r26, 0x38	; 56
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	e8 e3       	ldi	r30, 0x38	; 56
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	90 81       	ld	r25, Z
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	89 2b       	or	r24, r25
    279c:	8c 93       	st	X, r24
    279e:	21 c0       	rjmp	.+66     	; 0x27e2 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTC:
      PORTC_REG &= 0x0F;
    27a0:	a5 e3       	ldi	r26, 0x35	; 53
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e5 e3       	ldi	r30, 0x35	; 53
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	8f 70       	andi	r24, 0x0F	; 15
    27ac:	8c 93       	st	X, r24
      PORTC_REG |= value;
    27ae:	a5 e3       	ldi	r26, 0x35	; 53
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e5 e3       	ldi	r30, 0x35	; 53
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	90 81       	ld	r25, Z
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	89 2b       	or	r24, r25
    27bc:	8c 93       	st	X, r24
    27be:	11 c0       	rjmp	.+34     	; 0x27e2 <DIO_vWriteHighNibble+0xe6>
      break;
    case DIO_PORTD:
      PORTD_REG &= 0x0F;
    27c0:	a2 e3       	ldi	r26, 0x32	; 50
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	e2 e3       	ldi	r30, 0x32	; 50
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	8f 70       	andi	r24, 0x0F	; 15
    27cc:	8c 93       	st	X, r24
      PORTD_REG |= value;
    27ce:	a2 e3       	ldi	r26, 0x32	; 50
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	e2 e3       	ldi	r30, 0x32	; 50
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	90 81       	ld	r25, Z
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	89 2b       	or	r24, r25
    27dc:	8c 93       	st	X, r24
    27de:	01 c0       	rjmp	.+2      	; 0x27e2 <DIO_vWriteHighNibble+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    27e0:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <DIO_vSetLowNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetLowNibbleDir(u8 Copy_u8PORT, u8 value)
{
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	00 d0       	rcall	.+0      	; 0x27fa <DIO_vSetLowNibbleDir+0x6>
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <DIO_vSetLowNibbleDir+0x8>
    27fc:	0f 92       	push	r0
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	8a 83       	std	Y+2, r24	; 0x02
    2804:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	84 30       	cpi	r24, 0x04	; 4
    280e:	08 f0       	brcs	.+2      	; 0x2812 <DIO_vSetLowNibbleDir+0x1e>
    2810:	62 c0       	rjmp	.+196    	; 0x28d6 <DIO_vSetLowNibbleDir+0xe2>
  {
    value &= 0x0F;
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	8f 70       	andi	r24, 0x0F	; 15
    2816:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2818:	8a 81       	ldd	r24, Y+2	; 0x02
    281a:	28 2f       	mov	r18, r24
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	3d 83       	std	Y+5, r19	; 0x05
    2820:	2c 83       	std	Y+4, r18	; 0x04
    2822:	8c 81       	ldd	r24, Y+4	; 0x04
    2824:	9d 81       	ldd	r25, Y+5	; 0x05
    2826:	81 30       	cpi	r24, 0x01	; 1
    2828:	91 05       	cpc	r25, r1
    282a:	29 f1       	breq	.+74     	; 0x2876 <DIO_vSetLowNibbleDir+0x82>
    282c:	2c 81       	ldd	r18, Y+4	; 0x04
    282e:	3d 81       	ldd	r19, Y+5	; 0x05
    2830:	22 30       	cpi	r18, 0x02	; 2
    2832:	31 05       	cpc	r19, r1
    2834:	2c f4       	brge	.+10     	; 0x2840 <DIO_vSetLowNibbleDir+0x4c>
    2836:	8c 81       	ldd	r24, Y+4	; 0x04
    2838:	9d 81       	ldd	r25, Y+5	; 0x05
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	61 f0       	breq	.+24     	; 0x2856 <DIO_vSetLowNibbleDir+0x62>
    283e:	4c c0       	rjmp	.+152    	; 0x28d8 <DIO_vSetLowNibbleDir+0xe4>
    2840:	2c 81       	ldd	r18, Y+4	; 0x04
    2842:	3d 81       	ldd	r19, Y+5	; 0x05
    2844:	22 30       	cpi	r18, 0x02	; 2
    2846:	31 05       	cpc	r19, r1
    2848:	31 f1       	breq	.+76     	; 0x2896 <DIO_vSetLowNibbleDir+0xa2>
    284a:	8c 81       	ldd	r24, Y+4	; 0x04
    284c:	9d 81       	ldd	r25, Y+5	; 0x05
    284e:	83 30       	cpi	r24, 0x03	; 3
    2850:	91 05       	cpc	r25, r1
    2852:	89 f1       	breq	.+98     	; 0x28b6 <DIO_vSetLowNibbleDir+0xc2>
    2854:	41 c0       	rjmp	.+130    	; 0x28d8 <DIO_vSetLowNibbleDir+0xe4>
    {
    case DIO_PORTA:
      DDRA_REG &= 0xF0; // Set only the high nibble of the port A by the given value
    2856:	aa e3       	ldi	r26, 0x3A	; 58
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	ea e3       	ldi	r30, 0x3A	; 58
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	80 7f       	andi	r24, 0xF0	; 240
    2862:	8c 93       	st	X, r24
      DDRA_REG |= value;
    2864:	aa e3       	ldi	r26, 0x3A	; 58
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	ea e3       	ldi	r30, 0x3A	; 58
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	90 81       	ld	r25, Z
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	89 2b       	or	r24, r25
    2872:	8c 93       	st	X, r24
    2874:	31 c0       	rjmp	.+98     	; 0x28d8 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0xF0; // Set only the high nibble of the port B by the given value
    2876:	a7 e3       	ldi	r26, 0x37	; 55
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	e7 e3       	ldi	r30, 0x37	; 55
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	80 7f       	andi	r24, 0xF0	; 240
    2882:	8c 93       	st	X, r24
      DDRB_REG |= value;
    2884:	a7 e3       	ldi	r26, 0x37	; 55
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	e7 e3       	ldi	r30, 0x37	; 55
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	90 81       	ld	r25, Z
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
    2890:	89 2b       	or	r24, r25
    2892:	8c 93       	st	X, r24
    2894:	21 c0       	rjmp	.+66     	; 0x28d8 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0xF0; // Set only the high nibble of the port C by the given value
    2896:	a4 e3       	ldi	r26, 0x34	; 52
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	e4 e3       	ldi	r30, 0x34	; 52
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	80 7f       	andi	r24, 0xF0	; 240
    28a2:	8c 93       	st	X, r24
      DDRC_REG |= value;
    28a4:	a4 e3       	ldi	r26, 0x34	; 52
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e4 e3       	ldi	r30, 0x34	; 52
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	90 81       	ld	r25, Z
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	89 2b       	or	r24, r25
    28b2:	8c 93       	st	X, r24
    28b4:	11 c0       	rjmp	.+34     	; 0x28d8 <DIO_vSetLowNibbleDir+0xe4>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0xF0; // Set only the high nibble of the port D by the given value
    28b6:	a1 e3       	ldi	r26, 0x31	; 49
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	e1 e3       	ldi	r30, 0x31	; 49
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	80 7f       	andi	r24, 0xF0	; 240
    28c2:	8c 93       	st	X, r24
      DDRD_REG|= value;
    28c4:	a1 e3       	ldi	r26, 0x31	; 49
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	e1 e3       	ldi	r30, 0x31	; 49
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	90 81       	ld	r25, Z
    28ce:	8b 81       	ldd	r24, Y+3	; 0x03
    28d0:	89 2b       	or	r24, r25
    28d2:	8c 93       	st	X, r24
    28d4:	01 c0       	rjmp	.+2      	; 0x28d8 <DIO_vSetLowNibbleDir+0xe4>
    }
  }

  else
  {
    LOC_enumState = DIO_NOK;
    28d6:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	08 95       	ret

000028ea <DIO_vSetHighNibbleDir>:

/*___________________________________________________________________________________________________________________*/

DIO_errorStatus DIO_vSetHighNibbleDir(u8 Copy_u8PORT, u8 value)
{
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <DIO_vSetHighNibbleDir+0x6>
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <DIO_vSetHighNibbleDir+0x8>
    28f2:	0f 92       	push	r0
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	8a 83       	std	Y+2, r24	; 0x02
    28fa:	6b 83       	std	Y+3, r22	; 0x03
  DIO_errorStatus LOC_enumState = DIO_OK;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	89 83       	std	Y+1, r24	; 0x01

  if ((Copy_u8PORT <= DIO_PORTD))
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	84 30       	cpi	r24, 0x04	; 4
    2904:	08 f0       	brcs	.+2      	; 0x2908 <DIO_vSetHighNibbleDir+0x1e>
    2906:	63 c0       	rjmp	.+198    	; 0x29ce <DIO_vSetHighNibbleDir+0xe4>
  {
    value <<= 4;
    2908:	8b 81       	ldd	r24, Y+3	; 0x03
    290a:	82 95       	swap	r24
    290c:	80 7f       	andi	r24, 0xF0	; 240
    290e:	8b 83       	std	Y+3, r24	; 0x03
    switch (Copy_u8PORT)
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	3d 83       	std	Y+5, r19	; 0x05
    2918:	2c 83       	std	Y+4, r18	; 0x04
    291a:	8c 81       	ldd	r24, Y+4	; 0x04
    291c:	9d 81       	ldd	r25, Y+5	; 0x05
    291e:	81 30       	cpi	r24, 0x01	; 1
    2920:	91 05       	cpc	r25, r1
    2922:	29 f1       	breq	.+74     	; 0x296e <DIO_vSetHighNibbleDir+0x84>
    2924:	2c 81       	ldd	r18, Y+4	; 0x04
    2926:	3d 81       	ldd	r19, Y+5	; 0x05
    2928:	22 30       	cpi	r18, 0x02	; 2
    292a:	31 05       	cpc	r19, r1
    292c:	2c f4       	brge	.+10     	; 0x2938 <DIO_vSetHighNibbleDir+0x4e>
    292e:	8c 81       	ldd	r24, Y+4	; 0x04
    2930:	9d 81       	ldd	r25, Y+5	; 0x05
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	61 f0       	breq	.+24     	; 0x294e <DIO_vSetHighNibbleDir+0x64>
    2936:	4c c0       	rjmp	.+152    	; 0x29d0 <DIO_vSetHighNibbleDir+0xe6>
    2938:	2c 81       	ldd	r18, Y+4	; 0x04
    293a:	3d 81       	ldd	r19, Y+5	; 0x05
    293c:	22 30       	cpi	r18, 0x02	; 2
    293e:	31 05       	cpc	r19, r1
    2940:	31 f1       	breq	.+76     	; 0x298e <DIO_vSetHighNibbleDir+0xa4>
    2942:	8c 81       	ldd	r24, Y+4	; 0x04
    2944:	9d 81       	ldd	r25, Y+5	; 0x05
    2946:	83 30       	cpi	r24, 0x03	; 3
    2948:	91 05       	cpc	r25, r1
    294a:	89 f1       	breq	.+98     	; 0x29ae <DIO_vSetHighNibbleDir+0xc4>
    294c:	41 c0       	rjmp	.+130    	; 0x29d0 <DIO_vSetHighNibbleDir+0xe6>
    {
    case DIO_PORTA:
      DDRA_REG &= 0x0F;
    294e:	aa e3       	ldi	r26, 0x3A	; 58
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	ea e3       	ldi	r30, 0x3A	; 58
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	8f 70       	andi	r24, 0x0F	; 15
    295a:	8c 93       	st	X, r24
      DDRA_REG |= value;
    295c:	aa e3       	ldi	r26, 0x3A	; 58
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	ea e3       	ldi	r30, 0x3A	; 58
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	90 81       	ld	r25, Z
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	89 2b       	or	r24, r25
    296a:	8c 93       	st	X, r24
    296c:	31 c0       	rjmp	.+98     	; 0x29d0 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTB:
      DDRB_REG &= 0x0F;
    296e:	a7 e3       	ldi	r26, 0x37	; 55
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	e7 e3       	ldi	r30, 0x37	; 55
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	8f 70       	andi	r24, 0x0F	; 15
    297a:	8c 93       	st	X, r24
      DDRB_REG |= value;
    297c:	a7 e3       	ldi	r26, 0x37	; 55
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	e7 e3       	ldi	r30, 0x37	; 55
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	90 81       	ld	r25, Z
    2986:	8b 81       	ldd	r24, Y+3	; 0x03
    2988:	89 2b       	or	r24, r25
    298a:	8c 93       	st	X, r24
    298c:	21 c0       	rjmp	.+66     	; 0x29d0 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTC:
      DDRC_REG &= 0x0F;
    298e:	a4 e3       	ldi	r26, 0x34	; 52
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	e4 e3       	ldi	r30, 0x34	; 52
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	8f 70       	andi	r24, 0x0F	; 15
    299a:	8c 93       	st	X, r24
      DDRC_REG |= value;
    299c:	a4 e3       	ldi	r26, 0x34	; 52
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e4 e3       	ldi	r30, 0x34	; 52
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	90 81       	ld	r25, Z
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	89 2b       	or	r24, r25
    29aa:	8c 93       	st	X, r24
    29ac:	11 c0       	rjmp	.+34     	; 0x29d0 <DIO_vSetHighNibbleDir+0xe6>
      break;
    case DIO_PORTD:
      DDRD_REG &= 0x0F;
    29ae:	a1 e3       	ldi	r26, 0x31	; 49
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	e1 e3       	ldi	r30, 0x31	; 49
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	8f 70       	andi	r24, 0x0F	; 15
    29ba:	8c 93       	st	X, r24
      DDRD_REG |= value;
    29bc:	a1 e3       	ldi	r26, 0x31	; 49
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	e1 e3       	ldi	r30, 0x31	; 49
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	90 81       	ld	r25, Z
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	89 2b       	or	r24, r25
    29ca:	8c 93       	st	X, r24
    29cc:	01 c0       	rjmp	.+2      	; 0x29d0 <DIO_vSetHighNibbleDir+0xe6>
      break;
    }
  }
  else
  {
    LOC_enumState = DIO_NOK;
    29ce:	19 82       	std	Y+1, r1	; 0x01
  }

  return LOC_enumState;
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <KPD_vInit>:
 * Breif : This Function initialize the pin which connected to KPD as input pins
 * Parameters : Nothing
 * return : Nothing
 */
void KPD_vInit(void)
{
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62

  /*                    connect pull up for the pins of the rows                             */

  DIO_enumConnectPullUp(KPD_PORT, KPD_R0, DIO_PIN_HIGH);
    29ea:	82 e0       	ldi	r24, 0x02	; 2
    29ec:	60 e0       	ldi	r22, 0x00	; 0
    29ee:	41 e0       	ldi	r20, 0x01	; 1
    29f0:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R1, DIO_PIN_HIGH);
    29f4:	82 e0       	ldi	r24, 0x02	; 2
    29f6:	61 e0       	ldi	r22, 0x01	; 1
    29f8:	41 e0       	ldi	r20, 0x01	; 1
    29fa:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R2, DIO_PIN_HIGH);
    29fe:	82 e0       	ldi	r24, 0x02	; 2
    2a00:	62 e0       	ldi	r22, 0x02	; 2
    2a02:	41 e0       	ldi	r20, 0x01	; 1
    2a04:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <DIO_enumConnectPullUp>
  DIO_enumConnectPullUp(KPD_PORT, KPD_R3, DIO_PIN_HIGH);
    2a08:	82 e0       	ldi	r24, 0x02	; 2
    2a0a:	63 e0       	ldi	r22, 0x03	; 3
    2a0c:	41 e0       	ldi	r20, 0x01	; 1
    2a0e:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <DIO_enumConnectPullUp>
  DIO_enumWritePinValue      ( KPD_PORT , KPD_R3 , DIO_HIGH );
  */

  /*                 connect the pins of the columns as output pins (HIGH)                    */
  
  DIO_vSetHighNibbleDir(KPD_PORT, 0x0F);
    2a12:	82 e0       	ldi	r24, 0x02	; 2
    2a14:	6f e0       	ldi	r22, 0x0F	; 15
    2a16:	0e 94 75 14 	call	0x28ea	; 0x28ea <DIO_vSetHighNibbleDir>
  DIO_vWriteHighNibble (KPD_PORT, 0x0F);
    2a1a:	82 e0       	ldi	r24, 0x02	; 2
    2a1c:	6f e0       	ldi	r22, 0x0F	; 15
    2a1e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <DIO_vWriteHighNibble>
    DIO_enumWritePinValue(KPD_PORT, KPD_C0, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C1, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C2, DIO_PIN_HIGH);
    DIO_enumWritePinValue(KPD_PORT, KPD_C3, DIO_PIN_HIGH);
    */
}
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <KPD_u8GetPressed>:
 * Breif : This Function used to get the pressed button of the kpd
 * Parameters : Nothing
 * return : the pressed button
 */
u8 KPD_u8GetPressed(void)
{
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	62 97       	sbiw	r28, 0x12	; 18
    2a32:	0f b6       	in	r0, 0x3f	; 63
    2a34:	f8 94       	cli
    2a36:	de bf       	out	0x3e, r29	; 62
    2a38:	0f be       	out	0x3f, r0	; 63
    2a3a:	cd bf       	out	0x3d, r28	; 61
  u8 LOC_u8ReturnData = NOTPRESSED;
    2a3c:	8f ef       	ldi	r24, 0xFF	; 255
    2a3e:	89 8b       	std	Y+17, r24	; 0x11
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    2a40:	84 e0       	ldi	r24, 0x04	; 4
    2a42:	8f 87       	std	Y+15, r24	; 0x0f
    2a44:	c9 c0       	rjmp	.+402    	; 0x2bd8 <KPD_u8GetPressed+0x1b0>
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns
    2a46:	82 e0       	ldi	r24, 0x02	; 2
    2a48:	6f 85       	ldd	r22, Y+15	; 0x0f
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <DIO_enumWritePinVal>

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    2a50:	18 8a       	std	Y+16, r1	; 0x10
    2a52:	b6 c0       	rjmp	.+364    	; 0x2bc0 <KPD_u8GetPressed+0x198>
    {
      DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // retun the row value
    2a54:	9e 01       	movw	r18, r28
    2a56:	2e 5e       	subi	r18, 0xEE	; 238
    2a58:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5a:	82 e0       	ldi	r24, 0x02	; 2
    2a5c:	68 89       	ldd	r22, Y+16	; 0x10
    2a5e:	a9 01       	movw	r20, r18
    2a60:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <DIO_enumReadPinVal>
      /*
      if the row is high ....there is no pressed buttons
      if the row is low ....there is pressed button ===>> I will check on this
      */
      if (LOC_u8GetPressed == 0)
    2a64:	8a 89       	ldd	r24, Y+18	; 0x12
    2a66:	88 23       	and	r24, r24
    2a68:	09 f0       	breq	.+2      	; 0x2a6c <KPD_u8GetPressed+0x44>
    2a6a:	a7 c0       	rjmp	.+334    	; 0x2bba <KPD_u8GetPressed+0x192>
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	a8 e4       	ldi	r26, 0x48	; 72
    2a72:	b2 e4       	ldi	r27, 0x42	; 66
    2a74:	8b 87       	std	Y+11, r24	; 0x0b
    2a76:	9c 87       	std	Y+12, r25	; 0x0c
    2a78:	ad 87       	std	Y+13, r26	; 0x0d
    2a7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	4a ef       	ldi	r20, 0xFA	; 250
    2a8a:	54 e4       	ldi	r21, 0x44	; 68
    2a8c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	8f 83       	std	Y+7, r24	; 0x07
    2a96:	98 87       	std	Y+8, r25	; 0x08
    2a98:	a9 87       	std	Y+9, r26	; 0x09
    2a9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a9e:	78 85       	ldd	r23, Y+8	; 0x08
    2aa0:	89 85       	ldd	r24, Y+9	; 0x09
    2aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 e8       	ldi	r20, 0x80	; 128
    2aaa:	5f e3       	ldi	r21, 0x3F	; 63
    2aac:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2ab0:	88 23       	and	r24, r24
    2ab2:	2c f4       	brge	.+10     	; 0x2abe <KPD_u8GetPressed+0x96>
		__ticks = 1;
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	9e 83       	std	Y+6, r25	; 0x06
    2aba:	8d 83       	std	Y+5, r24	; 0x05
    2abc:	3f c0       	rjmp	.+126    	; 0x2b3c <KPD_u8GetPressed+0x114>
	else if (__tmp > 65535)
    2abe:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac0:	78 85       	ldd	r23, Y+8	; 0x08
    2ac2:	89 85       	ldd	r24, Y+9	; 0x09
    2ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	3f ef       	ldi	r19, 0xFF	; 255
    2aca:	4f e7       	ldi	r20, 0x7F	; 127
    2acc:	57 e4       	ldi	r21, 0x47	; 71
    2ace:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2ad2:	18 16       	cp	r1, r24
    2ad4:	4c f5       	brge	.+82     	; 0x2b28 <KPD_u8GetPressed+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    2adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e2       	ldi	r20, 0x20	; 32
    2ae4:	51 e4       	ldi	r21, 0x41	; 65
    2ae6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	bc 01       	movw	r22, r24
    2af0:	cd 01       	movw	r24, r26
    2af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	9e 83       	std	Y+6, r25	; 0x06
    2afc:	8d 83       	std	Y+5, r24	; 0x05
    2afe:	0f c0       	rjmp	.+30     	; 0x2b1e <KPD_u8GetPressed+0xf6>
    2b00:	88 ec       	ldi	r24, 0xC8	; 200
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	9c 83       	std	Y+4, r25	; 0x04
    2b06:	8b 83       	std	Y+3, r24	; 0x03
    2b08:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <KPD_u8GetPressed+0xe4>
    2b10:	9c 83       	std	Y+4, r25	; 0x04
    2b12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b14:	8d 81       	ldd	r24, Y+5	; 0x05
    2b16:	9e 81       	ldd	r25, Y+6	; 0x06
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	9e 83       	std	Y+6, r25	; 0x06
    2b1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b20:	9e 81       	ldd	r25, Y+6	; 0x06
    2b22:	00 97       	sbiw	r24, 0x00	; 0
    2b24:	69 f7       	brne	.-38     	; 0x2b00 <KPD_u8GetPressed+0xd8>
    2b26:	14 c0       	rjmp	.+40     	; 0x2b50 <KPD_u8GetPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b28:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2a:	78 85       	ldd	r23, Y+8	; 0x08
    2b2c:	89 85       	ldd	r24, Y+9	; 0x09
    2b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	9e 83       	std	Y+6, r25	; 0x06
    2b3a:	8d 83       	std	Y+5, r24	; 0x05
    2b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b40:	9a 83       	std	Y+2, r25	; 0x02
    2b42:	89 83       	std	Y+1, r24	; 0x01
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	9a 81       	ldd	r25, Y+2	; 0x02
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <KPD_u8GetPressed+0x120>
    2b4c:	9a 83       	std	Y+2, r25	; 0x02
    2b4e:	89 83       	std	Y+1, r24	; 0x01
      {
        _delay_ms(50);         // delay for bouncing

        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed); // to make sure that the button is pressed & check again
    2b50:	9e 01       	movw	r18, r28
    2b52:	2e 5e       	subi	r18, 0xEE	; 238
    2b54:	3f 4f       	sbci	r19, 0xFF	; 255
    2b56:	82 e0       	ldi	r24, 0x02	; 2
    2b58:	68 89       	ldd	r22, Y+16	; 0x10
    2b5a:	a9 01       	movw	r20, r18
    2b5c:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <DIO_enumReadPinVal>

        if (LOC_u8GetPressed == 0)
    2b60:	8a 89       	ldd	r24, Y+18	; 0x12
    2b62:	88 23       	and	r24, r24
    2b64:	a9 f4       	brne	.+42     	; 0x2b90 <KPD_u8GetPressed+0x168>
                    the button will khnow by the row and the column (ASCII Code)
                    ==> Hint1 : I already defined The ASCII Codes in 2D array at --> "KPD_config.h"
                    ==> Hint2 : if there is no pressed buttons , it will retured NOTPRESSED (0xff) and there is not any button has this ASCII (0xff)
          */

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
    2b66:	88 89       	ldd	r24, Y+16	; 0x10
    2b68:	48 2f       	mov	r20, r24
    2b6a:	50 e0       	ldi	r21, 0x00	; 0
    2b6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b6e:	88 2f       	mov	r24, r24
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	9c 01       	movw	r18, r24
    2b74:	24 50       	subi	r18, 0x04	; 4
    2b76:	30 40       	sbci	r19, 0x00	; 0
    2b78:	ca 01       	movw	r24, r20
    2b7a:	88 0f       	add	r24, r24
    2b7c:	99 1f       	adc	r25, r25
    2b7e:	88 0f       	add	r24, r24
    2b80:	99 1f       	adc	r25, r25
    2b82:	82 0f       	add	r24, r18
    2b84:	93 1f       	adc	r25, r19
    2b86:	fc 01       	movw	r30, r24
    2b88:	e3 5c       	subi	r30, 0xC3	; 195
    2b8a:	fa 4f       	sbci	r31, 0xFA	; 250
    2b8c:	80 81       	ld	r24, Z
    2b8e:	89 8b       	std	Y+17, r24	; 0x11
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    2b90:	9e 01       	movw	r18, r28
    2b92:	2e 5e       	subi	r18, 0xEE	; 238
    2b94:	3f 4f       	sbci	r19, 0xFF	; 255
    2b96:	82 e0       	ldi	r24, 0x02	; 2
    2b98:	68 89       	ldd	r22, Y+16	; 0x10
    2b9a:	a9 01       	movw	r20, r18
    2b9c:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <DIO_enumReadPinVal>
    2ba0:	08 c0       	rjmp	.+16     	; 0x2bb2 <KPD_u8GetPressed+0x18a>
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
        {
          DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
    2ba2:	9e 01       	movw	r18, r28
    2ba4:	2e 5e       	subi	r18, 0xEE	; 238
    2ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba8:	82 e0       	ldi	r24, 0x02	; 2
    2baa:	68 89       	ldd	r22, Y+16	; 0x10
    2bac:	a9 01       	movw	r20, r18
    2bae:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <DIO_enumReadPinVal>

          LOC_u8ReturnData = KPD_u8Buttons[LOC_u8Row - KPD_ROW_INIT][LOC_u8Col - KPD_COL_INIT];
        }
        // stay here if the button is pressed   # we could put delay 200 ms instead of that
        DIO_enumReadPinVal(KPD_PORT, LOC_u8Row, &LOC_u8GetPressed);
        while (DIO_PIN_LOW == LOC_u8GetPressed) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
    2bb2:	8a 89       	ldd	r24, Y+18	; 0x12
    2bb4:	88 23       	and	r24, r24
    2bb6:	a9 f3       	breq	.-22     	; 0x2ba2 <KPD_u8GetPressed+0x17a>
    2bb8:	07 c0       	rjmp	.+14     	; 0x2bc8 <KPD_u8GetPressed+0x1a0>

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
  {
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_LOW);         // Low on the columns

    for (LOC_u8Row = 0 + KPD_ROW_INIT; LOC_u8Row < KPD_ROW_END + 1; LOC_u8Row++)
    2bba:	88 89       	ldd	r24, Y+16	; 0x10
    2bbc:	8f 5f       	subi	r24, 0xFF	; 255
    2bbe:	88 8b       	std	Y+16, r24	; 0x10
    2bc0:	88 89       	ldd	r24, Y+16	; 0x10
    2bc2:	84 30       	cpi	r24, 0x04	; 4
    2bc4:	08 f4       	brcc	.+2      	; 0x2bc8 <KPD_u8GetPressed+0x1a0>
    2bc6:	46 cf       	rjmp	.-372    	; 0x2a54 <KPD_u8GetPressed+0x2c>
        break;
      }
    }

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
    2bc8:	82 e0       	ldi	r24, 0x02	; 2
    2bca:	6f 85       	ldd	r22, Y+15	; 0x0f
    2bcc:	41 e0       	ldi	r20, 0x01	; 1
    2bce:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <DIO_enumWritePinVal>
  u8 LOC_u8GetPressed;

  /* iterators  */
  u8 LOC_u8Row, LOC_u8Col;

  for (LOC_u8Col = 0 + KPD_COL_INIT; LOC_u8Col < KPD_COL_END + 1; LOC_u8Col++)
    2bd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd4:	8f 5f       	subi	r24, 0xFF	; 255
    2bd6:	8f 87       	std	Y+15, r24	; 0x0f
    2bd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bda:	88 30       	cpi	r24, 0x08	; 8
    2bdc:	08 f4       	brcc	.+2      	; 0x2be0 <KPD_u8GetPressed+0x1b8>
    2bde:	33 cf       	rjmp	.-410    	; 0x2a46 <KPD_u8GetPressed+0x1e>

    // return this column’s pin to high
    DIO_enumWritePinVal(KPD_PORT, LOC_u8Col, DIO_PIN_HIGH);
  }

  return LOC_u8ReturnData;
    2be0:	89 89       	ldd	r24, Y+17	; 0x11
}
    2be2:	62 96       	adiw	r28, 0x12	; 18
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	de bf       	out	0x3e, r29	; 62
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	cd bf       	out	0x3d, r28	; 61
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret

00002bf4 <CLCD_vInit>:
 *                                              *-------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vInit(void)
{
    2bf4:	0f 93       	push	r16
    2bf6:	1f 93       	push	r17
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	c6 54       	subi	r28, 0x46	; 70
    2c02:	d0 40       	sbci	r29, 0x00	; 0
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	fe 01       	movw	r30, r28
    2c10:	ed 5b       	subi	r30, 0xBD	; 189
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	a8 e4       	ldi	r26, 0x48	; 72
    2c1a:	b2 e4       	ldi	r27, 0x42	; 66
    2c1c:	80 83       	st	Z, r24
    2c1e:	91 83       	std	Z+1, r25	; 0x01
    2c20:	a2 83       	std	Z+2, r26	; 0x02
    2c22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c24:	8e 01       	movw	r16, r28
    2c26:	01 5c       	subi	r16, 0xC1	; 193
    2c28:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	ed 5b       	subi	r30, 0xBD	; 189
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	60 81       	ld	r22, Z
    2c32:	71 81       	ldd	r23, Z+1	; 0x01
    2c34:	82 81       	ldd	r24, Z+2	; 0x02
    2c36:	93 81       	ldd	r25, Z+3	; 0x03
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	4a ef       	ldi	r20, 0xFA	; 250
    2c3e:	54 e4       	ldi	r21, 0x44	; 68
    2c40:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	f8 01       	movw	r30, r16
    2c4a:	80 83       	st	Z, r24
    2c4c:	91 83       	std	Z+1, r25	; 0x01
    2c4e:	a2 83       	std	Z+2, r26	; 0x02
    2c50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c52:	fe 01       	movw	r30, r28
    2c54:	ff 96       	adiw	r30, 0x3f	; 63
    2c56:	60 81       	ld	r22, Z
    2c58:	71 81       	ldd	r23, Z+1	; 0x01
    2c5a:	82 81       	ldd	r24, Z+2	; 0x02
    2c5c:	93 81       	ldd	r25, Z+3	; 0x03
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e8       	ldi	r20, 0x80	; 128
    2c64:	5f e3       	ldi	r21, 0x3F	; 63
    2c66:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2c6a:	88 23       	and	r24, r24
    2c6c:	2c f4       	brge	.+10     	; 0x2c78 <CLCD_vInit+0x84>
		__ticks = 1;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9e af       	std	Y+62, r25	; 0x3e
    2c74:	8d af       	std	Y+61, r24	; 0x3d
    2c76:	46 c0       	rjmp	.+140    	; 0x2d04 <CLCD_vInit+0x110>
	else if (__tmp > 65535)
    2c78:	fe 01       	movw	r30, r28
    2c7a:	ff 96       	adiw	r30, 0x3f	; 63
    2c7c:	60 81       	ld	r22, Z
    2c7e:	71 81       	ldd	r23, Z+1	; 0x01
    2c80:	82 81       	ldd	r24, Z+2	; 0x02
    2c82:	93 81       	ldd	r25, Z+3	; 0x03
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	3f ef       	ldi	r19, 0xFF	; 255
    2c88:	4f e7       	ldi	r20, 0x7F	; 127
    2c8a:	57 e4       	ldi	r21, 0x47	; 71
    2c8c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2c90:	18 16       	cp	r1, r24
    2c92:	64 f5       	brge	.+88     	; 0x2cec <CLCD_vInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c94:	fe 01       	movw	r30, r28
    2c96:	ed 5b       	subi	r30, 0xBD	; 189
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	60 81       	ld	r22, Z
    2c9c:	71 81       	ldd	r23, Z+1	; 0x01
    2c9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ca0:	93 81       	ldd	r25, Z+3	; 0x03
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	40 e2       	ldi	r20, 0x20	; 32
    2ca8:	51 e4       	ldi	r21, 0x41	; 65
    2caa:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	bc 01       	movw	r22, r24
    2cb4:	cd 01       	movw	r24, r26
    2cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	9e af       	std	Y+62, r25	; 0x3e
    2cc0:	8d af       	std	Y+61, r24	; 0x3d
    2cc2:	0f c0       	rjmp	.+30     	; 0x2ce2 <CLCD_vInit+0xee>
    2cc4:	88 ec       	ldi	r24, 0xC8	; 200
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	9c af       	std	Y+60, r25	; 0x3c
    2cca:	8b af       	std	Y+59, r24	; 0x3b
    2ccc:	8b ad       	ldd	r24, Y+59	; 0x3b
    2cce:	9c ad       	ldd	r25, Y+60	; 0x3c
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	f1 f7       	brne	.-4      	; 0x2cd0 <CLCD_vInit+0xdc>
    2cd4:	9c af       	std	Y+60, r25	; 0x3c
    2cd6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2cda:	9e ad       	ldd	r25, Y+62	; 0x3e
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	9e af       	std	Y+62, r25	; 0x3e
    2ce0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ce4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	69 f7       	brne	.-38     	; 0x2cc4 <CLCD_vInit+0xd0>
    2cea:	16 c0       	rjmp	.+44     	; 0x2d18 <CLCD_vInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cec:	fe 01       	movw	r30, r28
    2cee:	ff 96       	adiw	r30, 0x3f	; 63
    2cf0:	60 81       	ld	r22, Z
    2cf2:	71 81       	ldd	r23, Z+1	; 0x01
    2cf4:	82 81       	ldd	r24, Z+2	; 0x02
    2cf6:	93 81       	ldd	r25, Z+3	; 0x03
    2cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	9e af       	std	Y+62, r25	; 0x3e
    2d02:	8d af       	std	Y+61, r24	; 0x3d
    2d04:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d06:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d08:	9a af       	std	Y+58, r25	; 0x3a
    2d0a:	89 af       	std	Y+57, r24	; 0x39
    2d0c:	89 ad       	ldd	r24, Y+57	; 0x39
    2d0e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	f1 f7       	brne	.-4      	; 0x2d10 <CLCD_vInit+0x11c>
    2d14:	9a af       	std	Y+58, r25	; 0x3a
    2d16:	89 af       	std	Y+57, r24	; 0x39
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN6, DIO_PIN_OUTPUT);
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN7, DIO_PIN_OUTPUT);

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN0, DIO_PIN_OUTPUT);
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	60 e0       	ldi	r22, 0x00	; 0
    2d1c:	41 e0       	ldi	r20, 0x01	; 1
    2d1e:	0e 94 ed 0c 	call	0x19da	; 0x19da <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN1, DIO_PIN_OUTPUT);
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	61 e0       	ldi	r22, 0x01	; 1
    2d26:	41 e0       	ldi	r20, 0x01	; 1
    2d28:	0e 94 ed 0c 	call	0x19da	; 0x19da <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN2, DIO_PIN_OUTPUT);
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	62 e0       	ldi	r22, 0x02	; 2
    2d30:	41 e0       	ldi	r20, 0x01	; 1
    2d32:	0e 94 ed 0c 	call	0x19da	; 0x19da <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_DATA_PORT, DIO_PIN3, DIO_PIN_OUTPUT);
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	63 e0       	ldi	r22, 0x03	; 3
    2d3a:	41 e0       	ldi	r20, 0x01	; 1
    2d3c:	0e 94 ed 0c 	call	0x19da	; 0x19da <DIO_enumSetPinDir>

#error "Wrong CLCD_DATA_NIBBLE Config"

#endif

  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	66 e0       	ldi	r22, 0x06	; 6
    2d44:	41 e0       	ldi	r20, 0x01	; 1
    2d46:	0e 94 ed 0c 	call	0x19da	; 0x19da <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	65 e0       	ldi	r22, 0x05	; 5
    2d4e:	41 e0       	ldi	r20, 0x01	; 1
    2d50:	0e 94 ed 0c 	call	0x19da	; 0x19da <DIO_enumSetPinDir>
  DIO_enumSetPinDir(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	64 e0       	ldi	r22, 0x04	; 4
    2d58:	41 e0       	ldi	r20, 0x01	; 1
    2d5a:	0e 94 ed 0c 	call	0x19da	; 0x19da <DIO_enumSetPinDir>

  CLCD_vSendCommand(CLCD_HOME);
    2d5e:	82 e0       	ldi	r24, 0x02	; 2
    2d60:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	a0 e2       	ldi	r26, 0x20	; 32
    2d6a:	b1 e4       	ldi	r27, 0x41	; 65
    2d6c:	8d ab       	std	Y+53, r24	; 0x35
    2d6e:	9e ab       	std	Y+54, r25	; 0x36
    2d70:	af ab       	std	Y+55, r26	; 0x37
    2d72:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d74:	6d a9       	ldd	r22, Y+53	; 0x35
    2d76:	7e a9       	ldd	r23, Y+54	; 0x36
    2d78:	8f a9       	ldd	r24, Y+55	; 0x37
    2d7a:	98 ad       	ldd	r25, Y+56	; 0x38
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	4a ef       	ldi	r20, 0xFA	; 250
    2d82:	54 e4       	ldi	r21, 0x44	; 68
    2d84:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	89 ab       	std	Y+49, r24	; 0x31
    2d8e:	9a ab       	std	Y+50, r25	; 0x32
    2d90:	ab ab       	std	Y+51, r26	; 0x33
    2d92:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d94:	69 a9       	ldd	r22, Y+49	; 0x31
    2d96:	7a a9       	ldd	r23, Y+50	; 0x32
    2d98:	8b a9       	ldd	r24, Y+51	; 0x33
    2d9a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	40 e8       	ldi	r20, 0x80	; 128
    2da2:	5f e3       	ldi	r21, 0x3F	; 63
    2da4:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2da8:	88 23       	and	r24, r24
    2daa:	2c f4       	brge	.+10     	; 0x2db6 <CLCD_vInit+0x1c2>
		__ticks = 1;
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	98 ab       	std	Y+48, r25	; 0x30
    2db2:	8f a7       	std	Y+47, r24	; 0x2f
    2db4:	3f c0       	rjmp	.+126    	; 0x2e34 <CLCD_vInit+0x240>
	else if (__tmp > 65535)
    2db6:	69 a9       	ldd	r22, Y+49	; 0x31
    2db8:	7a a9       	ldd	r23, Y+50	; 0x32
    2dba:	8b a9       	ldd	r24, Y+51	; 0x33
    2dbc:	9c a9       	ldd	r25, Y+52	; 0x34
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	3f ef       	ldi	r19, 0xFF	; 255
    2dc2:	4f e7       	ldi	r20, 0x7F	; 127
    2dc4:	57 e4       	ldi	r21, 0x47	; 71
    2dc6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2dca:	18 16       	cp	r1, r24
    2dcc:	4c f5       	brge	.+82     	; 0x2e20 <CLCD_vInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dce:	6d a9       	ldd	r22, Y+53	; 0x35
    2dd0:	7e a9       	ldd	r23, Y+54	; 0x36
    2dd2:	8f a9       	ldd	r24, Y+55	; 0x37
    2dd4:	98 ad       	ldd	r25, Y+56	; 0x38
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e2       	ldi	r20, 0x20	; 32
    2ddc:	51 e4       	ldi	r21, 0x41	; 65
    2dde:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	bc 01       	movw	r22, r24
    2de8:	cd 01       	movw	r24, r26
    2dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	98 ab       	std	Y+48, r25	; 0x30
    2df4:	8f a7       	std	Y+47, r24	; 0x2f
    2df6:	0f c0       	rjmp	.+30     	; 0x2e16 <CLCD_vInit+0x222>
    2df8:	88 ec       	ldi	r24, 0xC8	; 200
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	9e a7       	std	Y+46, r25	; 0x2e
    2dfe:	8d a7       	std	Y+45, r24	; 0x2d
    2e00:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e02:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <CLCD_vInit+0x210>
    2e08:	9e a7       	std	Y+46, r25	; 0x2e
    2e0a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e0e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e10:	01 97       	sbiw	r24, 0x01	; 1
    2e12:	98 ab       	std	Y+48, r25	; 0x30
    2e14:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e16:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e18:	98 a9       	ldd	r25, Y+48	; 0x30
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	69 f7       	brne	.-38     	; 0x2df8 <CLCD_vInit+0x204>
    2e1e:	14 c0       	rjmp	.+40     	; 0x2e48 <CLCD_vInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e20:	69 a9       	ldd	r22, Y+49	; 0x31
    2e22:	7a a9       	ldd	r23, Y+50	; 0x32
    2e24:	8b a9       	ldd	r24, Y+51	; 0x33
    2e26:	9c a9       	ldd	r25, Y+52	; 0x34
    2e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	98 ab       	std	Y+48, r25	; 0x30
    2e32:	8f a7       	std	Y+47, r24	; 0x2f
    2e34:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e36:	98 a9       	ldd	r25, Y+48	; 0x30
    2e38:	9c a7       	std	Y+44, r25	; 0x2c
    2e3a:	8b a7       	std	Y+43, r24	; 0x2b
    2e3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e40:	01 97       	sbiw	r24, 0x01	; 1
    2e42:	f1 f7       	brne	.-4      	; 0x2e40 <CLCD_vInit+0x24c>
    2e44:	9c a7       	std	Y+44, r25	; 0x2c
    2e46:	8b a7       	std	Y+43, r24	; 0x2b
  _delay_ms(10);

  CLCD_vSendCommand(FOUR_BITS);
    2e48:	88 e2       	ldi	r24, 0x28	; 40
    2e4a:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	a0 e8       	ldi	r26, 0x80	; 128
    2e54:	bf e3       	ldi	r27, 0x3F	; 63
    2e56:	8f a3       	std	Y+39, r24	; 0x27
    2e58:	98 a7       	std	Y+40, r25	; 0x28
    2e5a:	a9 a7       	std	Y+41, r26	; 0x29
    2e5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5e:	6f a1       	ldd	r22, Y+39	; 0x27
    2e60:	78 a5       	ldd	r23, Y+40	; 0x28
    2e62:	89 a5       	ldd	r24, Y+41	; 0x29
    2e64:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	4a ef       	ldi	r20, 0xFA	; 250
    2e6c:	54 e4       	ldi	r21, 0x44	; 68
    2e6e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	8b a3       	std	Y+35, r24	; 0x23
    2e78:	9c a3       	std	Y+36, r25	; 0x24
    2e7a:	ad a3       	std	Y+37, r26	; 0x25
    2e7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e80:	7c a1       	ldd	r23, Y+36	; 0x24
    2e82:	8d a1       	ldd	r24, Y+37	; 0x25
    2e84:	9e a1       	ldd	r25, Y+38	; 0x26
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	40 e8       	ldi	r20, 0x80	; 128
    2e8c:	5f e3       	ldi	r21, 0x3F	; 63
    2e8e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2e92:	88 23       	and	r24, r24
    2e94:	2c f4       	brge	.+10     	; 0x2ea0 <CLCD_vInit+0x2ac>
		__ticks = 1;
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	9a a3       	std	Y+34, r25	; 0x22
    2e9c:	89 a3       	std	Y+33, r24	; 0x21
    2e9e:	3f c0       	rjmp	.+126    	; 0x2f1e <CLCD_vInit+0x32a>
	else if (__tmp > 65535)
    2ea0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ea2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ea4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	3f ef       	ldi	r19, 0xFF	; 255
    2eac:	4f e7       	ldi	r20, 0x7F	; 127
    2eae:	57 e4       	ldi	r21, 0x47	; 71
    2eb0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2eb4:	18 16       	cp	r1, r24
    2eb6:	4c f5       	brge	.+82     	; 0x2f0a <CLCD_vInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb8:	6f a1       	ldd	r22, Y+39	; 0x27
    2eba:	78 a5       	ldd	r23, Y+40	; 0x28
    2ebc:	89 a5       	ldd	r24, Y+41	; 0x29
    2ebe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e2       	ldi	r20, 0x20	; 32
    2ec6:	51 e4       	ldi	r21, 0x41	; 65
    2ec8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	bc 01       	movw	r22, r24
    2ed2:	cd 01       	movw	r24, r26
    2ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	9a a3       	std	Y+34, r25	; 0x22
    2ede:	89 a3       	std	Y+33, r24	; 0x21
    2ee0:	0f c0       	rjmp	.+30     	; 0x2f00 <CLCD_vInit+0x30c>
    2ee2:	88 ec       	ldi	r24, 0xC8	; 200
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	98 a3       	std	Y+32, r25	; 0x20
    2ee8:	8f 8f       	std	Y+31, r24	; 0x1f
    2eea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2eec:	98 a1       	ldd	r25, Y+32	; 0x20
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	f1 f7       	brne	.-4      	; 0x2eee <CLCD_vInit+0x2fa>
    2ef2:	98 a3       	std	Y+32, r25	; 0x20
    2ef4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ef8:	9a a1       	ldd	r25, Y+34	; 0x22
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	9a a3       	std	Y+34, r25	; 0x22
    2efe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f00:	89 a1       	ldd	r24, Y+33	; 0x21
    2f02:	9a a1       	ldd	r25, Y+34	; 0x22
    2f04:	00 97       	sbiw	r24, 0x00	; 0
    2f06:	69 f7       	brne	.-38     	; 0x2ee2 <CLCD_vInit+0x2ee>
    2f08:	14 c0       	rjmp	.+40     	; 0x2f32 <CLCD_vInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f10:	9e a1       	ldd	r25, Y+38	; 0x26
    2f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	9a a3       	std	Y+34, r25	; 0x22
    2f1c:	89 a3       	std	Y+33, r24	; 0x21
    2f1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f20:	9a a1       	ldd	r25, Y+34	; 0x22
    2f22:	9e 8f       	std	Y+30, r25	; 0x1e
    2f24:	8d 8f       	std	Y+29, r24	; 0x1d
    2f26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <CLCD_vInit+0x336>
    2f2e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f30:	8d 8f       	std	Y+29, r24	; 0x1d
  _delay_ms(1);

  CLCD_vSendCommand(CLCD_DISPLAY_CURSOR);
    2f32:	8c e0       	ldi	r24, 0x0C	; 12
    2f34:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	a0 e8       	ldi	r26, 0x80	; 128
    2f3e:	bf e3       	ldi	r27, 0x3F	; 63
    2f40:	89 8f       	std	Y+25, r24	; 0x19
    2f42:	9a 8f       	std	Y+26, r25	; 0x1a
    2f44:	ab 8f       	std	Y+27, r26	; 0x1b
    2f46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f48:	69 8d       	ldd	r22, Y+25	; 0x19
    2f4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	4a ef       	ldi	r20, 0xFA	; 250
    2f56:	54 e4       	ldi	r21, 0x44	; 68
    2f58:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	8d 8b       	std	Y+21, r24	; 0x15
    2f62:	9e 8b       	std	Y+22, r25	; 0x16
    2f64:	af 8b       	std	Y+23, r26	; 0x17
    2f66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f68:	6d 89       	ldd	r22, Y+21	; 0x15
    2f6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e8       	ldi	r20, 0x80	; 128
    2f76:	5f e3       	ldi	r21, 0x3F	; 63
    2f78:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    2f7c:	88 23       	and	r24, r24
    2f7e:	2c f4       	brge	.+10     	; 0x2f8a <CLCD_vInit+0x396>
		__ticks = 1;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	9c 8b       	std	Y+20, r25	; 0x14
    2f86:	8b 8b       	std	Y+19, r24	; 0x13
    2f88:	3f c0       	rjmp	.+126    	; 0x3008 <CLCD_vInit+0x414>
	else if (__tmp > 65535)
    2f8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f90:	98 8d       	ldd	r25, Y+24	; 0x18
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	3f ef       	ldi	r19, 0xFF	; 255
    2f96:	4f e7       	ldi	r20, 0x7F	; 127
    2f98:	57 e4       	ldi	r21, 0x47	; 71
    2f9a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    2f9e:	18 16       	cp	r1, r24
    2fa0:	4c f5       	brge	.+82     	; 0x2ff4 <CLCD_vInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa2:	69 8d       	ldd	r22, Y+25	; 0x19
    2fa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	40 e2       	ldi	r20, 0x20	; 32
    2fb0:	51 e4       	ldi	r21, 0x41	; 65
    2fb2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	bc 01       	movw	r22, r24
    2fbc:	cd 01       	movw	r24, r26
    2fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	9c 8b       	std	Y+20, r25	; 0x14
    2fc8:	8b 8b       	std	Y+19, r24	; 0x13
    2fca:	0f c0       	rjmp	.+30     	; 0x2fea <CLCD_vInit+0x3f6>
    2fcc:	88 ec       	ldi	r24, 0xC8	; 200
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	9a 8b       	std	Y+18, r25	; 0x12
    2fd2:	89 8b       	std	Y+17, r24	; 0x11
    2fd4:	89 89       	ldd	r24, Y+17	; 0x11
    2fd6:	9a 89       	ldd	r25, Y+18	; 0x12
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <CLCD_vInit+0x3e4>
    2fdc:	9a 8b       	std	Y+18, r25	; 0x12
    2fde:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	9c 8b       	std	Y+20, r25	; 0x14
    2fe8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fea:	8b 89       	ldd	r24, Y+19	; 0x13
    2fec:	9c 89       	ldd	r25, Y+20	; 0x14
    2fee:	00 97       	sbiw	r24, 0x00	; 0
    2ff0:	69 f7       	brne	.-38     	; 0x2fcc <CLCD_vInit+0x3d8>
    2ff2:	14 c0       	rjmp	.+40     	; 0x301c <CLCD_vInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    2ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    2ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	9c 8b       	std	Y+20, r25	; 0x14
    3006:	8b 8b       	std	Y+19, r24	; 0x13
    3008:	8b 89       	ldd	r24, Y+19	; 0x13
    300a:	9c 89       	ldd	r25, Y+20	; 0x14
    300c:	98 8b       	std	Y+16, r25	; 0x10
    300e:	8f 87       	std	Y+15, r24	; 0x0f
    3010:	8f 85       	ldd	r24, Y+15	; 0x0f
    3012:	98 89       	ldd	r25, Y+16	; 0x10
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	f1 f7       	brne	.-4      	; 0x3014 <CLCD_vInit+0x420>
    3018:	98 8b       	std	Y+16, r25	; 0x10
    301a:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);

  CLCD_vClearScreen();
    301c:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>

  CLCD_vSendCommand(CLCD_ENTRY_MODE);
    3020:	86 e0       	ldi	r24, 0x06	; 6
    3022:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	a0 e8       	ldi	r26, 0x80	; 128
    302c:	bf e3       	ldi	r27, 0x3F	; 63
    302e:	8b 87       	std	Y+11, r24	; 0x0b
    3030:	9c 87       	std	Y+12, r25	; 0x0c
    3032:	ad 87       	std	Y+13, r26	; 0x0d
    3034:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3036:	6b 85       	ldd	r22, Y+11	; 0x0b
    3038:	7c 85       	ldd	r23, Y+12	; 0x0c
    303a:	8d 85       	ldd	r24, Y+13	; 0x0d
    303c:	9e 85       	ldd	r25, Y+14	; 0x0e
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	4a ef       	ldi	r20, 0xFA	; 250
    3044:	54 e4       	ldi	r21, 0x44	; 68
    3046:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	8f 83       	std	Y+7, r24	; 0x07
    3050:	98 87       	std	Y+8, r25	; 0x08
    3052:	a9 87       	std	Y+9, r26	; 0x09
    3054:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3056:	6f 81       	ldd	r22, Y+7	; 0x07
    3058:	78 85       	ldd	r23, Y+8	; 0x08
    305a:	89 85       	ldd	r24, Y+9	; 0x09
    305c:	9a 85       	ldd	r25, Y+10	; 0x0a
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e8       	ldi	r20, 0x80	; 128
    3064:	5f e3       	ldi	r21, 0x3F	; 63
    3066:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    306a:	88 23       	and	r24, r24
    306c:	2c f4       	brge	.+10     	; 0x3078 <CLCD_vInit+0x484>
		__ticks = 1;
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	9e 83       	std	Y+6, r25	; 0x06
    3074:	8d 83       	std	Y+5, r24	; 0x05
    3076:	3f c0       	rjmp	.+126    	; 0x30f6 <CLCD_vInit+0x502>
	else if (__tmp > 65535)
    3078:	6f 81       	ldd	r22, Y+7	; 0x07
    307a:	78 85       	ldd	r23, Y+8	; 0x08
    307c:	89 85       	ldd	r24, Y+9	; 0x09
    307e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	3f ef       	ldi	r19, 0xFF	; 255
    3084:	4f e7       	ldi	r20, 0x7F	; 127
    3086:	57 e4       	ldi	r21, 0x47	; 71
    3088:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    308c:	18 16       	cp	r1, r24
    308e:	4c f5       	brge	.+82     	; 0x30e2 <CLCD_vInit+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3090:	6b 85       	ldd	r22, Y+11	; 0x0b
    3092:	7c 85       	ldd	r23, Y+12	; 0x0c
    3094:	8d 85       	ldd	r24, Y+13	; 0x0d
    3096:	9e 85       	ldd	r25, Y+14	; 0x0e
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e2       	ldi	r20, 0x20	; 32
    309e:	51 e4       	ldi	r21, 0x41	; 65
    30a0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	bc 01       	movw	r22, r24
    30aa:	cd 01       	movw	r24, r26
    30ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	9e 83       	std	Y+6, r25	; 0x06
    30b6:	8d 83       	std	Y+5, r24	; 0x05
    30b8:	0f c0       	rjmp	.+30     	; 0x30d8 <CLCD_vInit+0x4e4>
    30ba:	88 ec       	ldi	r24, 0xC8	; 200
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	9c 83       	std	Y+4, r25	; 0x04
    30c0:	8b 83       	std	Y+3, r24	; 0x03
    30c2:	8b 81       	ldd	r24, Y+3	; 0x03
    30c4:	9c 81       	ldd	r25, Y+4	; 0x04
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	f1 f7       	brne	.-4      	; 0x30c6 <CLCD_vInit+0x4d2>
    30ca:	9c 83       	std	Y+4, r25	; 0x04
    30cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ce:	8d 81       	ldd	r24, Y+5	; 0x05
    30d0:	9e 81       	ldd	r25, Y+6	; 0x06
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	9e 83       	std	Y+6, r25	; 0x06
    30d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d8:	8d 81       	ldd	r24, Y+5	; 0x05
    30da:	9e 81       	ldd	r25, Y+6	; 0x06
    30dc:	00 97       	sbiw	r24, 0x00	; 0
    30de:	69 f7       	brne	.-38     	; 0x30ba <CLCD_vInit+0x4c6>
    30e0:	14 c0       	rjmp	.+40     	; 0x310a <CLCD_vInit+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e2:	6f 81       	ldd	r22, Y+7	; 0x07
    30e4:	78 85       	ldd	r23, Y+8	; 0x08
    30e6:	89 85       	ldd	r24, Y+9	; 0x09
    30e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	9e 83       	std	Y+6, r25	; 0x06
    30f4:	8d 83       	std	Y+5, r24	; 0x05
    30f6:	8d 81       	ldd	r24, Y+5	; 0x05
    30f8:	9e 81       	ldd	r25, Y+6	; 0x06
    30fa:	9a 83       	std	Y+2, r25	; 0x02
    30fc:	89 83       	std	Y+1, r24	; 0x01
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	9a 81       	ldd	r25, Y+2	; 0x02
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	f1 f7       	brne	.-4      	; 0x3102 <CLCD_vInit+0x50e>
    3106:	9a 83       	std	Y+2, r25	; 0x02
    3108:	89 83       	std	Y+1, r24	; 0x01
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    310a:	ca 5b       	subi	r28, 0xBA	; 186
    310c:	df 4f       	sbci	r29, 0xFF	; 255
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	cd bf       	out	0x3d, r28	; 61
    3118:	cf 91       	pop	r28
    311a:	df 91       	pop	r29
    311c:	1f 91       	pop	r17
    311e:	0f 91       	pop	r16
    3120:	08 95       	ret

00003122 <CLCD_vSendData>:
 * Parameters :
 *		=> Copy_u8Data --> Data that you want to display (for every location )
 * return     : nothing
 */
void CLCD_vSendData(u8 Copy_u8Data)
{
    3122:	df 93       	push	r29
    3124:	cf 93       	push	r28
    3126:	0f 92       	push	r0
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
    312c:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	66 e0       	ldi	r22, 0x06	; 6
    3132:	41 e0       	ldi	r20, 0x01	; 1
    3134:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	65 e0       	ldi	r22, 0x05	; 5
    313c:	40 e0       	ldi	r20, 0x00	; 0
    313e:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <DIO_enumWritePinVal>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to high nibbles
  CLCD_vSendFallingEdge();

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_vWriteLowNibble(CLCD_DATA_PORT, (Copy_u8Data >> 4)); // send the most 4 bits of data to low nibbles
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	98 2f       	mov	r25, r24
    3146:	92 95       	swap	r25
    3148:	9f 70       	andi	r25, 0x0F	; 15
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	69 2f       	mov	r22, r25
    314e:	0e 94 03 13 	call	0x2606	; 0x2606 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    3152:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <CLCD_vSendFallingEdge>
  DIO_vWriteLowNibble(CLCD_DATA_PORT, Copy_u8Data); // send the least 4 bits of data to low nibbles
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	69 81       	ldd	r22, Y+1	; 0x01
    315a:	0e 94 03 13 	call	0x2606	; 0x2606 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    315e:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    3162:	0f 90       	pop	r0
    3164:	cf 91       	pop	r28
    3166:	df 91       	pop	r29
    3168:	08 95       	ret

0000316a <CLCD_vSendCommand>:
 * Parameters :
 *		=> Copy_u8Command --> Command number
 * return     : nothing
 */
void CLCD_vSendCommand(u8 Copy_u8Command)
{
    316a:	df 93       	push	r29
    316c:	cf 93       	push	r28
    316e:	0f 92       	push	r0
    3170:	cd b7       	in	r28, 0x3d	; 61
    3172:	de b7       	in	r29, 0x3e	; 62
    3174:	89 83       	std	Y+1, r24	; 0x01

  /*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<    4 Bits Mode     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/

#elif CLCD_MODE == 4

  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	66 e0       	ldi	r22, 0x06	; 6
    317a:	40 e0       	ldi	r20, 0x00	; 0
    317c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <DIO_enumWritePinVal>
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
    3180:	80 e0       	ldi	r24, 0x00	; 0
    3182:	65 e0       	ldi	r22, 0x05	; 5
    3184:	40 e0       	ldi	r20, 0x00	; 0
    3186:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <DIO_enumWritePinVal>
  DIO_vWriteHighNibble(CLCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to high nibbles
  CLCD_vSendFallingEdge();

#elif CLCD_DATA_NIBBLE == CLCD_LOW_NIBBLE

  DIO_vWriteLowNibble(CLCD_DATA_PORT, (Copy_u8Command >> 4)); // send the most 4 bits of data to low nibbles
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	98 2f       	mov	r25, r24
    318e:	92 95       	swap	r25
    3190:	9f 70       	andi	r25, 0x0F	; 15
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	69 2f       	mov	r22, r25
    3196:	0e 94 03 13 	call	0x2606	; 0x2606 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    319a:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <CLCD_vSendFallingEdge>
  DIO_vWriteLowNibble(CLCD_DATA_PORT, Copy_u8Command); // send the least 4 bits of data to low nibbles
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	69 81       	ldd	r22, Y+1	; 0x01
    31a2:	0e 94 03 13 	call	0x2606	; 0x2606 <DIO_vWriteLowNibble>
  CLCD_vSendFallingEdge();
    31a6:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <CLCD_vSendFallingEdge>
#else

#error "Wrong CLCD_MODE Config"

#endif
}
    31aa:	0f 90       	pop	r0
    31ac:	cf 91       	pop	r28
    31ae:	df 91       	pop	r29
    31b0:	08 95       	ret

000031b2 <CLCD_vSendFallingEdge>:
 * Parameters : nothing
 * return     : nothing
 */

static void CLCD_vSendFallingEdge(void)
{
    31b2:	df 93       	push	r29
    31b4:	cf 93       	push	r28
    31b6:	cd b7       	in	r28, 0x3d	; 61
    31b8:	de b7       	in	r29, 0x3e	; 62
    31ba:	6c 97       	sbiw	r28, 0x1c	; 28
    31bc:	0f b6       	in	r0, 0x3f	; 63
    31be:	f8 94       	cli
    31c0:	de bf       	out	0x3e, r29	; 62
    31c2:	0f be       	out	0x3f, r0	; 63
    31c4:	cd bf       	out	0x3d, r28	; 61
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	64 e0       	ldi	r22, 0x04	; 4
    31ca:	41 e0       	ldi	r20, 0x01	; 1
    31cc:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <DIO_enumWritePinVal>
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	a0 e8       	ldi	r26, 0x80	; 128
    31d6:	bf e3       	ldi	r27, 0x3F	; 63
    31d8:	89 8f       	std	Y+25, r24	; 0x19
    31da:	9a 8f       	std	Y+26, r25	; 0x1a
    31dc:	ab 8f       	std	Y+27, r26	; 0x1b
    31de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e0:	69 8d       	ldd	r22, Y+25	; 0x19
    31e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	4a ef       	ldi	r20, 0xFA	; 250
    31ee:	54 e4       	ldi	r21, 0x44	; 68
    31f0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	8d 8b       	std	Y+21, r24	; 0x15
    31fa:	9e 8b       	std	Y+22, r25	; 0x16
    31fc:	af 8b       	std	Y+23, r26	; 0x17
    31fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3200:	6d 89       	ldd	r22, Y+21	; 0x15
    3202:	7e 89       	ldd	r23, Y+22	; 0x16
    3204:	8f 89       	ldd	r24, Y+23	; 0x17
    3206:	98 8d       	ldd	r25, Y+24	; 0x18
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	40 e8       	ldi	r20, 0x80	; 128
    320e:	5f e3       	ldi	r21, 0x3F	; 63
    3210:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3214:	88 23       	and	r24, r24
    3216:	2c f4       	brge	.+10     	; 0x3222 <CLCD_vSendFallingEdge+0x70>
		__ticks = 1;
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	9c 8b       	std	Y+20, r25	; 0x14
    321e:	8b 8b       	std	Y+19, r24	; 0x13
    3220:	3f c0       	rjmp	.+126    	; 0x32a0 <CLCD_vSendFallingEdge+0xee>
	else if (__tmp > 65535)
    3222:	6d 89       	ldd	r22, Y+21	; 0x15
    3224:	7e 89       	ldd	r23, Y+22	; 0x16
    3226:	8f 89       	ldd	r24, Y+23	; 0x17
    3228:	98 8d       	ldd	r25, Y+24	; 0x18
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	3f ef       	ldi	r19, 0xFF	; 255
    322e:	4f e7       	ldi	r20, 0x7F	; 127
    3230:	57 e4       	ldi	r21, 0x47	; 71
    3232:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3236:	18 16       	cp	r1, r24
    3238:	4c f5       	brge	.+82     	; 0x328c <CLCD_vSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    323a:	69 8d       	ldd	r22, Y+25	; 0x19
    323c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    323e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3240:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	40 e2       	ldi	r20, 0x20	; 32
    3248:	51 e4       	ldi	r21, 0x41	; 65
    324a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	bc 01       	movw	r22, r24
    3254:	cd 01       	movw	r24, r26
    3256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	9c 8b       	std	Y+20, r25	; 0x14
    3260:	8b 8b       	std	Y+19, r24	; 0x13
    3262:	0f c0       	rjmp	.+30     	; 0x3282 <CLCD_vSendFallingEdge+0xd0>
    3264:	88 ec       	ldi	r24, 0xC8	; 200
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	9a 8b       	std	Y+18, r25	; 0x12
    326a:	89 8b       	std	Y+17, r24	; 0x11
    326c:	89 89       	ldd	r24, Y+17	; 0x11
    326e:	9a 89       	ldd	r25, Y+18	; 0x12
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	f1 f7       	brne	.-4      	; 0x3270 <CLCD_vSendFallingEdge+0xbe>
    3274:	9a 8b       	std	Y+18, r25	; 0x12
    3276:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3278:	8b 89       	ldd	r24, Y+19	; 0x13
    327a:	9c 89       	ldd	r25, Y+20	; 0x14
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	9c 8b       	std	Y+20, r25	; 0x14
    3280:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3282:	8b 89       	ldd	r24, Y+19	; 0x13
    3284:	9c 89       	ldd	r25, Y+20	; 0x14
    3286:	00 97       	sbiw	r24, 0x00	; 0
    3288:	69 f7       	brne	.-38     	; 0x3264 <CLCD_vSendFallingEdge+0xb2>
    328a:	14 c0       	rjmp	.+40     	; 0x32b4 <CLCD_vSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    328c:	6d 89       	ldd	r22, Y+21	; 0x15
    328e:	7e 89       	ldd	r23, Y+22	; 0x16
    3290:	8f 89       	ldd	r24, Y+23	; 0x17
    3292:	98 8d       	ldd	r25, Y+24	; 0x18
    3294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	9c 8b       	std	Y+20, r25	; 0x14
    329e:	8b 8b       	std	Y+19, r24	; 0x13
    32a0:	8b 89       	ldd	r24, Y+19	; 0x13
    32a2:	9c 89       	ldd	r25, Y+20	; 0x14
    32a4:	98 8b       	std	Y+16, r25	; 0x10
    32a6:	8f 87       	std	Y+15, r24	; 0x0f
    32a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    32aa:	98 89       	ldd	r25, Y+16	; 0x10
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	f1 f7       	brne	.-4      	; 0x32ac <CLCD_vSendFallingEdge+0xfa>
    32b0:	98 8b       	std	Y+16, r25	; 0x10
    32b2:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(1);
  DIO_enumWritePinVal(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	64 e0       	ldi	r22, 0x04	; 4
    32b8:	40 e0       	ldi	r20, 0x00	; 0
    32ba:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <DIO_enumWritePinVal>
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	a0 e8       	ldi	r26, 0x80	; 128
    32c4:	bf e3       	ldi	r27, 0x3F	; 63
    32c6:	8b 87       	std	Y+11, r24	; 0x0b
    32c8:	9c 87       	std	Y+12, r25	; 0x0c
    32ca:	ad 87       	std	Y+13, r26	; 0x0d
    32cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    32d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    32d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    32d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	4a ef       	ldi	r20, 0xFA	; 250
    32dc:	54 e4       	ldi	r21, 0x44	; 68
    32de:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	8f 83       	std	Y+7, r24	; 0x07
    32e8:	98 87       	std	Y+8, r25	; 0x08
    32ea:	a9 87       	std	Y+9, r26	; 0x09
    32ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32ee:	6f 81       	ldd	r22, Y+7	; 0x07
    32f0:	78 85       	ldd	r23, Y+8	; 0x08
    32f2:	89 85       	ldd	r24, Y+9	; 0x09
    32f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e8       	ldi	r20, 0x80	; 128
    32fc:	5f e3       	ldi	r21, 0x3F	; 63
    32fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3302:	88 23       	and	r24, r24
    3304:	2c f4       	brge	.+10     	; 0x3310 <CLCD_vSendFallingEdge+0x15e>
		__ticks = 1;
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	9e 83       	std	Y+6, r25	; 0x06
    330c:	8d 83       	std	Y+5, r24	; 0x05
    330e:	3f c0       	rjmp	.+126    	; 0x338e <CLCD_vSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    3310:	6f 81       	ldd	r22, Y+7	; 0x07
    3312:	78 85       	ldd	r23, Y+8	; 0x08
    3314:	89 85       	ldd	r24, Y+9	; 0x09
    3316:	9a 85       	ldd	r25, Y+10	; 0x0a
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	3f ef       	ldi	r19, 0xFF	; 255
    331c:	4f e7       	ldi	r20, 0x7F	; 127
    331e:	57 e4       	ldi	r21, 0x47	; 71
    3320:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3324:	18 16       	cp	r1, r24
    3326:	4c f5       	brge	.+82     	; 0x337a <CLCD_vSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3328:	6b 85       	ldd	r22, Y+11	; 0x0b
    332a:	7c 85       	ldd	r23, Y+12	; 0x0c
    332c:	8d 85       	ldd	r24, Y+13	; 0x0d
    332e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	40 e2       	ldi	r20, 0x20	; 32
    3336:	51 e4       	ldi	r21, 0x41	; 65
    3338:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	bc 01       	movw	r22, r24
    3342:	cd 01       	movw	r24, r26
    3344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3348:	dc 01       	movw	r26, r24
    334a:	cb 01       	movw	r24, r22
    334c:	9e 83       	std	Y+6, r25	; 0x06
    334e:	8d 83       	std	Y+5, r24	; 0x05
    3350:	0f c0       	rjmp	.+30     	; 0x3370 <CLCD_vSendFallingEdge+0x1be>
    3352:	88 ec       	ldi	r24, 0xC8	; 200
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	9c 83       	std	Y+4, r25	; 0x04
    3358:	8b 83       	std	Y+3, r24	; 0x03
    335a:	8b 81       	ldd	r24, Y+3	; 0x03
    335c:	9c 81       	ldd	r25, Y+4	; 0x04
    335e:	01 97       	sbiw	r24, 0x01	; 1
    3360:	f1 f7       	brne	.-4      	; 0x335e <CLCD_vSendFallingEdge+0x1ac>
    3362:	9c 83       	std	Y+4, r25	; 0x04
    3364:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3366:	8d 81       	ldd	r24, Y+5	; 0x05
    3368:	9e 81       	ldd	r25, Y+6	; 0x06
    336a:	01 97       	sbiw	r24, 0x01	; 1
    336c:	9e 83       	std	Y+6, r25	; 0x06
    336e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3370:	8d 81       	ldd	r24, Y+5	; 0x05
    3372:	9e 81       	ldd	r25, Y+6	; 0x06
    3374:	00 97       	sbiw	r24, 0x00	; 0
    3376:	69 f7       	brne	.-38     	; 0x3352 <CLCD_vSendFallingEdge+0x1a0>
    3378:	14 c0       	rjmp	.+40     	; 0x33a2 <CLCD_vSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    337a:	6f 81       	ldd	r22, Y+7	; 0x07
    337c:	78 85       	ldd	r23, Y+8	; 0x08
    337e:	89 85       	ldd	r24, Y+9	; 0x09
    3380:	9a 85       	ldd	r25, Y+10	; 0x0a
    3382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	9e 83       	std	Y+6, r25	; 0x06
    338c:	8d 83       	std	Y+5, r24	; 0x05
    338e:	8d 81       	ldd	r24, Y+5	; 0x05
    3390:	9e 81       	ldd	r25, Y+6	; 0x06
    3392:	9a 83       	std	Y+2, r25	; 0x02
    3394:	89 83       	std	Y+1, r24	; 0x01
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	9a 81       	ldd	r25, Y+2	; 0x02
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	f1 f7       	brne	.-4      	; 0x339a <CLCD_vSendFallingEdge+0x1e8>
    339e:	9a 83       	std	Y+2, r25	; 0x02
    33a0:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    33a2:	6c 96       	adiw	r28, 0x1c	; 28
    33a4:	0f b6       	in	r0, 0x3f	; 63
    33a6:	f8 94       	cli
    33a8:	de bf       	out	0x3e, r29	; 62
    33aa:	0f be       	out	0x3f, r0	; 63
    33ac:	cd bf       	out	0x3d, r28	; 61
    33ae:	cf 91       	pop	r28
    33b0:	df 91       	pop	r29
    33b2:	08 95       	ret

000033b4 <CLCD_vClearScreen>:
 *                                    *-----------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_vClearScreen(void)
{
    33b4:	df 93       	push	r29
    33b6:	cf 93       	push	r28
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
    33bc:	2e 97       	sbiw	r28, 0x0e	; 14
    33be:	0f b6       	in	r0, 0x3f	; 63
    33c0:	f8 94       	cli
    33c2:	de bf       	out	0x3e, r29	; 62
    33c4:	0f be       	out	0x3f, r0	; 63
    33c6:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_ClEAR);
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	a0 e2       	ldi	r26, 0x20	; 32
    33d4:	b1 e4       	ldi	r27, 0x41	; 65
    33d6:	8b 87       	std	Y+11, r24	; 0x0b
    33d8:	9c 87       	std	Y+12, r25	; 0x0c
    33da:	ad 87       	std	Y+13, r26	; 0x0d
    33dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33de:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	4a ef       	ldi	r20, 0xFA	; 250
    33ec:	54 e4       	ldi	r21, 0x44	; 68
    33ee:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	8f 83       	std	Y+7, r24	; 0x07
    33f8:	98 87       	std	Y+8, r25	; 0x08
    33fa:	a9 87       	std	Y+9, r26	; 0x09
    33fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3400:	78 85       	ldd	r23, Y+8	; 0x08
    3402:	89 85       	ldd	r24, Y+9	; 0x09
    3404:	9a 85       	ldd	r25, Y+10	; 0x0a
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	40 e8       	ldi	r20, 0x80	; 128
    340c:	5f e3       	ldi	r21, 0x3F	; 63
    340e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3412:	88 23       	and	r24, r24
    3414:	2c f4       	brge	.+10     	; 0x3420 <CLCD_vClearScreen+0x6c>
		__ticks = 1;
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	9e 83       	std	Y+6, r25	; 0x06
    341c:	8d 83       	std	Y+5, r24	; 0x05
    341e:	3f c0       	rjmp	.+126    	; 0x349e <CLCD_vClearScreen+0xea>
	else if (__tmp > 65535)
    3420:	6f 81       	ldd	r22, Y+7	; 0x07
    3422:	78 85       	ldd	r23, Y+8	; 0x08
    3424:	89 85       	ldd	r24, Y+9	; 0x09
    3426:	9a 85       	ldd	r25, Y+10	; 0x0a
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	3f ef       	ldi	r19, 0xFF	; 255
    342c:	4f e7       	ldi	r20, 0x7F	; 127
    342e:	57 e4       	ldi	r21, 0x47	; 71
    3430:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3434:	18 16       	cp	r1, r24
    3436:	4c f5       	brge	.+82     	; 0x348a <CLCD_vClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3438:	6b 85       	ldd	r22, Y+11	; 0x0b
    343a:	7c 85       	ldd	r23, Y+12	; 0x0c
    343c:	8d 85       	ldd	r24, Y+13	; 0x0d
    343e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	40 e2       	ldi	r20, 0x20	; 32
    3446:	51 e4       	ldi	r21, 0x41	; 65
    3448:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    344c:	dc 01       	movw	r26, r24
    344e:	cb 01       	movw	r24, r22
    3450:	bc 01       	movw	r22, r24
    3452:	cd 01       	movw	r24, r26
    3454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	9e 83       	std	Y+6, r25	; 0x06
    345e:	8d 83       	std	Y+5, r24	; 0x05
    3460:	0f c0       	rjmp	.+30     	; 0x3480 <CLCD_vClearScreen+0xcc>
    3462:	88 ec       	ldi	r24, 0xC8	; 200
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	9c 83       	std	Y+4, r25	; 0x04
    3468:	8b 83       	std	Y+3, r24	; 0x03
    346a:	8b 81       	ldd	r24, Y+3	; 0x03
    346c:	9c 81       	ldd	r25, Y+4	; 0x04
    346e:	01 97       	sbiw	r24, 0x01	; 1
    3470:	f1 f7       	brne	.-4      	; 0x346e <CLCD_vClearScreen+0xba>
    3472:	9c 83       	std	Y+4, r25	; 0x04
    3474:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3476:	8d 81       	ldd	r24, Y+5	; 0x05
    3478:	9e 81       	ldd	r25, Y+6	; 0x06
    347a:	01 97       	sbiw	r24, 0x01	; 1
    347c:	9e 83       	std	Y+6, r25	; 0x06
    347e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3480:	8d 81       	ldd	r24, Y+5	; 0x05
    3482:	9e 81       	ldd	r25, Y+6	; 0x06
    3484:	00 97       	sbiw	r24, 0x00	; 0
    3486:	69 f7       	brne	.-38     	; 0x3462 <CLCD_vClearScreen+0xae>
    3488:	14 c0       	rjmp	.+40     	; 0x34b2 <CLCD_vClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    348a:	6f 81       	ldd	r22, Y+7	; 0x07
    348c:	78 85       	ldd	r23, Y+8	; 0x08
    348e:	89 85       	ldd	r24, Y+9	; 0x09
    3490:	9a 85       	ldd	r25, Y+10	; 0x0a
    3492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3496:	dc 01       	movw	r26, r24
    3498:	cb 01       	movw	r24, r22
    349a:	9e 83       	std	Y+6, r25	; 0x06
    349c:	8d 83       	std	Y+5, r24	; 0x05
    349e:	8d 81       	ldd	r24, Y+5	; 0x05
    34a0:	9e 81       	ldd	r25, Y+6	; 0x06
    34a2:	9a 83       	std	Y+2, r25	; 0x02
    34a4:	89 83       	std	Y+1, r24	; 0x01
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	9a 81       	ldd	r25, Y+2	; 0x02
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	f1 f7       	brne	.-4      	; 0x34aa <CLCD_vClearScreen+0xf6>
    34ae:	9a 83       	std	Y+2, r25	; 0x02
    34b0:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(10); // wait more than 1.53 ms
}
    34b2:	2e 96       	adiw	r28, 0x0e	; 14
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	f8 94       	cli
    34b8:	de bf       	out	0x3e, r29	; 62
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	cd bf       	out	0x3d, r28	; 61
    34be:	cf 91       	pop	r28
    34c0:	df 91       	pop	r29
    34c2:	08 95       	ret

000034c4 <CLCD_vSendString>:
 *		=> Copy_u8ptrString  --> Pointer to the string
 * return     : nothing
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
    34c4:	df 93       	push	r29
    34c6:	cf 93       	push	r28
    34c8:	00 d0       	rcall	.+0      	; 0x34ca <CLCD_vSendString+0x6>
    34ca:	0f 92       	push	r0
    34cc:	cd b7       	in	r28, 0x3d	; 61
    34ce:	de b7       	in	r29, 0x3e	; 62
    34d0:	9b 83       	std	Y+3, r25	; 0x03
    34d2:	8a 83       	std	Y+2, r24	; 0x02
  u8 LOC_u8Iterator = 0;
    34d4:	19 82       	std	Y+1, r1	; 0x01
    34d6:	0e c0       	rjmp	.+28     	; 0x34f4 <CLCD_vSendString+0x30>
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	28 2f       	mov	r18, r24
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	8a 81       	ldd	r24, Y+2	; 0x02
    34e0:	9b 81       	ldd	r25, Y+3	; 0x03
    34e2:	fc 01       	movw	r30, r24
    34e4:	e2 0f       	add	r30, r18
    34e6:	f3 1f       	adc	r31, r19
    34e8:	80 81       	ld	r24, Z
    34ea:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
    LOC_u8Iterator++;
    34ee:	89 81       	ldd	r24, Y+1	; 0x01
    34f0:	8f 5f       	subi	r24, 0xFF	; 255
    34f2:	89 83       	std	Y+1, r24	; 0x01
 */

void CLCD_vSendString( u8 *Copy_u8PrtStrign)
{
  u8 LOC_u8Iterator = 0;
  while (Copy_u8PrtStrign[LOC_u8Iterator] != '\0')
    34f4:	89 81       	ldd	r24, Y+1	; 0x01
    34f6:	28 2f       	mov	r18, r24
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	8a 81       	ldd	r24, Y+2	; 0x02
    34fc:	9b 81       	ldd	r25, Y+3	; 0x03
    34fe:	fc 01       	movw	r30, r24
    3500:	e2 0f       	add	r30, r18
    3502:	f3 1f       	adc	r31, r19
    3504:	80 81       	ld	r24, Z
    3506:	88 23       	and	r24, r24
    3508:	39 f7       	brne	.-50     	; 0x34d8 <CLCD_vSendString+0x14>
  {
    CLCD_vSendData(Copy_u8PrtStrign[LOC_u8Iterator]);
    LOC_u8Iterator++;
  }
}
    350a:	0f 90       	pop	r0
    350c:	0f 90       	pop	r0
    350e:	0f 90       	pop	r0
    3510:	cf 91       	pop	r28
    3512:	df 91       	pop	r29
    3514:	08 95       	ret

00003516 <CLCD_vSendIntNumber>:
 *		=> Copy_s32Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendIntNumber(s32 Copy_s32Number)
{
    3516:	ef 92       	push	r14
    3518:	ff 92       	push	r15
    351a:	0f 93       	push	r16
    351c:	1f 93       	push	r17
    351e:	df 93       	push	r29
    3520:	cf 93       	push	r28
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62
    3526:	28 97       	sbiw	r28, 0x08	; 8
    3528:	0f b6       	in	r0, 0x3f	; 63
    352a:	f8 94       	cli
    352c:	de bf       	out	0x3e, r29	; 62
    352e:	0f be       	out	0x3f, r0	; 63
    3530:	cd bf       	out	0x3d, r28	; 61
    3532:	6d 83       	std	Y+5, r22	; 0x05
    3534:	7e 83       	std	Y+6, r23	; 0x06
    3536:	8f 83       	std	Y+7, r24	; 0x07
    3538:	98 87       	std	Y+8, r25	; 0x08

  u32 LOC_u32Reverse = 1;
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	a0 e0       	ldi	r26, 0x00	; 0
    3540:	b0 e0       	ldi	r27, 0x00	; 0
    3542:	89 83       	std	Y+1, r24	; 0x01
    3544:	9a 83       	std	Y+2, r25	; 0x02
    3546:	ab 83       	std	Y+3, r26	; 0x03
    3548:	bc 83       	std	Y+4, r27	; 0x04

  if (Copy_s32Number == 0)
    354a:	8d 81       	ldd	r24, Y+5	; 0x05
    354c:	9e 81       	ldd	r25, Y+6	; 0x06
    354e:	af 81       	ldd	r26, Y+7	; 0x07
    3550:	b8 85       	ldd	r27, Y+8	; 0x08
    3552:	00 97       	sbiw	r24, 0x00	; 0
    3554:	a1 05       	cpc	r26, r1
    3556:	b1 05       	cpc	r27, r1
    3558:	21 f4       	brne	.+8      	; 0x3562 <CLCD_vSendIntNumber+0x4c>
  {
    CLCD_vSendData('0');
    355a:	80 e3       	ldi	r24, 0x30	; 48
    355c:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
    3560:	85 c0       	rjmp	.+266    	; 0x366c <CLCD_vSendIntNumber+0x156>
  }
  else
  {
    if (Copy_s32Number < 0)
    3562:	8d 81       	ldd	r24, Y+5	; 0x05
    3564:	9e 81       	ldd	r25, Y+6	; 0x06
    3566:	af 81       	ldd	r26, Y+7	; 0x07
    3568:	b8 85       	ldd	r27, Y+8	; 0x08
    356a:	bb 23       	and	r27, r27
    356c:	0c f0       	brlt	.+2      	; 0x3570 <CLCD_vSendIntNumber+0x5a>
    356e:	49 c0       	rjmp	.+146    	; 0x3602 <CLCD_vSendIntNumber+0xec>
    {
      CLCD_vSendData('-');
    3570:	8d e2       	ldi	r24, 0x2D	; 45
    3572:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
      Copy_s32Number = (-1 * Copy_s32Number);
    3576:	8d 81       	ldd	r24, Y+5	; 0x05
    3578:	9e 81       	ldd	r25, Y+6	; 0x06
    357a:	af 81       	ldd	r26, Y+7	; 0x07
    357c:	b8 85       	ldd	r27, Y+8	; 0x08
    357e:	b0 95       	com	r27
    3580:	a0 95       	com	r26
    3582:	90 95       	com	r25
    3584:	81 95       	neg	r24
    3586:	9f 4f       	sbci	r25, 0xFF	; 255
    3588:	af 4f       	sbci	r26, 0xFF	; 255
    358a:	bf 4f       	sbci	r27, 0xFF	; 255
    358c:	8d 83       	std	Y+5, r24	; 0x05
    358e:	9e 83       	std	Y+6, r25	; 0x06
    3590:	af 83       	std	Y+7, r26	; 0x07
    3592:	b8 87       	std	Y+8, r27	; 0x08
    3594:	36 c0       	rjmp	.+108    	; 0x3602 <CLCD_vSendIntNumber+0xec>
    }
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	9a 81       	ldd	r25, Y+2	; 0x02
    359a:	ab 81       	ldd	r26, Y+3	; 0x03
    359c:	bc 81       	ldd	r27, Y+4	; 0x04
    359e:	2a e0       	ldi	r18, 0x0A	; 10
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	40 e0       	ldi	r20, 0x00	; 0
    35a4:	50 e0       	ldi	r21, 0x00	; 0
    35a6:	bc 01       	movw	r22, r24
    35a8:	cd 01       	movw	r24, r26
    35aa:	0e 94 05 3a 	call	0x740a	; 0x740a <__mulsi3>
    35ae:	7b 01       	movw	r14, r22
    35b0:	8c 01       	movw	r16, r24
    35b2:	8d 81       	ldd	r24, Y+5	; 0x05
    35b4:	9e 81       	ldd	r25, Y+6	; 0x06
    35b6:	af 81       	ldd	r26, Y+7	; 0x07
    35b8:	b8 85       	ldd	r27, Y+8	; 0x08
    35ba:	2a e0       	ldi	r18, 0x0A	; 10
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	40 e0       	ldi	r20, 0x00	; 0
    35c0:	50 e0       	ldi	r21, 0x00	; 0
    35c2:	bc 01       	movw	r22, r24
    35c4:	cd 01       	movw	r24, r26
    35c6:	0e 94 52 3a 	call	0x74a4	; 0x74a4 <__divmodsi4>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	8e 0d       	add	r24, r14
    35d0:	9f 1d       	adc	r25, r15
    35d2:	a0 1f       	adc	r26, r16
    35d4:	b1 1f       	adc	r27, r17
    35d6:	89 83       	std	Y+1, r24	; 0x01
    35d8:	9a 83       	std	Y+2, r25	; 0x02
    35da:	ab 83       	std	Y+3, r26	; 0x03
    35dc:	bc 83       	std	Y+4, r27	; 0x04
      Copy_s32Number /= 10;
    35de:	8d 81       	ldd	r24, Y+5	; 0x05
    35e0:	9e 81       	ldd	r25, Y+6	; 0x06
    35e2:	af 81       	ldd	r26, Y+7	; 0x07
    35e4:	b8 85       	ldd	r27, Y+8	; 0x08
    35e6:	2a e0       	ldi	r18, 0x0A	; 10
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	40 e0       	ldi	r20, 0x00	; 0
    35ec:	50 e0       	ldi	r21, 0x00	; 0
    35ee:	bc 01       	movw	r22, r24
    35f0:	cd 01       	movw	r24, r26
    35f2:	0e 94 52 3a 	call	0x74a4	; 0x74a4 <__divmodsi4>
    35f6:	da 01       	movw	r26, r20
    35f8:	c9 01       	movw	r24, r18
    35fa:	8d 83       	std	Y+5, r24	; 0x05
    35fc:	9e 83       	std	Y+6, r25	; 0x06
    35fe:	af 83       	std	Y+7, r26	; 0x07
    3600:	b8 87       	std	Y+8, r27	; 0x08
    if (Copy_s32Number < 0)
    {
      CLCD_vSendData('-');
      Copy_s32Number = (-1 * Copy_s32Number);
    }
    while (Copy_s32Number != 0)
    3602:	8d 81       	ldd	r24, Y+5	; 0x05
    3604:	9e 81       	ldd	r25, Y+6	; 0x06
    3606:	af 81       	ldd	r26, Y+7	; 0x07
    3608:	b8 85       	ldd	r27, Y+8	; 0x08
    360a:	00 97       	sbiw	r24, 0x00	; 0
    360c:	a1 05       	cpc	r26, r1
    360e:	b1 05       	cpc	r27, r1
    3610:	11 f6       	brne	.-124    	; 0x3596 <CLCD_vSendIntNumber+0x80>
    3612:	23 c0       	rjmp	.+70     	; 0x365a <CLCD_vSendIntNumber+0x144>
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
    3614:	89 81       	ldd	r24, Y+1	; 0x01
    3616:	9a 81       	ldd	r25, Y+2	; 0x02
    3618:	ab 81       	ldd	r26, Y+3	; 0x03
    361a:	bc 81       	ldd	r27, Y+4	; 0x04
    361c:	2a e0       	ldi	r18, 0x0A	; 10
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	40 e0       	ldi	r20, 0x00	; 0
    3622:	50 e0       	ldi	r21, 0x00	; 0
    3624:	bc 01       	movw	r22, r24
    3626:	cd 01       	movw	r24, r26
    3628:	0e 94 30 3a 	call	0x7460	; 0x7460 <__udivmodsi4>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	80 5d       	subi	r24, 0xD0	; 208
    3632:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
      LOC_u32Reverse /= 10;
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	9a 81       	ldd	r25, Y+2	; 0x02
    363a:	ab 81       	ldd	r26, Y+3	; 0x03
    363c:	bc 81       	ldd	r27, Y+4	; 0x04
    363e:	2a e0       	ldi	r18, 0x0A	; 10
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	40 e0       	ldi	r20, 0x00	; 0
    3644:	50 e0       	ldi	r21, 0x00	; 0
    3646:	bc 01       	movw	r22, r24
    3648:	cd 01       	movw	r24, r26
    364a:	0e 94 30 3a 	call	0x7460	; 0x7460 <__udivmodsi4>
    364e:	da 01       	movw	r26, r20
    3650:	c9 01       	movw	r24, r18
    3652:	89 83       	std	Y+1, r24	; 0x01
    3654:	9a 83       	std	Y+2, r25	; 0x02
    3656:	ab 83       	std	Y+3, r26	; 0x03
    3658:	bc 83       	std	Y+4, r27	; 0x04
    while (Copy_s32Number != 0)
    {
      LOC_u32Reverse = (LOC_u32Reverse * 10) + (Copy_s32Number % 10);
      Copy_s32Number /= 10;
    }
    while (LOC_u32Reverse != 1)
    365a:	89 81       	ldd	r24, Y+1	; 0x01
    365c:	9a 81       	ldd	r25, Y+2	; 0x02
    365e:	ab 81       	ldd	r26, Y+3	; 0x03
    3660:	bc 81       	ldd	r27, Y+4	; 0x04
    3662:	81 30       	cpi	r24, 0x01	; 1
    3664:	91 05       	cpc	r25, r1
    3666:	a1 05       	cpc	r26, r1
    3668:	b1 05       	cpc	r27, r1
    366a:	a1 f6       	brne	.-88     	; 0x3614 <CLCD_vSendIntNumber+0xfe>
    {
      CLCD_vSendData((LOC_u32Reverse % 10) + 48);
      LOC_u32Reverse /= 10;
    }
  }
}
    366c:	28 96       	adiw	r28, 0x08	; 8
    366e:	0f b6       	in	r0, 0x3f	; 63
    3670:	f8 94       	cli
    3672:	de bf       	out	0x3e, r29	; 62
    3674:	0f be       	out	0x3f, r0	; 63
    3676:	cd bf       	out	0x3d, r28	; 61
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	1f 91       	pop	r17
    367e:	0f 91       	pop	r16
    3680:	ff 90       	pop	r15
    3682:	ef 90       	pop	r14
    3684:	08 95       	ret

00003686 <CLCD_vSendFloatNumber>:
 *		=> Copy_f64Number  --> Number that you want to display
 * return     : nothing
 */

void CLCD_vSendFloatNumber(f64 Copy_f64Number)
{
    3686:	af 92       	push	r10
    3688:	bf 92       	push	r11
    368a:	cf 92       	push	r12
    368c:	df 92       	push	r13
    368e:	ef 92       	push	r14
    3690:	ff 92       	push	r15
    3692:	0f 93       	push	r16
    3694:	1f 93       	push	r17
    3696:	df 93       	push	r29
    3698:	cf 93       	push	r28
    369a:	00 d0       	rcall	.+0      	; 0x369c <CLCD_vSendFloatNumber+0x16>
    369c:	00 d0       	rcall	.+0      	; 0x369e <CLCD_vSendFloatNumber+0x18>
    369e:	cd b7       	in	r28, 0x3d	; 61
    36a0:	de b7       	in	r29, 0x3e	; 62
    36a2:	69 83       	std	Y+1, r22	; 0x01
    36a4:	7a 83       	std	Y+2, r23	; 0x02
    36a6:	8b 83       	std	Y+3, r24	; 0x03
    36a8:	9c 83       	std	Y+4, r25	; 0x04
  CLCD_vSendIntNumber((s32)Copy_f64Number);
    36aa:	69 81       	ldd	r22, Y+1	; 0x01
    36ac:	7a 81       	ldd	r23, Y+2	; 0x02
    36ae:	8b 81       	ldd	r24, Y+3	; 0x03
    36b0:	9c 81       	ldd	r25, Y+4	; 0x04
    36b2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	bc 01       	movw	r22, r24
    36bc:	cd 01       	movw	r24, r26
    36be:	0e 94 8b 1a 	call	0x3516	; 0x3516 <CLCD_vSendIntNumber>
  if (Copy_f64Number < 0)
    36c2:	69 81       	ldd	r22, Y+1	; 0x01
    36c4:	7a 81       	ldd	r23, Y+2	; 0x02
    36c6:	8b 81       	ldd	r24, Y+3	; 0x03
    36c8:	9c 81       	ldd	r25, Y+4	; 0x04
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	40 e0       	ldi	r20, 0x00	; 0
    36d0:	50 e0       	ldi	r21, 0x00	; 0
    36d2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    36d6:	88 23       	and	r24, r24
    36d8:	4c f4       	brge	.+18     	; 0x36ec <CLCD_vSendFloatNumber+0x66>
  {
    Copy_f64Number *= -1;
    36da:	89 81       	ldd	r24, Y+1	; 0x01
    36dc:	9a 81       	ldd	r25, Y+2	; 0x02
    36de:	ab 81       	ldd	r26, Y+3	; 0x03
    36e0:	bc 81       	ldd	r27, Y+4	; 0x04
    36e2:	b0 58       	subi	r27, 0x80	; 128
    36e4:	89 83       	std	Y+1, r24	; 0x01
    36e6:	9a 83       	std	Y+2, r25	; 0x02
    36e8:	ab 83       	std	Y+3, r26	; 0x03
    36ea:	bc 83       	std	Y+4, r27	; 0x04
  }
  Copy_f64Number = (f64)Copy_f64Number - (s32)Copy_f64Number;
    36ec:	69 81       	ldd	r22, Y+1	; 0x01
    36ee:	7a 81       	ldd	r23, Y+2	; 0x02
    36f0:	8b 81       	ldd	r24, Y+3	; 0x03
    36f2:	9c 81       	ldd	r25, Y+4	; 0x04
    36f4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	bc 01       	movw	r22, r24
    36fe:	cd 01       	movw	r24, r26
    3700:	0e 94 71 05 	call	0xae2	; 0xae2 <__floatsisf>
    3704:	9b 01       	movw	r18, r22
    3706:	ac 01       	movw	r20, r24
    3708:	69 81       	ldd	r22, Y+1	; 0x01
    370a:	7a 81       	ldd	r23, Y+2	; 0x02
    370c:	8b 81       	ldd	r24, Y+3	; 0x03
    370e:	9c 81       	ldd	r25, Y+4	; 0x04
    3710:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__subsf3>
    3714:	dc 01       	movw	r26, r24
    3716:	cb 01       	movw	r24, r22
    3718:	89 83       	std	Y+1, r24	; 0x01
    371a:	9a 83       	std	Y+2, r25	; 0x02
    371c:	ab 83       	std	Y+3, r26	; 0x03
    371e:	bc 83       	std	Y+4, r27	; 0x04
  Copy_f64Number *= 10000;
    3720:	69 81       	ldd	r22, Y+1	; 0x01
    3722:	7a 81       	ldd	r23, Y+2	; 0x02
    3724:	8b 81       	ldd	r24, Y+3	; 0x03
    3726:	9c 81       	ldd	r25, Y+4	; 0x04
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	30 e4       	ldi	r19, 0x40	; 64
    372c:	4c e1       	ldi	r20, 0x1C	; 28
    372e:	56 e4       	ldi	r21, 0x46	; 70
    3730:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3734:	dc 01       	movw	r26, r24
    3736:	cb 01       	movw	r24, r22
    3738:	89 83       	std	Y+1, r24	; 0x01
    373a:	9a 83       	std	Y+2, r25	; 0x02
    373c:	ab 83       	std	Y+3, r26	; 0x03
    373e:	bc 83       	std	Y+4, r27	; 0x04
  if ((s64)Copy_f64Number != 0)
    3740:	69 81       	ldd	r22, Y+1	; 0x01
    3742:	7a 81       	ldd	r23, Y+2	; 0x02
    3744:	8b 81       	ldd	r24, Y+3	; 0x03
    3746:	9c 81       	ldd	r25, Y+4	; 0x04
    3748:	0e 94 75 00 	call	0xea	; 0xea <__fixsfdi>
    374c:	a2 2e       	mov	r10, r18
    374e:	b3 2e       	mov	r11, r19
    3750:	c4 2e       	mov	r12, r20
    3752:	d5 2e       	mov	r13, r21
    3754:	e6 2e       	mov	r14, r22
    3756:	f7 2e       	mov	r15, r23
    3758:	08 2f       	mov	r16, r24
    375a:	19 2f       	mov	r17, r25
    375c:	8a 2d       	mov	r24, r10
    375e:	8b 29       	or	r24, r11
    3760:	8c 29       	or	r24, r12
    3762:	8d 29       	or	r24, r13
    3764:	8e 29       	or	r24, r14
    3766:	8f 29       	or	r24, r15
    3768:	80 2b       	or	r24, r16
    376a:	81 2b       	or	r24, r17
    376c:	88 23       	and	r24, r24
    376e:	79 f0       	breq	.+30     	; 0x378e <CLCD_vSendFloatNumber+0x108>
  {
    CLCD_vSendData('.');
    3770:	8e e2       	ldi	r24, 0x2E	; 46
    3772:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
    CLCD_vSendIntNumber((s32)Copy_f64Number);
    3776:	69 81       	ldd	r22, Y+1	; 0x01
    3778:	7a 81       	ldd	r23, Y+2	; 0x02
    377a:	8b 81       	ldd	r24, Y+3	; 0x03
    377c:	9c 81       	ldd	r25, Y+4	; 0x04
    377e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__fixsfsi>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	bc 01       	movw	r22, r24
    3788:	cd 01       	movw	r24, r26
    378a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <CLCD_vSendIntNumber>
  }
}
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	0f 90       	pop	r0
    3794:	0f 90       	pop	r0
    3796:	cf 91       	pop	r28
    3798:	df 91       	pop	r29
    379a:	1f 91       	pop	r17
    379c:	0f 91       	pop	r16
    379e:	ff 90       	pop	r15
    37a0:	ef 90       	pop	r14
    37a2:	df 90       	pop	r13
    37a4:	cf 90       	pop	r12
    37a6:	bf 90       	pop	r11
    37a8:	af 90       	pop	r10
    37aa:	08 95       	ret

000037ac <CLCD_vSetPosition>:
 *		MSB = 1  ===> refers that it is command to set cursor
 *		xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
 */

void CLCD_vSetPosition(u8 Copy_u8ROW, u8 Copy_u8Col)
{
    37ac:	df 93       	push	r29
    37ae:	cf 93       	push	r28
    37b0:	cd b7       	in	r28, 0x3d	; 61
    37b2:	de b7       	in	r29, 0x3e	; 62
    37b4:	61 97       	sbiw	r28, 0x11	; 17
    37b6:	0f b6       	in	r0, 0x3f	; 63
    37b8:	f8 94       	cli
    37ba:	de bf       	out	0x3e, r29	; 62
    37bc:	0f be       	out	0x3f, r0	; 63
    37be:	cd bf       	out	0x3d, r28	; 61
    37c0:	88 8b       	std	Y+16, r24	; 0x10
    37c2:	69 8b       	std	Y+17, r22	; 0x11
  u8 LOC_u8Data;

  if ((Copy_u8ROW < CLCD_ROW_1) || (Copy_u8ROW > CLCD_ROW_4) || (Copy_u8Col < CLCD_COL_1) || (Copy_u8Col > CLCD_COL_20))
    37c4:	88 89       	ldd	r24, Y+16	; 0x10
    37c6:	88 23       	and	r24, r24
    37c8:	49 f0       	breq	.+18     	; 0x37dc <CLCD_vSetPosition+0x30>
    37ca:	88 89       	ldd	r24, Y+16	; 0x10
    37cc:	85 30       	cpi	r24, 0x05	; 5
    37ce:	30 f4       	brcc	.+12     	; 0x37dc <CLCD_vSetPosition+0x30>
    37d0:	89 89       	ldd	r24, Y+17	; 0x11
    37d2:	88 23       	and	r24, r24
    37d4:	19 f0       	breq	.+6      	; 0x37dc <CLCD_vSetPosition+0x30>
    37d6:	89 89       	ldd	r24, Y+17	; 0x11
    37d8:	85 31       	cpi	r24, 0x15	; 21
    37da:	18 f0       	brcs	.+6      	; 0x37e2 <CLCD_vSetPosition+0x36>
  {
    LOC_u8Data = CLCD_SET_CURSOR;
    37dc:	80 e8       	ldi	r24, 0x80	; 128
    37de:	8f 87       	std	Y+15, r24	; 0x0f
    37e0:	1b c0       	rjmp	.+54     	; 0x3818 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_1)
    37e2:	88 89       	ldd	r24, Y+16	; 0x10
    37e4:	81 30       	cpi	r24, 0x01	; 1
    37e6:	21 f4       	brne	.+8      	; 0x37f0 <CLCD_vSetPosition+0x44>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (Copy_u8Col - 1));
    37e8:	89 89       	ldd	r24, Y+17	; 0x11
    37ea:	81 58       	subi	r24, 0x81	; 129
    37ec:	8f 87       	std	Y+15, r24	; 0x0f
    37ee:	14 c0       	rjmp	.+40     	; 0x3818 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_2)
    37f0:	88 89       	ldd	r24, Y+16	; 0x10
    37f2:	82 30       	cpi	r24, 0x02	; 2
    37f4:	21 f4       	brne	.+8      	; 0x37fe <CLCD_vSetPosition+0x52>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (64) + (Copy_u8Col - 1));
    37f6:	89 89       	ldd	r24, Y+17	; 0x11
    37f8:	81 54       	subi	r24, 0x41	; 65
    37fa:	8f 87       	std	Y+15, r24	; 0x0f
    37fc:	0d c0       	rjmp	.+26     	; 0x3818 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_3)
    37fe:	88 89       	ldd	r24, Y+16	; 0x10
    3800:	83 30       	cpi	r24, 0x03	; 3
    3802:	21 f4       	brne	.+8      	; 0x380c <CLCD_vSetPosition+0x60>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (20) + (Copy_u8Col - 1));
    3804:	89 89       	ldd	r24, Y+17	; 0x11
    3806:	8d 56       	subi	r24, 0x6D	; 109
    3808:	8f 87       	std	Y+15, r24	; 0x0f
    380a:	06 c0       	rjmp	.+12     	; 0x3818 <CLCD_vSetPosition+0x6c>
  }
  else if (Copy_u8ROW == CLCD_ROW_4)
    380c:	88 89       	ldd	r24, Y+16	; 0x10
    380e:	84 30       	cpi	r24, 0x04	; 4
    3810:	19 f4       	brne	.+6      	; 0x3818 <CLCD_vSetPosition+0x6c>
  {
    LOC_u8Data = ((CLCD_SET_CURSOR) + (84) + (Copy_u8Col - 1));
    3812:	89 89       	ldd	r24, Y+17	; 0x11
    3814:	8d 52       	subi	r24, 0x2D	; 45
    3816:	8f 87       	std	Y+15, r24	; 0x0f
  }

  CLCD_vSendCommand(LOC_u8Data);
    3818:	8f 85       	ldd	r24, Y+15	; 0x0f
    381a:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
    381e:	80 e0       	ldi	r24, 0x00	; 0
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	a0 e8       	ldi	r26, 0x80	; 128
    3824:	bf e3       	ldi	r27, 0x3F	; 63
    3826:	8b 87       	std	Y+11, r24	; 0x0b
    3828:	9c 87       	std	Y+12, r25	; 0x0c
    382a:	ad 87       	std	Y+13, r26	; 0x0d
    382c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    382e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3830:	7c 85       	ldd	r23, Y+12	; 0x0c
    3832:	8d 85       	ldd	r24, Y+13	; 0x0d
    3834:	9e 85       	ldd	r25, Y+14	; 0x0e
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	4a ef       	ldi	r20, 0xFA	; 250
    383c:	54 e4       	ldi	r21, 0x44	; 68
    383e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	8f 83       	std	Y+7, r24	; 0x07
    3848:	98 87       	std	Y+8, r25	; 0x08
    384a:	a9 87       	std	Y+9, r26	; 0x09
    384c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    384e:	6f 81       	ldd	r22, Y+7	; 0x07
    3850:	78 85       	ldd	r23, Y+8	; 0x08
    3852:	89 85       	ldd	r24, Y+9	; 0x09
    3854:	9a 85       	ldd	r25, Y+10	; 0x0a
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	40 e8       	ldi	r20, 0x80	; 128
    385c:	5f e3       	ldi	r21, 0x3F	; 63
    385e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3862:	88 23       	and	r24, r24
    3864:	2c f4       	brge	.+10     	; 0x3870 <CLCD_vSetPosition+0xc4>
		__ticks = 1;
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	90 e0       	ldi	r25, 0x00	; 0
    386a:	9e 83       	std	Y+6, r25	; 0x06
    386c:	8d 83       	std	Y+5, r24	; 0x05
    386e:	3f c0       	rjmp	.+126    	; 0x38ee <CLCD_vSetPosition+0x142>
	else if (__tmp > 65535)
    3870:	6f 81       	ldd	r22, Y+7	; 0x07
    3872:	78 85       	ldd	r23, Y+8	; 0x08
    3874:	89 85       	ldd	r24, Y+9	; 0x09
    3876:	9a 85       	ldd	r25, Y+10	; 0x0a
    3878:	20 e0       	ldi	r18, 0x00	; 0
    387a:	3f ef       	ldi	r19, 0xFF	; 255
    387c:	4f e7       	ldi	r20, 0x7F	; 127
    387e:	57 e4       	ldi	r21, 0x47	; 71
    3880:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3884:	18 16       	cp	r1, r24
    3886:	4c f5       	brge	.+82     	; 0x38da <CLCD_vSetPosition+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3888:	6b 85       	ldd	r22, Y+11	; 0x0b
    388a:	7c 85       	ldd	r23, Y+12	; 0x0c
    388c:	8d 85       	ldd	r24, Y+13	; 0x0d
    388e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	40 e2       	ldi	r20, 0x20	; 32
    3896:	51 e4       	ldi	r21, 0x41	; 65
    3898:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	bc 01       	movw	r22, r24
    38a2:	cd 01       	movw	r24, r26
    38a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a8:	dc 01       	movw	r26, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	9e 83       	std	Y+6, r25	; 0x06
    38ae:	8d 83       	std	Y+5, r24	; 0x05
    38b0:	0f c0       	rjmp	.+30     	; 0x38d0 <CLCD_vSetPosition+0x124>
    38b2:	88 ec       	ldi	r24, 0xC8	; 200
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	9c 83       	std	Y+4, r25	; 0x04
    38b8:	8b 83       	std	Y+3, r24	; 0x03
    38ba:	8b 81       	ldd	r24, Y+3	; 0x03
    38bc:	9c 81       	ldd	r25, Y+4	; 0x04
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	f1 f7       	brne	.-4      	; 0x38be <CLCD_vSetPosition+0x112>
    38c2:	9c 83       	std	Y+4, r25	; 0x04
    38c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38c6:	8d 81       	ldd	r24, Y+5	; 0x05
    38c8:	9e 81       	ldd	r25, Y+6	; 0x06
    38ca:	01 97       	sbiw	r24, 0x01	; 1
    38cc:	9e 83       	std	Y+6, r25	; 0x06
    38ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38d0:	8d 81       	ldd	r24, Y+5	; 0x05
    38d2:	9e 81       	ldd	r25, Y+6	; 0x06
    38d4:	00 97       	sbiw	r24, 0x00	; 0
    38d6:	69 f7       	brne	.-38     	; 0x38b2 <CLCD_vSetPosition+0x106>
    38d8:	14 c0       	rjmp	.+40     	; 0x3902 <CLCD_vSetPosition+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38da:	6f 81       	ldd	r22, Y+7	; 0x07
    38dc:	78 85       	ldd	r23, Y+8	; 0x08
    38de:	89 85       	ldd	r24, Y+9	; 0x09
    38e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	9e 83       	std	Y+6, r25	; 0x06
    38ec:	8d 83       	std	Y+5, r24	; 0x05
    38ee:	8d 81       	ldd	r24, Y+5	; 0x05
    38f0:	9e 81       	ldd	r25, Y+6	; 0x06
    38f2:	9a 83       	std	Y+2, r25	; 0x02
    38f4:	89 83       	std	Y+1, r24	; 0x01
    38f6:	89 81       	ldd	r24, Y+1	; 0x01
    38f8:	9a 81       	ldd	r25, Y+2	; 0x02
    38fa:	01 97       	sbiw	r24, 0x01	; 1
    38fc:	f1 f7       	brne	.-4      	; 0x38fa <CLCD_vSetPosition+0x14e>
    38fe:	9a 83       	std	Y+2, r25	; 0x02
    3900:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    3902:	61 96       	adiw	r28, 0x11	; 17
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	f8 94       	cli
    3908:	de bf       	out	0x3e, r29	; 62
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	cd bf       	out	0x3d, r28	; 61
    390e:	cf 91       	pop	r28
    3910:	df 91       	pop	r29
    3912:	08 95       	ret

00003914 <CLCD_vSendExtraChar>:
 * Hint       :-
 *	    Address Counter can refer to CGRAM and DDRAM
 */

void CLCD_vSendExtraChar(u8 Copy_u8Row, u8 Copy_u8Col)
{
    3914:	df 93       	push	r29
    3916:	cf 93       	push	r28
    3918:	00 d0       	rcall	.+0      	; 0x391a <CLCD_vSendExtraChar+0x6>
    391a:	0f 92       	push	r0
    391c:	cd b7       	in	r28, 0x3d	; 61
    391e:	de b7       	in	r29, 0x3e	; 62
    3920:	8a 83       	std	Y+2, r24	; 0x02
    3922:	6b 83       	std	Y+3, r22	; 0x03

  u8 LOC_u8Iterator = 0;
    3924:	19 82       	std	Y+1, r1	; 0x01

  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM
    3926:	80 e4       	ldi	r24, 0x40	; 64
    3928:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    392c:	19 82       	std	Y+1, r1	; 0x01
    392e:	0c c0       	rjmp	.+24     	; 0x3948 <CLCD_vSendExtraChar+0x34>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
    3930:	89 81       	ldd	r24, Y+1	; 0x01
    3932:	88 2f       	mov	r24, r24
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	fc 01       	movw	r30, r24
    3938:	e3 5b       	subi	r30, 0xB3	; 179
    393a:	fa 4f       	sbci	r31, 0xFA	; 250
    393c:	80 81       	ld	r24, Z
    393e:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
  /* 1- Go To CGRAM            */
  CLCD_vSendCommand(CLCD_CGRAM); // Make AC refers to the first Place/Address at CGRAM

  /* 2- Draw Character in CGRAM        */
  /* Hint : it will be copied to DDRAM automatically */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < (sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0])); LOC_u8Iterator++)
    3942:	89 81       	ldd	r24, Y+1	; 0x01
    3944:	8f 5f       	subi	r24, 0xFF	; 255
    3946:	89 83       	std	Y+1, r24	; 0x01
    3948:	89 81       	ldd	r24, Y+1	; 0x01
    394a:	88 30       	cpi	r24, 0x08	; 8
    394c:	88 f3       	brcs	.-30     	; 0x3930 <CLCD_vSendExtraChar+0x1c>
  {
    CLCD_vSendData(CLCD_u8ExtraChar[LOC_u8Iterator]);
  }

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);
    394e:	8a 81       	ldd	r24, Y+2	; 0x02
    3950:	6b 81       	ldd	r22, Y+3	; 0x03
    3952:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    3956:	19 82       	std	Y+1, r1	; 0x01
    3958:	06 c0       	rjmp	.+12     	; 0x3966 <CLCD_vSendExtraChar+0x52>
  {
    CLCD_vSendData(LOC_u8Iterator);
    395a:	89 81       	ldd	r24, Y+1	; 0x01
    395c:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>

  /* 3- Back (AC) To DDRAM          */
  CLCD_vSetPosition(Copy_u8Row, Copy_u8Col);

  /* 4- Send Character Address */
  for (LOC_u8Iterator = 0; LOC_u8Iterator < 8; LOC_u8Iterator++)
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	8f 5f       	subi	r24, 0xFF	; 255
    3964:	89 83       	std	Y+1, r24	; 0x01
    3966:	89 81       	ldd	r24, Y+1	; 0x01
    3968:	88 30       	cpi	r24, 0x08	; 8
    396a:	b8 f3       	brcs	.-18     	; 0x395a <CLCD_vSendExtraChar+0x46>
  {
    CLCD_vSendData(LOC_u8Iterator);
  }
}
    396c:	0f 90       	pop	r0
    396e:	0f 90       	pop	r0
    3970:	0f 90       	pop	r0
    3972:	cf 91       	pop	r28
    3974:	df 91       	pop	r29
    3976:	08 95       	ret

00003978 <CLCD_voidShiftDisplayRight>:
 *                                                *------------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayRight(void)
{
    3978:	df 93       	push	r29
    397a:	cf 93       	push	r28
    397c:	cd b7       	in	r28, 0x3d	; 61
    397e:	de b7       	in	r29, 0x3e	; 62
    3980:	2e 97       	sbiw	r28, 0x0e	; 14
    3982:	0f b6       	in	r0, 0x3f	; 63
    3984:	f8 94       	cli
    3986:	de bf       	out	0x3e, r29	; 62
    3988:	0f be       	out	0x3f, r0	; 63
    398a:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_RIGHT);
    398c:	8c e1       	ldi	r24, 0x1C	; 28
    398e:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	a0 e8       	ldi	r26, 0x80	; 128
    3998:	bf e3       	ldi	r27, 0x3F	; 63
    399a:	8b 87       	std	Y+11, r24	; 0x0b
    399c:	9c 87       	std	Y+12, r25	; 0x0c
    399e:	ad 87       	std	Y+13, r26	; 0x0d
    39a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    39a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    39a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    39a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	4a ef       	ldi	r20, 0xFA	; 250
    39b0:	54 e4       	ldi	r21, 0x44	; 68
    39b2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	8f 83       	std	Y+7, r24	; 0x07
    39bc:	98 87       	std	Y+8, r25	; 0x08
    39be:	a9 87       	std	Y+9, r26	; 0x09
    39c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39c2:	6f 81       	ldd	r22, Y+7	; 0x07
    39c4:	78 85       	ldd	r23, Y+8	; 0x08
    39c6:	89 85       	ldd	r24, Y+9	; 0x09
    39c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	40 e8       	ldi	r20, 0x80	; 128
    39d0:	5f e3       	ldi	r21, 0x3F	; 63
    39d2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    39d6:	88 23       	and	r24, r24
    39d8:	2c f4       	brge	.+10     	; 0x39e4 <CLCD_voidShiftDisplayRight+0x6c>
		__ticks = 1;
    39da:	81 e0       	ldi	r24, 0x01	; 1
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	9e 83       	std	Y+6, r25	; 0x06
    39e0:	8d 83       	std	Y+5, r24	; 0x05
    39e2:	3f c0       	rjmp	.+126    	; 0x3a62 <CLCD_voidShiftDisplayRight+0xea>
	else if (__tmp > 65535)
    39e4:	6f 81       	ldd	r22, Y+7	; 0x07
    39e6:	78 85       	ldd	r23, Y+8	; 0x08
    39e8:	89 85       	ldd	r24, Y+9	; 0x09
    39ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	3f ef       	ldi	r19, 0xFF	; 255
    39f0:	4f e7       	ldi	r20, 0x7F	; 127
    39f2:	57 e4       	ldi	r21, 0x47	; 71
    39f4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    39f8:	18 16       	cp	r1, r24
    39fa:	4c f5       	brge	.+82     	; 0x3a4e <CLCD_voidShiftDisplayRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    39fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a04:	20 e0       	ldi	r18, 0x00	; 0
    3a06:	30 e0       	ldi	r19, 0x00	; 0
    3a08:	40 e2       	ldi	r20, 0x20	; 32
    3a0a:	51 e4       	ldi	r21, 0x41	; 65
    3a0c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3a10:	dc 01       	movw	r26, r24
    3a12:	cb 01       	movw	r24, r22
    3a14:	bc 01       	movw	r22, r24
    3a16:	cd 01       	movw	r24, r26
    3a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	9e 83       	std	Y+6, r25	; 0x06
    3a22:	8d 83       	std	Y+5, r24	; 0x05
    3a24:	0f c0       	rjmp	.+30     	; 0x3a44 <CLCD_voidShiftDisplayRight+0xcc>
    3a26:	88 ec       	ldi	r24, 0xC8	; 200
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	9c 83       	std	Y+4, r25	; 0x04
    3a2c:	8b 83       	std	Y+3, r24	; 0x03
    3a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a30:	9c 81       	ldd	r25, Y+4	; 0x04
    3a32:	01 97       	sbiw	r24, 0x01	; 1
    3a34:	f1 f7       	brne	.-4      	; 0x3a32 <CLCD_voidShiftDisplayRight+0xba>
    3a36:	9c 83       	std	Y+4, r25	; 0x04
    3a38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a3e:	01 97       	sbiw	r24, 0x01	; 1
    3a40:	9e 83       	std	Y+6, r25	; 0x06
    3a42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a44:	8d 81       	ldd	r24, Y+5	; 0x05
    3a46:	9e 81       	ldd	r25, Y+6	; 0x06
    3a48:	00 97       	sbiw	r24, 0x00	; 0
    3a4a:	69 f7       	brne	.-38     	; 0x3a26 <CLCD_voidShiftDisplayRight+0xae>
    3a4c:	14 c0       	rjmp	.+40     	; 0x3a76 <CLCD_voidShiftDisplayRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a50:	78 85       	ldd	r23, Y+8	; 0x08
    3a52:	89 85       	ldd	r24, Y+9	; 0x09
    3a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	cb 01       	movw	r24, r22
    3a5e:	9e 83       	std	Y+6, r25	; 0x06
    3a60:	8d 83       	std	Y+5, r24	; 0x05
    3a62:	8d 81       	ldd	r24, Y+5	; 0x05
    3a64:	9e 81       	ldd	r25, Y+6	; 0x06
    3a66:	9a 83       	std	Y+2, r25	; 0x02
    3a68:	89 83       	std	Y+1, r24	; 0x01
    3a6a:	89 81       	ldd	r24, Y+1	; 0x01
    3a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6e:	01 97       	sbiw	r24, 0x01	; 1
    3a70:	f1 f7       	brne	.-4      	; 0x3a6e <CLCD_voidShiftDisplayRight+0xf6>
    3a72:	9a 83       	std	Y+2, r25	; 0x02
    3a74:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    3a76:	2e 96       	adiw	r28, 0x0e	; 14
    3a78:	0f b6       	in	r0, 0x3f	; 63
    3a7a:	f8 94       	cli
    3a7c:	de bf       	out	0x3e, r29	; 62
    3a7e:	0f be       	out	0x3f, r0	; 63
    3a80:	cd bf       	out	0x3d, r28	; 61
    3a82:	cf 91       	pop	r28
    3a84:	df 91       	pop	r29
    3a86:	08 95       	ret

00003a88 <CLCD_voidShiftDisplayLeft>:
 *                                                *-----------------------------------------------------------------------------------*
 * Parameters : nothing
 * return     : nothing
 */
void CLCD_voidShiftDisplayLeft(void)
{
    3a88:	df 93       	push	r29
    3a8a:	cf 93       	push	r28
    3a8c:	cd b7       	in	r28, 0x3d	; 61
    3a8e:	de b7       	in	r29, 0x3e	; 62
    3a90:	2e 97       	sbiw	r28, 0x0e	; 14
    3a92:	0f b6       	in	r0, 0x3f	; 63
    3a94:	f8 94       	cli
    3a96:	de bf       	out	0x3e, r29	; 62
    3a98:	0f be       	out	0x3f, r0	; 63
    3a9a:	cd bf       	out	0x3d, r28	; 61
  CLCD_vSendCommand(CLCD_SHIFT_DISPLAY_LEFT);
    3a9c:	88 e1       	ldi	r24, 0x18	; 24
    3a9e:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	a0 e8       	ldi	r26, 0x80	; 128
    3aa8:	bf e3       	ldi	r27, 0x3F	; 63
    3aaa:	8b 87       	std	Y+11, r24	; 0x0b
    3aac:	9c 87       	std	Y+12, r25	; 0x0c
    3aae:	ad 87       	std	Y+13, r26	; 0x0d
    3ab0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	4a ef       	ldi	r20, 0xFA	; 250
    3ac0:	54 e4       	ldi	r21, 0x44	; 68
    3ac2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	8f 83       	std	Y+7, r24	; 0x07
    3acc:	98 87       	std	Y+8, r25	; 0x08
    3ace:	a9 87       	std	Y+9, r26	; 0x09
    3ad0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ad4:	78 85       	ldd	r23, Y+8	; 0x08
    3ad6:	89 85       	ldd	r24, Y+9	; 0x09
    3ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ada:	20 e0       	ldi	r18, 0x00	; 0
    3adc:	30 e0       	ldi	r19, 0x00	; 0
    3ade:	40 e8       	ldi	r20, 0x80	; 128
    3ae0:	5f e3       	ldi	r21, 0x3F	; 63
    3ae2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    3ae6:	88 23       	and	r24, r24
    3ae8:	2c f4       	brge	.+10     	; 0x3af4 <CLCD_voidShiftDisplayLeft+0x6c>
		__ticks = 1;
    3aea:	81 e0       	ldi	r24, 0x01	; 1
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	9e 83       	std	Y+6, r25	; 0x06
    3af0:	8d 83       	std	Y+5, r24	; 0x05
    3af2:	3f c0       	rjmp	.+126    	; 0x3b72 <CLCD_voidShiftDisplayLeft+0xea>
	else if (__tmp > 65535)
    3af4:	6f 81       	ldd	r22, Y+7	; 0x07
    3af6:	78 85       	ldd	r23, Y+8	; 0x08
    3af8:	89 85       	ldd	r24, Y+9	; 0x09
    3afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3afc:	20 e0       	ldi	r18, 0x00	; 0
    3afe:	3f ef       	ldi	r19, 0xFF	; 255
    3b00:	4f e7       	ldi	r20, 0x7F	; 127
    3b02:	57 e4       	ldi	r21, 0x47	; 71
    3b04:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    3b08:	18 16       	cp	r1, r24
    3b0a:	4c f5       	brge	.+82     	; 0x3b5e <CLCD_voidShiftDisplayLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	40 e2       	ldi	r20, 0x20	; 32
    3b1a:	51 e4       	ldi	r21, 0x41	; 65
    3b1c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	bc 01       	movw	r22, r24
    3b26:	cd 01       	movw	r24, r26
    3b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	cb 01       	movw	r24, r22
    3b30:	9e 83       	std	Y+6, r25	; 0x06
    3b32:	8d 83       	std	Y+5, r24	; 0x05
    3b34:	0f c0       	rjmp	.+30     	; 0x3b54 <CLCD_voidShiftDisplayLeft+0xcc>
    3b36:	88 ec       	ldi	r24, 0xC8	; 200
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	9c 83       	std	Y+4, r25	; 0x04
    3b3c:	8b 83       	std	Y+3, r24	; 0x03
    3b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b40:	9c 81       	ldd	r25, Y+4	; 0x04
    3b42:	01 97       	sbiw	r24, 0x01	; 1
    3b44:	f1 f7       	brne	.-4      	; 0x3b42 <CLCD_voidShiftDisplayLeft+0xba>
    3b46:	9c 83       	std	Y+4, r25	; 0x04
    3b48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b4e:	01 97       	sbiw	r24, 0x01	; 1
    3b50:	9e 83       	std	Y+6, r25	; 0x06
    3b52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b54:	8d 81       	ldd	r24, Y+5	; 0x05
    3b56:	9e 81       	ldd	r25, Y+6	; 0x06
    3b58:	00 97       	sbiw	r24, 0x00	; 0
    3b5a:	69 f7       	brne	.-38     	; 0x3b36 <CLCD_voidShiftDisplayLeft+0xae>
    3b5c:	14 c0       	rjmp	.+40     	; 0x3b86 <CLCD_voidShiftDisplayLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b60:	78 85       	ldd	r23, Y+8	; 0x08
    3b62:	89 85       	ldd	r24, Y+9	; 0x09
    3b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	9e 83       	std	Y+6, r25	; 0x06
    3b70:	8d 83       	std	Y+5, r24	; 0x05
    3b72:	8d 81       	ldd	r24, Y+5	; 0x05
    3b74:	9e 81       	ldd	r25, Y+6	; 0x06
    3b76:	9a 83       	std	Y+2, r25	; 0x02
    3b78:	89 83       	std	Y+1, r24	; 0x01
    3b7a:	89 81       	ldd	r24, Y+1	; 0x01
    3b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b7e:	01 97       	sbiw	r24, 0x01	; 1
    3b80:	f1 f7       	brne	.-4      	; 0x3b7e <CLCD_voidShiftDisplayLeft+0xf6>
    3b82:	9a 83       	std	Y+2, r25	; 0x02
    3b84:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
}
    3b86:	2e 96       	adiw	r28, 0x0e	; 14
    3b88:	0f b6       	in	r0, 0x3f	; 63
    3b8a:	f8 94       	cli
    3b8c:	de bf       	out	0x3e, r29	; 62
    3b8e:	0f be       	out	0x3f, r0	; 63
    3b90:	cd bf       	out	0x3d, r28	; 61
    3b92:	cf 91       	pop	r28
    3b94:	df 91       	pop	r29
    3b96:	08 95       	ret

00003b98 <Get_User_Base_Address>:
volatile u8 System_Status = 0;
volatile u8 Security_Level = SECURITY_LEVEL_MEDIUM;

/* Helper functions for EEPROM access */
static u16 Get_User_Base_Address(u8 user_index)
{
    3b98:	df 93       	push	r29
    3b9a:	cf 93       	push	r28
    3b9c:	0f 92       	push	r0
    3b9e:	cd b7       	in	r28, 0x3d	; 61
    3ba0:	de b7       	in	r29, 0x3e	; 62
    3ba2:	89 83       	std	Y+1, r24	; 0x01
  return EEPROM_USER_START + (user_index * USER_BLOCK_SIZE);
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
    3ba6:	48 2f       	mov	r20, r24
    3ba8:	50 e0       	ldi	r21, 0x00	; 0
    3baa:	ca 01       	movw	r24, r20
    3bac:	9c 01       	movw	r18, r24
    3bae:	22 0f       	add	r18, r18
    3bb0:	33 1f       	adc	r19, r19
    3bb2:	24 0f       	add	r18, r20
    3bb4:	35 1f       	adc	r19, r21
    3bb6:	c9 01       	movw	r24, r18
    3bb8:	88 0f       	add	r24, r24
    3bba:	99 1f       	adc	r25, r25
    3bbc:	88 0f       	add	r24, r24
    3bbe:	99 1f       	adc	r25, r25
    3bc0:	88 0f       	add	r24, r24
    3bc2:	99 1f       	adc	r25, r25
    3bc4:	82 1b       	sub	r24, r18
    3bc6:	93 0b       	sbc	r25, r19
    3bc8:	88 0f       	add	r24, r24
    3bca:	99 1f       	adc	r25, r25
    3bcc:	80 96       	adiw	r24, 0x20	; 32
}
    3bce:	0f 90       	pop	r0
    3bd0:	cf 91       	pop	r28
    3bd2:	df 91       	pop	r29
    3bd4:	08 95       	ret

00003bd6 <Read_Username>:

static void Read_Username(u8 user_index, volatile u8 *username, volatile u8 *length)
{
    3bd6:	0f 93       	push	r16
    3bd8:	1f 93       	push	r17
    3bda:	df 93       	push	r29
    3bdc:	cf 93       	push	r28
    3bde:	cd b7       	in	r28, 0x3d	; 61
    3be0:	de b7       	in	r29, 0x3e	; 62
    3be2:	28 97       	sbiw	r28, 0x08	; 8
    3be4:	0f b6       	in	r0, 0x3f	; 63
    3be6:	f8 94       	cli
    3be8:	de bf       	out	0x3e, r29	; 62
    3bea:	0f be       	out	0x3f, r0	; 63
    3bec:	cd bf       	out	0x3d, r28	; 61
    3bee:	8c 83       	std	Y+4, r24	; 0x04
    3bf0:	7e 83       	std	Y+6, r23	; 0x06
    3bf2:	6d 83       	std	Y+5, r22	; 0x05
    3bf4:	58 87       	std	Y+8, r21	; 0x08
    3bf6:	4f 83       	std	Y+7, r20	; 0x07
  u16 base_addr = Get_User_Base_Address(user_index);
    3bf8:	8c 81       	ldd	r24, Y+4	; 0x04
    3bfa:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <Get_User_Base_Address>
    3bfe:	9b 83       	std	Y+3, r25	; 0x03
    3c00:	8a 83       	std	Y+2, r24	; 0x02
  *length = EEPROM_vRead(base_addr + USER_NAME_LENGTH_OFFSET);
    3c02:	8a 81       	ldd	r24, Y+2	; 0x02
    3c04:	9b 81       	ldd	r25, Y+3	; 0x03
    3c06:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    3c0a:	ef 81       	ldd	r30, Y+7	; 0x07
    3c0c:	f8 85       	ldd	r31, Y+8	; 0x08
    3c0e:	80 83       	st	Z, r24
  for (u8 i = 0; i < *length; i++)
    3c10:	19 82       	std	Y+1, r1	; 0x01
    3c12:	17 c0       	rjmp	.+46     	; 0x3c42 <Read_Username+0x6c>
  {
    username[i] = EEPROM_vRead(base_addr + USER_NAME_START_OFFSET + i);
    3c14:	89 81       	ldd	r24, Y+1	; 0x01
    3c16:	28 2f       	mov	r18, r24
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c1e:	8c 01       	movw	r16, r24
    3c20:	02 0f       	add	r16, r18
    3c22:	13 1f       	adc	r17, r19
    3c24:	89 81       	ldd	r24, Y+1	; 0x01
    3c26:	28 2f       	mov	r18, r24
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c2e:	82 0f       	add	r24, r18
    3c30:	93 1f       	adc	r25, r19
    3c32:	01 96       	adiw	r24, 0x01	; 1
    3c34:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    3c38:	f8 01       	movw	r30, r16
    3c3a:	80 83       	st	Z, r24

static void Read_Username(u8 user_index, volatile u8 *username, volatile u8 *length)
{
  u16 base_addr = Get_User_Base_Address(user_index);
  *length = EEPROM_vRead(base_addr + USER_NAME_LENGTH_OFFSET);
  for (u8 i = 0; i < *length; i++)
    3c3c:	89 81       	ldd	r24, Y+1	; 0x01
    3c3e:	8f 5f       	subi	r24, 0xFF	; 255
    3c40:	89 83       	std	Y+1, r24	; 0x01
    3c42:	ef 81       	ldd	r30, Y+7	; 0x07
    3c44:	f8 85       	ldd	r31, Y+8	; 0x08
    3c46:	90 81       	ld	r25, Z
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
    3c4a:	89 17       	cp	r24, r25
    3c4c:	18 f3       	brcs	.-58     	; 0x3c14 <Read_Username+0x3e>
  {
    username[i] = EEPROM_vRead(base_addr + USER_NAME_START_OFFSET + i);
  }
  username[*length] = '\0';
    3c4e:	ef 81       	ldd	r30, Y+7	; 0x07
    3c50:	f8 85       	ldd	r31, Y+8	; 0x08
    3c52:	80 81       	ld	r24, Z
    3c54:	28 2f       	mov	r18, r24
    3c56:	30 e0       	ldi	r19, 0x00	; 0
    3c58:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	e2 0f       	add	r30, r18
    3c60:	f3 1f       	adc	r31, r19
    3c62:	10 82       	st	Z, r1
}
    3c64:	28 96       	adiw	r28, 0x08	; 8
    3c66:	0f b6       	in	r0, 0x3f	; 63
    3c68:	f8 94       	cli
    3c6a:	de bf       	out	0x3e, r29	; 62
    3c6c:	0f be       	out	0x3f, r0	; 63
    3c6e:	cd bf       	out	0x3d, r28	; 61
    3c70:	cf 91       	pop	r28
    3c72:	df 91       	pop	r29
    3c74:	1f 91       	pop	r17
    3c76:	0f 91       	pop	r16
    3c78:	08 95       	ret

00003c7a <Write_Username>:

static void Write_Username(u8 user_index, u8 *username, u8 length)
{
    3c7a:	df 93       	push	r29
    3c7c:	cf 93       	push	r28
    3c7e:	cd b7       	in	r28, 0x3d	; 61
    3c80:	de b7       	in	r29, 0x3e	; 62
    3c82:	27 97       	sbiw	r28, 0x07	; 7
    3c84:	0f b6       	in	r0, 0x3f	; 63
    3c86:	f8 94       	cli
    3c88:	de bf       	out	0x3e, r29	; 62
    3c8a:	0f be       	out	0x3f, r0	; 63
    3c8c:	cd bf       	out	0x3d, r28	; 61
    3c8e:	8c 83       	std	Y+4, r24	; 0x04
    3c90:	7e 83       	std	Y+6, r23	; 0x06
    3c92:	6d 83       	std	Y+5, r22	; 0x05
    3c94:	4f 83       	std	Y+7, r20	; 0x07
  u16 base_addr = Get_User_Base_Address(user_index);
    3c96:	8c 81       	ldd	r24, Y+4	; 0x04
    3c98:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <Get_User_Base_Address>
    3c9c:	9b 83       	std	Y+3, r25	; 0x03
    3c9e:	8a 83       	std	Y+2, r24	; 0x02
  EEPROM_vWrite(base_addr + USER_NAME_LENGTH_OFFSET, length);
    3ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca6:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
  for (u8 i = 0; i < length; i++)
    3caa:	19 82       	std	Y+1, r1	; 0x01
    3cac:	1a c0       	rjmp	.+52     	; 0x3ce2 <Write_Username+0x68>
  {
    EEPROM_vWrite(base_addr + USER_NAME_START_OFFSET + i, username[i]);
    3cae:	89 81       	ldd	r24, Y+1	; 0x01
    3cb0:	28 2f       	mov	r18, r24
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    3cb8:	82 0f       	add	r24, r18
    3cba:	93 1f       	adc	r25, r19
    3cbc:	ac 01       	movw	r20, r24
    3cbe:	4f 5f       	subi	r20, 0xFF	; 255
    3cc0:	5f 4f       	sbci	r21, 0xFF	; 255
    3cc2:	89 81       	ldd	r24, Y+1	; 0x01
    3cc4:	28 2f       	mov	r18, r24
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cca:	9e 81       	ldd	r25, Y+6	; 0x06
    3ccc:	fc 01       	movw	r30, r24
    3cce:	e2 0f       	add	r30, r18
    3cd0:	f3 1f       	adc	r31, r19
    3cd2:	20 81       	ld	r18, Z
    3cd4:	ca 01       	movw	r24, r20
    3cd6:	62 2f       	mov	r22, r18
    3cd8:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>

static void Write_Username(u8 user_index, u8 *username, u8 length)
{
  u16 base_addr = Get_User_Base_Address(user_index);
  EEPROM_vWrite(base_addr + USER_NAME_LENGTH_OFFSET, length);
  for (u8 i = 0; i < length; i++)
    3cdc:	89 81       	ldd	r24, Y+1	; 0x01
    3cde:	8f 5f       	subi	r24, 0xFF	; 255
    3ce0:	89 83       	std	Y+1, r24	; 0x01
    3ce2:	99 81       	ldd	r25, Y+1	; 0x01
    3ce4:	8f 81       	ldd	r24, Y+7	; 0x07
    3ce6:	98 17       	cp	r25, r24
    3ce8:	10 f3       	brcs	.-60     	; 0x3cae <Write_Username+0x34>
  {
    EEPROM_vWrite(base_addr + USER_NAME_START_OFFSET + i, username[i]);
  }
}
    3cea:	27 96       	adiw	r28, 0x07	; 7
    3cec:	0f b6       	in	r0, 0x3f	; 63
    3cee:	f8 94       	cli
    3cf0:	de bf       	out	0x3e, r29	; 62
    3cf2:	0f be       	out	0x3f, r0	; 63
    3cf4:	cd bf       	out	0x3d, r28	; 61
    3cf6:	cf 91       	pop	r28
    3cf8:	df 91       	pop	r29
    3cfa:	08 95       	ret

00003cfc <Read_Password>:

static void Read_Password(u8 user_index, u8 *password, u8 *length)
{
    3cfc:	0f 93       	push	r16
    3cfe:	1f 93       	push	r17
    3d00:	df 93       	push	r29
    3d02:	cf 93       	push	r28
    3d04:	cd b7       	in	r28, 0x3d	; 61
    3d06:	de b7       	in	r29, 0x3e	; 62
    3d08:	28 97       	sbiw	r28, 0x08	; 8
    3d0a:	0f b6       	in	r0, 0x3f	; 63
    3d0c:	f8 94       	cli
    3d0e:	de bf       	out	0x3e, r29	; 62
    3d10:	0f be       	out	0x3f, r0	; 63
    3d12:	cd bf       	out	0x3d, r28	; 61
    3d14:	8c 83       	std	Y+4, r24	; 0x04
    3d16:	7e 83       	std	Y+6, r23	; 0x06
    3d18:	6d 83       	std	Y+5, r22	; 0x05
    3d1a:	58 87       	std	Y+8, r21	; 0x08
    3d1c:	4f 83       	std	Y+7, r20	; 0x07
  u16 base_addr = Get_User_Base_Address(user_index);
    3d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d20:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <Get_User_Base_Address>
    3d24:	9b 83       	std	Y+3, r25	; 0x03
    3d26:	8a 83       	std	Y+2, r24	; 0x02
  *length = EEPROM_vRead(base_addr + USER_PASS_LENGTH_OFFSET);
    3d28:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d2c:	45 96       	adiw	r24, 0x15	; 21
    3d2e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    3d32:	ef 81       	ldd	r30, Y+7	; 0x07
    3d34:	f8 85       	ldd	r31, Y+8	; 0x08
    3d36:	80 83       	st	Z, r24
  for (u8 i = 0; i < *length; i++)
    3d38:	19 82       	std	Y+1, r1	; 0x01
    3d3a:	17 c0       	rjmp	.+46     	; 0x3d6a <Read_Password+0x6e>
  {
    password[i] = EEPROM_vRead(base_addr + USER_PASS_START_OFFSET + i);
    3d3c:	89 81       	ldd	r24, Y+1	; 0x01
    3d3e:	28 2f       	mov	r18, r24
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	8d 81       	ldd	r24, Y+5	; 0x05
    3d44:	9e 81       	ldd	r25, Y+6	; 0x06
    3d46:	8c 01       	movw	r16, r24
    3d48:	02 0f       	add	r16, r18
    3d4a:	13 1f       	adc	r17, r19
    3d4c:	89 81       	ldd	r24, Y+1	; 0x01
    3d4e:	28 2f       	mov	r18, r24
    3d50:	30 e0       	ldi	r19, 0x00	; 0
    3d52:	8a 81       	ldd	r24, Y+2	; 0x02
    3d54:	9b 81       	ldd	r25, Y+3	; 0x03
    3d56:	82 0f       	add	r24, r18
    3d58:	93 1f       	adc	r25, r19
    3d5a:	46 96       	adiw	r24, 0x16	; 22
    3d5c:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    3d60:	f8 01       	movw	r30, r16
    3d62:	80 83       	st	Z, r24

static void Read_Password(u8 user_index, u8 *password, u8 *length)
{
  u16 base_addr = Get_User_Base_Address(user_index);
  *length = EEPROM_vRead(base_addr + USER_PASS_LENGTH_OFFSET);
  for (u8 i = 0; i < *length; i++)
    3d64:	89 81       	ldd	r24, Y+1	; 0x01
    3d66:	8f 5f       	subi	r24, 0xFF	; 255
    3d68:	89 83       	std	Y+1, r24	; 0x01
    3d6a:	ef 81       	ldd	r30, Y+7	; 0x07
    3d6c:	f8 85       	ldd	r31, Y+8	; 0x08
    3d6e:	90 81       	ld	r25, Z
    3d70:	89 81       	ldd	r24, Y+1	; 0x01
    3d72:	89 17       	cp	r24, r25
    3d74:	18 f3       	brcs	.-58     	; 0x3d3c <Read_Password+0x40>
  {
    password[i] = EEPROM_vRead(base_addr + USER_PASS_START_OFFSET + i);
  }
  password[*length] = '\0';
    3d76:	ef 81       	ldd	r30, Y+7	; 0x07
    3d78:	f8 85       	ldd	r31, Y+8	; 0x08
    3d7a:	80 81       	ld	r24, Z
    3d7c:	28 2f       	mov	r18, r24
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	8d 81       	ldd	r24, Y+5	; 0x05
    3d82:	9e 81       	ldd	r25, Y+6	; 0x06
    3d84:	fc 01       	movw	r30, r24
    3d86:	e2 0f       	add	r30, r18
    3d88:	f3 1f       	adc	r31, r19
    3d8a:	10 82       	st	Z, r1
}
    3d8c:	28 96       	adiw	r28, 0x08	; 8
    3d8e:	0f b6       	in	r0, 0x3f	; 63
    3d90:	f8 94       	cli
    3d92:	de bf       	out	0x3e, r29	; 62
    3d94:	0f be       	out	0x3f, r0	; 63
    3d96:	cd bf       	out	0x3d, r28	; 61
    3d98:	cf 91       	pop	r28
    3d9a:	df 91       	pop	r29
    3d9c:	1f 91       	pop	r17
    3d9e:	0f 91       	pop	r16
    3da0:	08 95       	ret

00003da2 <Write_Password>:

static void Write_Password(u8 user_index, u8 *password, u8 length)
{
    3da2:	df 93       	push	r29
    3da4:	cf 93       	push	r28
    3da6:	cd b7       	in	r28, 0x3d	; 61
    3da8:	de b7       	in	r29, 0x3e	; 62
    3daa:	27 97       	sbiw	r28, 0x07	; 7
    3dac:	0f b6       	in	r0, 0x3f	; 63
    3dae:	f8 94       	cli
    3db0:	de bf       	out	0x3e, r29	; 62
    3db2:	0f be       	out	0x3f, r0	; 63
    3db4:	cd bf       	out	0x3d, r28	; 61
    3db6:	8c 83       	std	Y+4, r24	; 0x04
    3db8:	7e 83       	std	Y+6, r23	; 0x06
    3dba:	6d 83       	std	Y+5, r22	; 0x05
    3dbc:	4f 83       	std	Y+7, r20	; 0x07
  u16 base_addr = Get_User_Base_Address(user_index);
    3dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc0:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <Get_User_Base_Address>
    3dc4:	9b 83       	std	Y+3, r25	; 0x03
    3dc6:	8a 83       	std	Y+2, r24	; 0x02
  EEPROM_vWrite(base_addr + USER_PASS_LENGTH_OFFSET, length);
    3dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dca:	9b 81       	ldd	r25, Y+3	; 0x03
    3dcc:	45 96       	adiw	r24, 0x15	; 21
    3dce:	6f 81       	ldd	r22, Y+7	; 0x07
    3dd0:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
  for (u8 i = 0; i < length; i++)
    3dd4:	19 82       	std	Y+1, r1	; 0x01
    3dd6:	1a c0       	rjmp	.+52     	; 0x3e0c <Write_Password+0x6a>
  {
    EEPROM_vWrite(base_addr + USER_PASS_START_OFFSET + i, password[i]);
    3dd8:	89 81       	ldd	r24, Y+1	; 0x01
    3dda:	28 2f       	mov	r18, r24
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	8a 81       	ldd	r24, Y+2	; 0x02
    3de0:	9b 81       	ldd	r25, Y+3	; 0x03
    3de2:	82 0f       	add	r24, r18
    3de4:	93 1f       	adc	r25, r19
    3de6:	ac 01       	movw	r20, r24
    3de8:	4a 5e       	subi	r20, 0xEA	; 234
    3dea:	5f 4f       	sbci	r21, 0xFF	; 255
    3dec:	89 81       	ldd	r24, Y+1	; 0x01
    3dee:	28 2f       	mov	r18, r24
    3df0:	30 e0       	ldi	r19, 0x00	; 0
    3df2:	8d 81       	ldd	r24, Y+5	; 0x05
    3df4:	9e 81       	ldd	r25, Y+6	; 0x06
    3df6:	fc 01       	movw	r30, r24
    3df8:	e2 0f       	add	r30, r18
    3dfa:	f3 1f       	adc	r31, r19
    3dfc:	20 81       	ld	r18, Z
    3dfe:	ca 01       	movw	r24, r20
    3e00:	62 2f       	mov	r22, r18
    3e02:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>

static void Write_Password(u8 user_index, u8 *password, u8 length)
{
  u16 base_addr = Get_User_Base_Address(user_index);
  EEPROM_vWrite(base_addr + USER_PASS_LENGTH_OFFSET, length);
  for (u8 i = 0; i < length; i++)
    3e06:	89 81       	ldd	r24, Y+1	; 0x01
    3e08:	8f 5f       	subi	r24, 0xFF	; 255
    3e0a:	89 83       	std	Y+1, r24	; 0x01
    3e0c:	99 81       	ldd	r25, Y+1	; 0x01
    3e0e:	8f 81       	ldd	r24, Y+7	; 0x07
    3e10:	98 17       	cp	r25, r24
    3e12:	10 f3       	brcs	.-60     	; 0x3dd8 <Write_Password+0x36>
  {
    EEPROM_vWrite(base_addr + USER_PASS_START_OFFSET + i, password[i]);
  }
}
    3e14:	27 96       	adiw	r28, 0x07	; 7
    3e16:	0f b6       	in	r0, 0x3f	; 63
    3e18:	f8 94       	cli
    3e1a:	de bf       	out	0x3e, r29	; 62
    3e1c:	0f be       	out	0x3f, r0	; 63
    3e1e:	cd bf       	out	0x3d, r28	; 61
    3e20:	cf 91       	pop	r28
    3e22:	df 91       	pop	r29
    3e24:	08 95       	ret

00003e26 <Is_Password_Valid>:

/* Password validation */
u8 Is_Password_Valid(u8 *password, u8 length)
{
    3e26:	df 93       	push	r29
    3e28:	cf 93       	push	r28
    3e2a:	cd b7       	in	r28, 0x3d	; 61
    3e2c:	de b7       	in	r29, 0x3e	; 62
    3e2e:	29 97       	sbiw	r28, 0x09	; 9
    3e30:	0f b6       	in	r0, 0x3f	; 63
    3e32:	f8 94       	cli
    3e34:	de bf       	out	0x3e, r29	; 62
    3e36:	0f be       	out	0x3f, r0	; 63
    3e38:	cd bf       	out	0x3d, r28	; 61
    3e3a:	9f 83       	std	Y+7, r25	; 0x07
    3e3c:	8e 83       	std	Y+6, r24	; 0x06
    3e3e:	68 87       	std	Y+8, r22	; 0x08
  if (length < PASSWORD_MIN_LENGTH)
    3e40:	88 85       	ldd	r24, Y+8	; 0x08
    3e42:	88 30       	cpi	r24, 0x08	; 8
    3e44:	10 f4       	brcc	.+4      	; 0x3e4a <Is_Password_Valid+0x24>
    return 0;
    3e46:	19 86       	std	Y+9, r1	; 0x09
    3e48:	71 c0       	rjmp	.+226    	; 0x3f2c <Is_Password_Valid+0x106>

  u8 has_upper = 0, has_lower = 0, has_number = 0, has_special = 0;
    3e4a:	1d 82       	std	Y+5, r1	; 0x05
    3e4c:	1c 82       	std	Y+4, r1	; 0x04
    3e4e:	1b 82       	std	Y+3, r1	; 0x03
    3e50:	1a 82       	std	Y+2, r1	; 0x02

  for (u8 i = 0; i < length; i++)
    3e52:	19 82       	std	Y+1, r1	; 0x01
    3e54:	50 c0       	rjmp	.+160    	; 0x3ef6 <Is_Password_Valid+0xd0>
  {
    if (password[i] >= 'A' && password[i] <= 'Z')
    3e56:	89 81       	ldd	r24, Y+1	; 0x01
    3e58:	28 2f       	mov	r18, r24
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	8e 81       	ldd	r24, Y+6	; 0x06
    3e5e:	9f 81       	ldd	r25, Y+7	; 0x07
    3e60:	fc 01       	movw	r30, r24
    3e62:	e2 0f       	add	r30, r18
    3e64:	f3 1f       	adc	r31, r19
    3e66:	80 81       	ld	r24, Z
    3e68:	81 34       	cpi	r24, 0x41	; 65
    3e6a:	70 f0       	brcs	.+28     	; 0x3e88 <Is_Password_Valid+0x62>
    3e6c:	89 81       	ldd	r24, Y+1	; 0x01
    3e6e:	28 2f       	mov	r18, r24
    3e70:	30 e0       	ldi	r19, 0x00	; 0
    3e72:	8e 81       	ldd	r24, Y+6	; 0x06
    3e74:	9f 81       	ldd	r25, Y+7	; 0x07
    3e76:	fc 01       	movw	r30, r24
    3e78:	e2 0f       	add	r30, r18
    3e7a:	f3 1f       	adc	r31, r19
    3e7c:	80 81       	ld	r24, Z
    3e7e:	8b 35       	cpi	r24, 0x5B	; 91
    3e80:	18 f4       	brcc	.+6      	; 0x3e88 <Is_Password_Valid+0x62>
      has_upper = 1;
    3e82:	81 e0       	ldi	r24, 0x01	; 1
    3e84:	8d 83       	std	Y+5, r24	; 0x05
    3e86:	34 c0       	rjmp	.+104    	; 0x3ef0 <Is_Password_Valid+0xca>
    else if (password[i] >= 'a' && password[i] <= 'z')
    3e88:	89 81       	ldd	r24, Y+1	; 0x01
    3e8a:	28 2f       	mov	r18, r24
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	8e 81       	ldd	r24, Y+6	; 0x06
    3e90:	9f 81       	ldd	r25, Y+7	; 0x07
    3e92:	fc 01       	movw	r30, r24
    3e94:	e2 0f       	add	r30, r18
    3e96:	f3 1f       	adc	r31, r19
    3e98:	80 81       	ld	r24, Z
    3e9a:	81 36       	cpi	r24, 0x61	; 97
    3e9c:	70 f0       	brcs	.+28     	; 0x3eba <Is_Password_Valid+0x94>
    3e9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ea0:	28 2f       	mov	r18, r24
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ea6:	9f 81       	ldd	r25, Y+7	; 0x07
    3ea8:	fc 01       	movw	r30, r24
    3eaa:	e2 0f       	add	r30, r18
    3eac:	f3 1f       	adc	r31, r19
    3eae:	80 81       	ld	r24, Z
    3eb0:	8b 37       	cpi	r24, 0x7B	; 123
    3eb2:	18 f4       	brcc	.+6      	; 0x3eba <Is_Password_Valid+0x94>
      has_lower = 1;
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
    3eb6:	8c 83       	std	Y+4, r24	; 0x04
    3eb8:	1b c0       	rjmp	.+54     	; 0x3ef0 <Is_Password_Valid+0xca>
    else if (password[i] >= '0' && password[i] <= '9')
    3eba:	89 81       	ldd	r24, Y+1	; 0x01
    3ebc:	28 2f       	mov	r18, r24
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ec2:	9f 81       	ldd	r25, Y+7	; 0x07
    3ec4:	fc 01       	movw	r30, r24
    3ec6:	e2 0f       	add	r30, r18
    3ec8:	f3 1f       	adc	r31, r19
    3eca:	80 81       	ld	r24, Z
    3ecc:	80 33       	cpi	r24, 0x30	; 48
    3ece:	70 f0       	brcs	.+28     	; 0x3eec <Is_Password_Valid+0xc6>
    3ed0:	89 81       	ldd	r24, Y+1	; 0x01
    3ed2:	28 2f       	mov	r18, r24
    3ed4:	30 e0       	ldi	r19, 0x00	; 0
    3ed6:	8e 81       	ldd	r24, Y+6	; 0x06
    3ed8:	9f 81       	ldd	r25, Y+7	; 0x07
    3eda:	fc 01       	movw	r30, r24
    3edc:	e2 0f       	add	r30, r18
    3ede:	f3 1f       	adc	r31, r19
    3ee0:	80 81       	ld	r24, Z
    3ee2:	8a 33       	cpi	r24, 0x3A	; 58
    3ee4:	18 f4       	brcc	.+6      	; 0x3eec <Is_Password_Valid+0xc6>
      has_number = 1;
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
    3ee8:	8b 83       	std	Y+3, r24	; 0x03
    3eea:	02 c0       	rjmp	.+4      	; 0x3ef0 <Is_Password_Valid+0xca>
    else
      has_special = 1;
    3eec:	81 e0       	ldi	r24, 0x01	; 1
    3eee:	8a 83       	std	Y+2, r24	; 0x02
  if (length < PASSWORD_MIN_LENGTH)
    return 0;

  u8 has_upper = 0, has_lower = 0, has_number = 0, has_special = 0;

  for (u8 i = 0; i < length; i++)
    3ef0:	89 81       	ldd	r24, Y+1	; 0x01
    3ef2:	8f 5f       	subi	r24, 0xFF	; 255
    3ef4:	89 83       	std	Y+1, r24	; 0x01
    3ef6:	99 81       	ldd	r25, Y+1	; 0x01
    3ef8:	88 85       	ldd	r24, Y+8	; 0x08
    3efa:	98 17       	cp	r25, r24
    3efc:	08 f4       	brcc	.+2      	; 0x3f00 <Is_Password_Valid+0xda>
    3efe:	ab cf       	rjmp	.-170    	; 0x3e56 <Is_Password_Valid+0x30>
      has_number = 1;
    else
      has_special = 1;
  }

  if (PASS_NEED_UPPER && !has_upper)
    3f00:	8d 81       	ldd	r24, Y+5	; 0x05
    3f02:	88 23       	and	r24, r24
    3f04:	11 f4       	brne	.+4      	; 0x3f0a <Is_Password_Valid+0xe4>
    return 0;
    3f06:	19 86       	std	Y+9, r1	; 0x09
    3f08:	11 c0       	rjmp	.+34     	; 0x3f2c <Is_Password_Valid+0x106>
  if (PASS_NEED_LOWER && !has_lower)
    3f0a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f0c:	88 23       	and	r24, r24
    3f0e:	11 f4       	brne	.+4      	; 0x3f14 <Is_Password_Valid+0xee>
    return 0;
    3f10:	19 86       	std	Y+9, r1	; 0x09
    3f12:	0c c0       	rjmp	.+24     	; 0x3f2c <Is_Password_Valid+0x106>
  if (PASS_NEED_NUMBER && !has_number)
    3f14:	8b 81       	ldd	r24, Y+3	; 0x03
    3f16:	88 23       	and	r24, r24
    3f18:	11 f4       	brne	.+4      	; 0x3f1e <Is_Password_Valid+0xf8>
    return 0;
    3f1a:	19 86       	std	Y+9, r1	; 0x09
    3f1c:	07 c0       	rjmp	.+14     	; 0x3f2c <Is_Password_Valid+0x106>
  if (PASS_NEED_SPECIAL && !has_special)
    3f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f20:	88 23       	and	r24, r24
    3f22:	11 f4       	brne	.+4      	; 0x3f28 <Is_Password_Valid+0x102>
    return 0;
    3f24:	19 86       	std	Y+9, r1	; 0x09
    3f26:	02 c0       	rjmp	.+4      	; 0x3f2c <Is_Password_Valid+0x106>

  return 1;
    3f28:	81 e0       	ldi	r24, 0x01	; 1
    3f2a:	89 87       	std	Y+9, r24	; 0x09
    3f2c:	89 85       	ldd	r24, Y+9	; 0x09
}
    3f2e:	29 96       	adiw	r28, 0x09	; 9
    3f30:	0f b6       	in	r0, 0x3f	; 63
    3f32:	f8 94       	cli
    3f34:	de bf       	out	0x3e, r29	; 62
    3f36:	0f be       	out	0x3f, r0	; 63
    3f38:	cd bf       	out	0x3d, r28	; 61
    3f3a:	cf 91       	pop	r28
    3f3c:	df 91       	pop	r29
    3f3e:	08 95       	ret

00003f40 <Is_Username_Exists>:

/* Username validation */
u8 Is_Username_Exists(u8 *username, u8 length)
{
    3f40:	df 93       	push	r29
    3f42:	cf 93       	push	r28
    3f44:	cd b7       	in	r28, 0x3d	; 61
    3f46:	de b7       	in	r29, 0x3e	; 62
    3f48:	6d 97       	sbiw	r28, 0x1d	; 29
    3f4a:	0f b6       	in	r0, 0x3f	; 63
    3f4c:	f8 94       	cli
    3f4e:	de bf       	out	0x3e, r29	; 62
    3f50:	0f be       	out	0x3f, r0	; 63
    3f52:	cd bf       	out	0x3d, r28	; 61
    3f54:	9b 8f       	std	Y+27, r25	; 0x1b
    3f56:	8a 8f       	std	Y+26, r24	; 0x1a
    3f58:	6c 8f       	std	Y+28, r22	; 0x1c
  u8 stored_username[21];
  u8 stored_length;

  for (u8 i = 0; i < User_Count; i++)
    3f5a:	1b 82       	std	Y+3, r1	; 0x03
    3f5c:	3d c0       	rjmp	.+122    	; 0x3fd8 <Is_Username_Exists+0x98>
  {
    if (i == Current_User)
    3f5e:	90 91 65 05 	lds	r25, 0x0565
    3f62:	8b 81       	ldd	r24, Y+3	; 0x03
    3f64:	89 17       	cp	r24, r25
    3f66:	a9 f1       	breq	.+106    	; 0x3fd2 <Is_Username_Exists+0x92>
      continue; // Skip current user when changing username

    Read_Username(i, stored_username, &stored_length);
    3f68:	9e 01       	movw	r18, r28
    3f6a:	2c 5f       	subi	r18, 0xFC	; 252
    3f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f6e:	ae 01       	movw	r20, r28
    3f70:	47 5e       	subi	r20, 0xE7	; 231
    3f72:	5f 4f       	sbci	r21, 0xFF	; 255
    3f74:	8b 81       	ldd	r24, Y+3	; 0x03
    3f76:	b9 01       	movw	r22, r18
    3f78:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <Read_Username>
    if (length == stored_length)
    3f7c:	99 8d       	ldd	r25, Y+25	; 0x19
    3f7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f80:	89 17       	cp	r24, r25
    3f82:	39 f5       	brne	.+78     	; 0x3fd2 <Is_Username_Exists+0x92>
    {
      u8 match = 1;
    3f84:	81 e0       	ldi	r24, 0x01	; 1
    3f86:	8a 83       	std	Y+2, r24	; 0x02
      for (u8 j = 0; j < length; j++)
    3f88:	19 82       	std	Y+1, r1	; 0x01
    3f8a:	19 c0       	rjmp	.+50     	; 0x3fbe <Is_Username_Exists+0x7e>
      {
        if (username[j] != stored_username[j])
    3f8c:	89 81       	ldd	r24, Y+1	; 0x01
    3f8e:	28 2f       	mov	r18, r24
    3f90:	30 e0       	ldi	r19, 0x00	; 0
    3f92:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3f94:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3f96:	fc 01       	movw	r30, r24
    3f98:	e2 0f       	add	r30, r18
    3f9a:	f3 1f       	adc	r31, r19
    3f9c:	40 81       	ld	r20, Z
    3f9e:	89 81       	ldd	r24, Y+1	; 0x01
    3fa0:	28 2f       	mov	r18, r24
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	ce 01       	movw	r24, r28
    3fa6:	04 96       	adiw	r24, 0x04	; 4
    3fa8:	fc 01       	movw	r30, r24
    3faa:	e2 0f       	add	r30, r18
    3fac:	f3 1f       	adc	r31, r19
    3fae:	80 81       	ld	r24, Z
    3fb0:	48 17       	cp	r20, r24
    3fb2:	11 f0       	breq	.+4      	; 0x3fb8 <Is_Username_Exists+0x78>
        {
          match = 0;
    3fb4:	1a 82       	std	Y+2, r1	; 0x02
    3fb6:	07 c0       	rjmp	.+14     	; 0x3fc6 <Is_Username_Exists+0x86>

    Read_Username(i, stored_username, &stored_length);
    if (length == stored_length)
    {
      u8 match = 1;
      for (u8 j = 0; j < length; j++)
    3fb8:	89 81       	ldd	r24, Y+1	; 0x01
    3fba:	8f 5f       	subi	r24, 0xFF	; 255
    3fbc:	89 83       	std	Y+1, r24	; 0x01
    3fbe:	99 81       	ldd	r25, Y+1	; 0x01
    3fc0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3fc2:	98 17       	cp	r25, r24
    3fc4:	18 f3       	brcs	.-58     	; 0x3f8c <Is_Username_Exists+0x4c>
        {
          match = 0;
          break;
        }
      }
      if (match)
    3fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc8:	88 23       	and	r24, r24
    3fca:	19 f0       	breq	.+6      	; 0x3fd2 <Is_Username_Exists+0x92>
        return 1;
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	8d 8f       	std	Y+29, r24	; 0x1d
    3fd0:	0a c0       	rjmp	.+20     	; 0x3fe6 <Is_Username_Exists+0xa6>
u8 Is_Username_Exists(u8 *username, u8 length)
{
  u8 stored_username[21];
  u8 stored_length;

  for (u8 i = 0; i < User_Count; i++)
    3fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd4:	8f 5f       	subi	r24, 0xFF	; 255
    3fd6:	8b 83       	std	Y+3, r24	; 0x03
    3fd8:	90 91 66 05 	lds	r25, 0x0566
    3fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fde:	89 17       	cp	r24, r25
    3fe0:	08 f4       	brcc	.+2      	; 0x3fe4 <Is_Username_Exists+0xa4>
    3fe2:	bd cf       	rjmp	.-134    	; 0x3f5e <Is_Username_Exists+0x1e>
      }
      if (match)
        return 1;
    }
  }
  return 0;
    3fe4:	1d 8e       	std	Y+29, r1	; 0x1d
    3fe6:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    3fe8:	6d 96       	adiw	r28, 0x1d	; 29
    3fea:	0f b6       	in	r0, 0x3f	; 63
    3fec:	f8 94       	cli
    3fee:	de bf       	out	0x3e, r29	; 62
    3ff0:	0f be       	out	0x3f, r0	; 63
    3ff2:	cd bf       	out	0x3d, r28	; 61
    3ff4:	cf 91       	pop	r28
    3ff6:	df 91       	pop	r29
    3ff8:	08 95       	ret

00003ffa <Log_Event>:

/* Event logging */
void Log_Event(u8 event_type, u8 user_index)
{
    3ffa:	df 93       	push	r29
    3ffc:	cf 93       	push	r28
    3ffe:	cd b7       	in	r28, 0x3d	; 61
    4000:	de b7       	in	r29, 0x3e	; 62
    4002:	62 97       	sbiw	r28, 0x12	; 18
    4004:	0f b6       	in	r0, 0x3f	; 63
    4006:	f8 94       	cli
    4008:	de bf       	out	0x3e, r29	; 62
    400a:	0f be       	out	0x3f, r0	; 63
    400c:	cd bf       	out	0x3d, r28	; 61
    400e:	8f 87       	std	Y+15, r24	; 0x0f
    4010:	68 8b       	std	Y+16, r22	; 0x10
  CLCD_vClearScreen();
    4012:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
  switch (event_type)
    4016:	8f 85       	ldd	r24, Y+15	; 0x0f
    4018:	28 2f       	mov	r18, r24
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	3a 8b       	std	Y+18, r19	; 0x12
    401e:	29 8b       	std	Y+17, r18	; 0x11
    4020:	89 89       	ldd	r24, Y+17	; 0x11
    4022:	9a 89       	ldd	r25, Y+18	; 0x12
    4024:	83 30       	cpi	r24, 0x03	; 3
    4026:	91 05       	cpc	r25, r1
    4028:	51 f1       	breq	.+84     	; 0x407e <Log_Event+0x84>
    402a:	29 89       	ldd	r18, Y+17	; 0x11
    402c:	3a 89       	ldd	r19, Y+18	; 0x12
    402e:	24 30       	cpi	r18, 0x04	; 4
    4030:	31 05       	cpc	r19, r1
    4032:	5c f4       	brge	.+22     	; 0x404a <Log_Event+0x50>
    4034:	89 89       	ldd	r24, Y+17	; 0x11
    4036:	9a 89       	ldd	r25, Y+18	; 0x12
    4038:	81 30       	cpi	r24, 0x01	; 1
    403a:	91 05       	cpc	r25, r1
    403c:	b1 f0       	breq	.+44     	; 0x406a <Log_Event+0x70>
    403e:	29 89       	ldd	r18, Y+17	; 0x11
    4040:	3a 89       	ldd	r19, Y+18	; 0x12
    4042:	22 30       	cpi	r18, 0x02	; 2
    4044:	31 05       	cpc	r19, r1
    4046:	b1 f0       	breq	.+44     	; 0x4074 <Log_Event+0x7a>
    4048:	2d c0       	rjmp	.+90     	; 0x40a4 <Log_Event+0xaa>
    404a:	89 89       	ldd	r24, Y+17	; 0x11
    404c:	9a 89       	ldd	r25, Y+18	; 0x12
    404e:	85 30       	cpi	r24, 0x05	; 5
    4050:	91 05       	cpc	r25, r1
    4052:	f9 f0       	breq	.+62     	; 0x4092 <Log_Event+0x98>
    4054:	29 89       	ldd	r18, Y+17	; 0x11
    4056:	3a 89       	ldd	r19, Y+18	; 0x12
    4058:	25 30       	cpi	r18, 0x05	; 5
    405a:	31 05       	cpc	r19, r1
    405c:	ac f0       	brlt	.+42     	; 0x4088 <Log_Event+0x8e>
    405e:	89 89       	ldd	r24, Y+17	; 0x11
    4060:	9a 89       	ldd	r25, Y+18	; 0x12
    4062:	86 30       	cpi	r24, 0x06	; 6
    4064:	91 05       	cpc	r25, r1
    4066:	d1 f0       	breq	.+52     	; 0x409c <Log_Event+0xa2>
    4068:	1d c0       	rjmp	.+58     	; 0x40a4 <Log_Event+0xaa>
  {
  case EVENT_LOGIN_SUCCESS:
    CLCD_vSendString((u8 *)"Login: Success");
    406a:	80 e6       	ldi	r24, 0x60	; 96
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    4072:	18 c0       	rjmp	.+48     	; 0x40a4 <Log_Event+0xaa>
    break;
  case EVENT_LOGIN_FAIL:
    CLCD_vSendString((u8 *)"Login: Failed");
    4074:	8f e6       	ldi	r24, 0x6F	; 111
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    407c:	13 c0       	rjmp	.+38     	; 0x40a4 <Log_Event+0xaa>
    break;
  case EVENT_PASS_CHANGE:
    CLCD_vSendString((u8 *)"Pass Changed");
    407e:	8d e7       	ldi	r24, 0x7D	; 125
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    4086:	0e c0       	rjmp	.+28     	; 0x40a4 <Log_Event+0xaa>
    break;
  case EVENT_USER_CHANGE:
    CLCD_vSendString((u8 *)"User Changed");
    4088:	8a e8       	ldi	r24, 0x8A	; 138
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    4090:	09 c0       	rjmp	.+18     	; 0x40a4 <Log_Event+0xaa>
    break;
  case EVENT_USER_DELETE:
    CLCD_vSendString((u8 *)"User Deleted");
    4092:	87 e9       	ldi	r24, 0x97	; 151
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    409a:	04 c0       	rjmp	.+8      	; 0x40a4 <Log_Event+0xaa>
    break;
  case EVENT_USER_CREATE:
    CLCD_vSendString((u8 *)"User Created");
    409c:	84 ea       	ldi	r24, 0xA4	; 164
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    40a4:	80 e0       	ldi	r24, 0x00	; 0
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	aa e7       	ldi	r26, 0x7A	; 122
    40aa:	b4 e4       	ldi	r27, 0x44	; 68
    40ac:	8b 87       	std	Y+11, r24	; 0x0b
    40ae:	9c 87       	std	Y+12, r25	; 0x0c
    40b0:	ad 87       	std	Y+13, r26	; 0x0d
    40b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    40b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    40b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    40ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    40bc:	20 e0       	ldi	r18, 0x00	; 0
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	4a ef       	ldi	r20, 0xFA	; 250
    40c2:	54 e4       	ldi	r21, 0x44	; 68
    40c4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    40c8:	dc 01       	movw	r26, r24
    40ca:	cb 01       	movw	r24, r22
    40cc:	8f 83       	std	Y+7, r24	; 0x07
    40ce:	98 87       	std	Y+8, r25	; 0x08
    40d0:	a9 87       	std	Y+9, r26	; 0x09
    40d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    40d4:	6f 81       	ldd	r22, Y+7	; 0x07
    40d6:	78 85       	ldd	r23, Y+8	; 0x08
    40d8:	89 85       	ldd	r24, Y+9	; 0x09
    40da:	9a 85       	ldd	r25, Y+10	; 0x0a
    40dc:	20 e0       	ldi	r18, 0x00	; 0
    40de:	30 e0       	ldi	r19, 0x00	; 0
    40e0:	40 e8       	ldi	r20, 0x80	; 128
    40e2:	5f e3       	ldi	r21, 0x3F	; 63
    40e4:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    40e8:	88 23       	and	r24, r24
    40ea:	2c f4       	brge	.+10     	; 0x40f6 <Log_Event+0xfc>
		__ticks = 1;
    40ec:	81 e0       	ldi	r24, 0x01	; 1
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	9e 83       	std	Y+6, r25	; 0x06
    40f2:	8d 83       	std	Y+5, r24	; 0x05
    40f4:	3f c0       	rjmp	.+126    	; 0x4174 <Log_Event+0x17a>
	else if (__tmp > 65535)
    40f6:	6f 81       	ldd	r22, Y+7	; 0x07
    40f8:	78 85       	ldd	r23, Y+8	; 0x08
    40fa:	89 85       	ldd	r24, Y+9	; 0x09
    40fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    40fe:	20 e0       	ldi	r18, 0x00	; 0
    4100:	3f ef       	ldi	r19, 0xFF	; 255
    4102:	4f e7       	ldi	r20, 0x7F	; 127
    4104:	57 e4       	ldi	r21, 0x47	; 71
    4106:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    410a:	18 16       	cp	r1, r24
    410c:	4c f5       	brge	.+82     	; 0x4160 <Log_Event+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    410e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4110:	7c 85       	ldd	r23, Y+12	; 0x0c
    4112:	8d 85       	ldd	r24, Y+13	; 0x0d
    4114:	9e 85       	ldd	r25, Y+14	; 0x0e
    4116:	20 e0       	ldi	r18, 0x00	; 0
    4118:	30 e0       	ldi	r19, 0x00	; 0
    411a:	40 e2       	ldi	r20, 0x20	; 32
    411c:	51 e4       	ldi	r21, 0x41	; 65
    411e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4122:	dc 01       	movw	r26, r24
    4124:	cb 01       	movw	r24, r22
    4126:	bc 01       	movw	r22, r24
    4128:	cd 01       	movw	r24, r26
    412a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    412e:	dc 01       	movw	r26, r24
    4130:	cb 01       	movw	r24, r22
    4132:	9e 83       	std	Y+6, r25	; 0x06
    4134:	8d 83       	std	Y+5, r24	; 0x05
    4136:	0f c0       	rjmp	.+30     	; 0x4156 <Log_Event+0x15c>
    4138:	88 ec       	ldi	r24, 0xC8	; 200
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	9c 83       	std	Y+4, r25	; 0x04
    413e:	8b 83       	std	Y+3, r24	; 0x03
    4140:	8b 81       	ldd	r24, Y+3	; 0x03
    4142:	9c 81       	ldd	r25, Y+4	; 0x04
    4144:	01 97       	sbiw	r24, 0x01	; 1
    4146:	f1 f7       	brne	.-4      	; 0x4144 <Log_Event+0x14a>
    4148:	9c 83       	std	Y+4, r25	; 0x04
    414a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    414c:	8d 81       	ldd	r24, Y+5	; 0x05
    414e:	9e 81       	ldd	r25, Y+6	; 0x06
    4150:	01 97       	sbiw	r24, 0x01	; 1
    4152:	9e 83       	std	Y+6, r25	; 0x06
    4154:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4156:	8d 81       	ldd	r24, Y+5	; 0x05
    4158:	9e 81       	ldd	r25, Y+6	; 0x06
    415a:	00 97       	sbiw	r24, 0x00	; 0
    415c:	69 f7       	brne	.-38     	; 0x4138 <Log_Event+0x13e>
    415e:	14 c0       	rjmp	.+40     	; 0x4188 <Log_Event+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4160:	6f 81       	ldd	r22, Y+7	; 0x07
    4162:	78 85       	ldd	r23, Y+8	; 0x08
    4164:	89 85       	ldd	r24, Y+9	; 0x09
    4166:	9a 85       	ldd	r25, Y+10	; 0x0a
    4168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    416c:	dc 01       	movw	r26, r24
    416e:	cb 01       	movw	r24, r22
    4170:	9e 83       	std	Y+6, r25	; 0x06
    4172:	8d 83       	std	Y+5, r24	; 0x05
    4174:	8d 81       	ldd	r24, Y+5	; 0x05
    4176:	9e 81       	ldd	r25, Y+6	; 0x06
    4178:	9a 83       	std	Y+2, r25	; 0x02
    417a:	89 83       	std	Y+1, r24	; 0x01
    417c:	89 81       	ldd	r24, Y+1	; 0x01
    417e:	9a 81       	ldd	r25, Y+2	; 0x02
    4180:	01 97       	sbiw	r24, 0x01	; 1
    4182:	f1 f7       	brne	.-4      	; 0x4180 <Log_Event+0x186>
    4184:	9a 83       	std	Y+2, r25	; 0x02
    4186:	89 83       	std	Y+1, r24	; 0x01
    break;
  }
  _delay_ms(1000);
}
    4188:	62 96       	adiw	r28, 0x12	; 18
    418a:	0f b6       	in	r0, 0x3f	; 63
    418c:	f8 94       	cli
    418e:	de bf       	out	0x3e, r29	; 62
    4190:	0f be       	out	0x3f, r0	; 63
    4192:	cd bf       	out	0x3d, r28	; 61
    4194:	cf 91       	pop	r28
    4196:	df 91       	pop	r29
    4198:	08 95       	ret

0000419a <Change_Username>:

/* User management functions */
void Change_Username(void)
{
    419a:	df 93       	push	r29
    419c:	cf 93       	push	r28
    419e:	cd b7       	in	r28, 0x3d	; 61
    41a0:	de b7       	in	r29, 0x3e	; 62
    41a2:	a5 97       	sbiw	r28, 0x25	; 37
    41a4:	0f b6       	in	r0, 0x3f	; 63
    41a6:	f8 94       	cli
    41a8:	de bf       	out	0x3e, r29	; 62
    41aa:	0f be       	out	0x3f, r0	; 63
    41ac:	cd bf       	out	0x3d, r28	; 61
  CLCD_vClearScreen();
    41ae:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
  CLCD_vSendString((u8 *)"New Username:");
    41b2:	81 eb       	ldi	r24, 0xB1	; 177
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>

  u8 new_username[21];
  u8 new_length = 0;
    41ba:	18 8a       	std	Y+16, r1	; 0x10

  while (1)
  {
    Error_State = USART_u8ReceiveData(&KPD_Press);
    41bc:	8e e7       	ldi	r24, 0x7E	; 126
    41be:	95 e0       	ldi	r25, 0x05	; 5
    41c0:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    41c4:	80 93 93 05 	sts	0x0593, r24
    if (Error_State == OK)
    41c8:	80 91 93 05 	lds	r24, 0x0593
    41cc:	88 23       	and	r24, r24
    41ce:	b1 f7       	brne	.-20     	; 0x41bc <Change_Username+0x22>
    {
      if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    41d0:	80 91 7e 05 	lds	r24, 0x057E
    41d4:	8d 30       	cpi	r24, 0x0D	; 13
    41d6:	21 f0       	breq	.+8      	; 0x41e0 <Change_Username+0x46>
    41d8:	80 91 7e 05 	lds	r24, 0x057E
    41dc:	8f 30       	cpi	r24, 0x0F	; 15
    41de:	21 f4       	brne	.+8      	; 0x41e8 <Change_Username+0x4e>
      { // Enter
        if (new_length >= USERNAME_MIN_LENGTH)
    41e0:	88 89       	ldd	r24, Y+16	; 0x10
    41e2:	85 30       	cpi	r24, 0x05	; 5
    41e4:	58 f5       	brcc	.+86     	; 0x423c <Change_Username+0xa2>
    41e6:	ea cf       	rjmp	.-44     	; 0x41bc <Change_Username+0x22>
          break;
      }
      else if (KPD_Press == 0x08)
    41e8:	80 91 7e 05 	lds	r24, 0x057E
    41ec:	88 30       	cpi	r24, 0x08	; 8
    41ee:	81 f4       	brne	.+32     	; 0x4210 <Change_Username+0x76>
      { // Backspace
        if (new_length > 0)
    41f0:	88 89       	ldd	r24, Y+16	; 0x10
    41f2:	88 23       	and	r24, r24
    41f4:	19 f3       	breq	.-58     	; 0x41bc <Change_Username+0x22>
        {
          new_length--;
    41f6:	88 89       	ldd	r24, Y+16	; 0x10
    41f8:	81 50       	subi	r24, 0x01	; 1
    41fa:	88 8b       	std	Y+16, r24	; 0x10
          CLCD_vSendCommand(CLCD_SHIFT_CURSOR_LEFT);
    41fc:	80 e1       	ldi	r24, 0x10	; 16
    41fe:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
          CLCD_vSendData(' ');
    4202:	80 e2       	ldi	r24, 0x20	; 32
    4204:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
          CLCD_vSendCommand(CLCD_SHIFT_CURSOR_LEFT);
    4208:	80 e1       	ldi	r24, 0x10	; 16
    420a:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
    420e:	d6 cf       	rjmp	.-84     	; 0x41bc <Change_Username+0x22>
        }
      }
      else if (new_length < USERNAME_MAX_LENGTH)
    4210:	88 89       	ldd	r24, Y+16	; 0x10
    4212:	84 31       	cpi	r24, 0x14	; 20
    4214:	98 f6       	brcc	.-90     	; 0x41bc <Change_Username+0x22>
      {
        new_username[new_length++] = KPD_Press;
    4216:	88 89       	ldd	r24, Y+16	; 0x10
    4218:	28 2f       	mov	r18, r24
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	40 91 7e 05 	lds	r20, 0x057E
    4220:	ce 01       	movw	r24, r28
    4222:	41 96       	adiw	r24, 0x11	; 17
    4224:	fc 01       	movw	r30, r24
    4226:	e2 0f       	add	r30, r18
    4228:	f3 1f       	adc	r31, r19
    422a:	40 83       	st	Z, r20
    422c:	88 89       	ldd	r24, Y+16	; 0x10
    422e:	8f 5f       	subi	r24, 0xFF	; 255
    4230:	88 8b       	std	Y+16, r24	; 0x10
        CLCD_vSendData(KPD_Press);
    4232:	80 91 7e 05 	lds	r24, 0x057E
    4236:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
    423a:	c0 cf       	rjmp	.-128    	; 0x41bc <Change_Username+0x22>
      }
    }
  }

  new_username[new_length] = '\0';
    423c:	88 89       	ldd	r24, Y+16	; 0x10
    423e:	28 2f       	mov	r18, r24
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	ce 01       	movw	r24, r28
    4244:	41 96       	adiw	r24, 0x11	; 17
    4246:	fc 01       	movw	r30, r24
    4248:	e2 0f       	add	r30, r18
    424a:	f3 1f       	adc	r31, r19
    424c:	10 82       	st	Z, r1

  if (Is_Username_Exists(new_username, new_length))
    424e:	ce 01       	movw	r24, r28
    4250:	41 96       	adiw	r24, 0x11	; 17
    4252:	68 89       	ldd	r22, Y+16	; 0x10
    4254:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <Is_Username_Exists>
    4258:	88 23       	and	r24, r24
    425a:	09 f4       	brne	.+2      	; 0x425e <Change_Username+0xc4>
    425c:	79 c0       	rjmp	.+242    	; 0x4350 <Change_Username+0x1b6>
  {
    CLCD_vClearScreen();
    425e:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
    CLCD_vSendString((u8 *)"Username exists!");
    4262:	8f eb       	ldi	r24, 0xBF	; 191
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    426a:	80 e0       	ldi	r24, 0x00	; 0
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	aa e7       	ldi	r26, 0x7A	; 122
    4270:	b4 e4       	ldi	r27, 0x44	; 68
    4272:	8b 87       	std	Y+11, r24	; 0x0b
    4274:	9c 87       	std	Y+12, r25	; 0x0c
    4276:	ad 87       	std	Y+13, r26	; 0x0d
    4278:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    427a:	6b 85       	ldd	r22, Y+11	; 0x0b
    427c:	7c 85       	ldd	r23, Y+12	; 0x0c
    427e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4280:	9e 85       	ldd	r25, Y+14	; 0x0e
    4282:	20 e0       	ldi	r18, 0x00	; 0
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	4a ef       	ldi	r20, 0xFA	; 250
    4288:	54 e4       	ldi	r21, 0x44	; 68
    428a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    428e:	dc 01       	movw	r26, r24
    4290:	cb 01       	movw	r24, r22
    4292:	8f 83       	std	Y+7, r24	; 0x07
    4294:	98 87       	std	Y+8, r25	; 0x08
    4296:	a9 87       	std	Y+9, r26	; 0x09
    4298:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    429a:	6f 81       	ldd	r22, Y+7	; 0x07
    429c:	78 85       	ldd	r23, Y+8	; 0x08
    429e:	89 85       	ldd	r24, Y+9	; 0x09
    42a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42a2:	20 e0       	ldi	r18, 0x00	; 0
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	40 e8       	ldi	r20, 0x80	; 128
    42a8:	5f e3       	ldi	r21, 0x3F	; 63
    42aa:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    42ae:	88 23       	and	r24, r24
    42b0:	2c f4       	brge	.+10     	; 0x42bc <Change_Username+0x122>
		__ticks = 1;
    42b2:	81 e0       	ldi	r24, 0x01	; 1
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	9e 83       	std	Y+6, r25	; 0x06
    42b8:	8d 83       	std	Y+5, r24	; 0x05
    42ba:	3f c0       	rjmp	.+126    	; 0x433a <Change_Username+0x1a0>
	else if (__tmp > 65535)
    42bc:	6f 81       	ldd	r22, Y+7	; 0x07
    42be:	78 85       	ldd	r23, Y+8	; 0x08
    42c0:	89 85       	ldd	r24, Y+9	; 0x09
    42c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42c4:	20 e0       	ldi	r18, 0x00	; 0
    42c6:	3f ef       	ldi	r19, 0xFF	; 255
    42c8:	4f e7       	ldi	r20, 0x7F	; 127
    42ca:	57 e4       	ldi	r21, 0x47	; 71
    42cc:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    42d0:	18 16       	cp	r1, r24
    42d2:	4c f5       	brge	.+82     	; 0x4326 <Change_Username+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    42d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    42d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    42da:	9e 85       	ldd	r25, Y+14	; 0x0e
    42dc:	20 e0       	ldi	r18, 0x00	; 0
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	40 e2       	ldi	r20, 0x20	; 32
    42e2:	51 e4       	ldi	r21, 0x41	; 65
    42e4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    42e8:	dc 01       	movw	r26, r24
    42ea:	cb 01       	movw	r24, r22
    42ec:	bc 01       	movw	r22, r24
    42ee:	cd 01       	movw	r24, r26
    42f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42f4:	dc 01       	movw	r26, r24
    42f6:	cb 01       	movw	r24, r22
    42f8:	9e 83       	std	Y+6, r25	; 0x06
    42fa:	8d 83       	std	Y+5, r24	; 0x05
    42fc:	0f c0       	rjmp	.+30     	; 0x431c <Change_Username+0x182>
    42fe:	88 ec       	ldi	r24, 0xC8	; 200
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	9c 83       	std	Y+4, r25	; 0x04
    4304:	8b 83       	std	Y+3, r24	; 0x03
    4306:	8b 81       	ldd	r24, Y+3	; 0x03
    4308:	9c 81       	ldd	r25, Y+4	; 0x04
    430a:	01 97       	sbiw	r24, 0x01	; 1
    430c:	f1 f7       	brne	.-4      	; 0x430a <Change_Username+0x170>
    430e:	9c 83       	std	Y+4, r25	; 0x04
    4310:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4312:	8d 81       	ldd	r24, Y+5	; 0x05
    4314:	9e 81       	ldd	r25, Y+6	; 0x06
    4316:	01 97       	sbiw	r24, 0x01	; 1
    4318:	9e 83       	std	Y+6, r25	; 0x06
    431a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    431c:	8d 81       	ldd	r24, Y+5	; 0x05
    431e:	9e 81       	ldd	r25, Y+6	; 0x06
    4320:	00 97       	sbiw	r24, 0x00	; 0
    4322:	69 f7       	brne	.-38     	; 0x42fe <Change_Username+0x164>
    4324:	47 c0       	rjmp	.+142    	; 0x43b4 <Change_Username+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4326:	6f 81       	ldd	r22, Y+7	; 0x07
    4328:	78 85       	ldd	r23, Y+8	; 0x08
    432a:	89 85       	ldd	r24, Y+9	; 0x09
    432c:	9a 85       	ldd	r25, Y+10	; 0x0a
    432e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4332:	dc 01       	movw	r26, r24
    4334:	cb 01       	movw	r24, r22
    4336:	9e 83       	std	Y+6, r25	; 0x06
    4338:	8d 83       	std	Y+5, r24	; 0x05
    433a:	8d 81       	ldd	r24, Y+5	; 0x05
    433c:	9e 81       	ldd	r25, Y+6	; 0x06
    433e:	9a 83       	std	Y+2, r25	; 0x02
    4340:	89 83       	std	Y+1, r24	; 0x01
    4342:	89 81       	ldd	r24, Y+1	; 0x01
    4344:	9a 81       	ldd	r25, Y+2	; 0x02
    4346:	01 97       	sbiw	r24, 0x01	; 1
    4348:	f1 f7       	brne	.-4      	; 0x4346 <Change_Username+0x1ac>
    434a:	9a 83       	std	Y+2, r25	; 0x02
    434c:	89 83       	std	Y+1, r24	; 0x01
    434e:	32 c0       	rjmp	.+100    	; 0x43b4 <Change_Username+0x21a>
    _delay_ms(1000);
    return;
  }

  Write_Username(Current_User, new_username, new_length);
    4350:	80 91 65 05 	lds	r24, 0x0565
    4354:	9e 01       	movw	r18, r28
    4356:	2f 5e       	subi	r18, 0xEF	; 239
    4358:	3f 4f       	sbci	r19, 0xFF	; 255
    435a:	b9 01       	movw	r22, r18
    435c:	48 89       	ldd	r20, Y+16	; 0x10
    435e:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Write_Username>
  UserName_Length = new_length;
    4362:	88 89       	ldd	r24, Y+16	; 0x10
    4364:	80 93 63 05 	sts	0x0563, r24
  for (u8 i = 0; i < new_length; i++)
    4368:	1f 86       	std	Y+15, r1	; 0x0f
    436a:	13 c0       	rjmp	.+38     	; 0x4392 <Change_Username+0x1f8>
  {
    UserName[i] = new_username[i];
    436c:	8f 85       	ldd	r24, Y+15	; 0x0f
    436e:	48 2f       	mov	r20, r24
    4370:	50 e0       	ldi	r21, 0x00	; 0
    4372:	8f 85       	ldd	r24, Y+15	; 0x0f
    4374:	28 2f       	mov	r18, r24
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	ce 01       	movw	r24, r28
    437a:	41 96       	adiw	r24, 0x11	; 17
    437c:	fc 01       	movw	r30, r24
    437e:	e2 0f       	add	r30, r18
    4380:	f3 1f       	adc	r31, r19
    4382:	80 81       	ld	r24, Z
    4384:	fa 01       	movw	r30, r20
    4386:	e1 58       	subi	r30, 0x81	; 129
    4388:	fa 4f       	sbci	r31, 0xFA	; 250
    438a:	80 83       	st	Z, r24
    return;
  }

  Write_Username(Current_User, new_username, new_length);
  UserName_Length = new_length;
  for (u8 i = 0; i < new_length; i++)
    438c:	8f 85       	ldd	r24, Y+15	; 0x0f
    438e:	8f 5f       	subi	r24, 0xFF	; 255
    4390:	8f 87       	std	Y+15, r24	; 0x0f
    4392:	9f 85       	ldd	r25, Y+15	; 0x0f
    4394:	88 89       	ldd	r24, Y+16	; 0x10
    4396:	98 17       	cp	r25, r24
    4398:	48 f3       	brcs	.-46     	; 0x436c <Change_Username+0x1d2>
  {
    UserName[i] = new_username[i];
  }
  UserName[new_length] = '\0';
    439a:	88 89       	ldd	r24, Y+16	; 0x10
    439c:	88 2f       	mov	r24, r24
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	fc 01       	movw	r30, r24
    43a2:	e1 58       	subi	r30, 0x81	; 129
    43a4:	fa 4f       	sbci	r31, 0xFA	; 250
    43a6:	10 82       	st	Z, r1

  Log_Event(EVENT_USER_CHANGE, Current_User);
    43a8:	90 91 65 05 	lds	r25, 0x0565
    43ac:	84 e0       	ldi	r24, 0x04	; 4
    43ae:	69 2f       	mov	r22, r25
    43b0:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <Log_Event>
}
    43b4:	a5 96       	adiw	r28, 0x25	; 37
    43b6:	0f b6       	in	r0, 0x3f	; 63
    43b8:	f8 94       	cli
    43ba:	de bf       	out	0x3e, r29	; 62
    43bc:	0f be       	out	0x3f, r0	; 63
    43be:	cd bf       	out	0x3d, r28	; 61
    43c0:	cf 91       	pop	r28
    43c2:	df 91       	pop	r29
    43c4:	08 95       	ret

000043c6 <Change_Password>:

void Change_Password(void)
{
    43c6:	df 93       	push	r29
    43c8:	cf 93       	push	r28
    43ca:	cd b7       	in	r28, 0x3d	; 61
    43cc:	de b7       	in	r29, 0x3e	; 62
    43ce:	c7 55       	subi	r28, 0x57	; 87
    43d0:	d0 40       	sbci	r29, 0x00	; 0
    43d2:	0f b6       	in	r0, 0x3f	; 63
    43d4:	f8 94       	cli
    43d6:	de bf       	out	0x3e, r29	; 62
    43d8:	0f be       	out	0x3f, r0	; 63
    43da:	cd bf       	out	0x3d, r28	; 61
  CLCD_vClearScreen();
    43dc:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
  CLCD_vSendString((u8 *)"Current Pass:");
    43e0:	80 ed       	ldi	r24, 0xD0	; 208
    43e2:	90 e0       	ldi	r25, 0x00	; 0
    43e4:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>

  // First verify current password
  u8 temp_pass[21];
  u8 pass_length = 0;
    43e8:	1c a6       	std	Y+44, r1	; 0x2c

  while (1)
  {
    Error_State = USART_u8ReceiveData(&KPD_Press);
    43ea:	8e e7       	ldi	r24, 0x7E	; 126
    43ec:	95 e0       	ldi	r25, 0x05	; 5
    43ee:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    43f2:	80 93 93 05 	sts	0x0593, r24
    if (Error_State == OK)
    43f6:	80 91 93 05 	lds	r24, 0x0593
    43fa:	88 23       	and	r24, r24
    43fc:	b1 f7       	brne	.-20     	; 0x43ea <Change_Password+0x24>
    {
      if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    43fe:	80 91 7e 05 	lds	r24, 0x057E
    4402:	8d 30       	cpi	r24, 0x0D	; 13
    4404:	69 f1       	breq	.+90     	; 0x4460 <Change_Password+0x9a>
    4406:	80 91 7e 05 	lds	r24, 0x057E
    440a:	8f 30       	cpi	r24, 0x0F	; 15
    440c:	49 f1       	breq	.+82     	; 0x4460 <Change_Password+0x9a>
        break;
      else if (KPD_Press == 0x08)
    440e:	80 91 7e 05 	lds	r24, 0x057E
    4412:	88 30       	cpi	r24, 0x08	; 8
    4414:	81 f4       	brne	.+32     	; 0x4436 <Change_Password+0x70>
      {
        if (pass_length > 0)
    4416:	8c a5       	ldd	r24, Y+44	; 0x2c
    4418:	88 23       	and	r24, r24
    441a:	39 f3       	breq	.-50     	; 0x43ea <Change_Password+0x24>
        {
          pass_length--;
    441c:	8c a5       	ldd	r24, Y+44	; 0x2c
    441e:	81 50       	subi	r24, 0x01	; 1
    4420:	8c a7       	std	Y+44, r24	; 0x2c
          CLCD_vSendCommand(CLCD_SHIFT_CURSOR_LEFT);
    4422:	80 e1       	ldi	r24, 0x10	; 16
    4424:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
          CLCD_vSendData(' ');
    4428:	80 e2       	ldi	r24, 0x20	; 32
    442a:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
          CLCD_vSendCommand(CLCD_SHIFT_CURSOR_LEFT);
    442e:	80 e1       	ldi	r24, 0x10	; 16
    4430:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
    4434:	da cf       	rjmp	.-76     	; 0x43ea <Change_Password+0x24>
        }
      }
      else if (pass_length < PASSWORD_MAX_LENGTH)
    4436:	8c a5       	ldd	r24, Y+44	; 0x2c
    4438:	84 31       	cpi	r24, 0x14	; 20
    443a:	b8 f6       	brcc	.-82     	; 0x43ea <Change_Password+0x24>
      {
        temp_pass[pass_length++] = KPD_Press;
    443c:	8c a5       	ldd	r24, Y+44	; 0x2c
    443e:	28 2f       	mov	r18, r24
    4440:	30 e0       	ldi	r19, 0x00	; 0
    4442:	40 91 7e 05 	lds	r20, 0x057E
    4446:	ce 01       	movw	r24, r28
    4448:	8d 96       	adiw	r24, 0x2d	; 45
    444a:	fc 01       	movw	r30, r24
    444c:	e2 0f       	add	r30, r18
    444e:	f3 1f       	adc	r31, r19
    4450:	40 83       	st	Z, r20
    4452:	8c a5       	ldd	r24, Y+44	; 0x2c
    4454:	8f 5f       	subi	r24, 0xFF	; 255
    4456:	8c a7       	std	Y+44, r24	; 0x2c
        CLCD_vSendData('*');
    4458:	8a e2       	ldi	r24, 0x2A	; 42
    445a:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
    445e:	c5 cf       	rjmp	.-118    	; 0x43ea <Change_Password+0x24>
    }
  }

  u8 stored_pass[21];
  u8 stored_length;
  Read_Password(Current_User, stored_pass, &stored_length);
    4460:	80 91 65 05 	lds	r24, 0x0565
    4464:	9e 01       	movw	r18, r28
    4466:	2e 5b       	subi	r18, 0xBE	; 190
    4468:	3f 4f       	sbci	r19, 0xFF	; 255
    446a:	ae 01       	movw	r20, r28
    446c:	49 5a       	subi	r20, 0xA9	; 169
    446e:	5f 4f       	sbci	r21, 0xFF	; 255
    4470:	b9 01       	movw	r22, r18
    4472:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <Read_Password>

  if (pass_length != stored_length)
    4476:	fe 01       	movw	r30, r28
    4478:	e9 5a       	subi	r30, 0xA9	; 169
    447a:	ff 4f       	sbci	r31, 0xFF	; 255
    447c:	90 81       	ld	r25, Z
    447e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4480:	89 17       	cp	r24, r25
    4482:	09 f4       	brne	.+2      	; 0x4486 <Change_Password+0xc0>
    4484:	79 c0       	rjmp	.+242    	; 0x4578 <Change_Password+0x1b2>
  {
    CLCD_vClearScreen();
    4486:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
    CLCD_vSendString((u8 *)"Wrong Password!");
    448a:	8e ed       	ldi	r24, 0xDE	; 222
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    4492:	80 e0       	ldi	r24, 0x00	; 0
    4494:	90 e0       	ldi	r25, 0x00	; 0
    4496:	aa e7       	ldi	r26, 0x7A	; 122
    4498:	b4 e4       	ldi	r27, 0x44	; 68
    449a:	8f a3       	std	Y+39, r24	; 0x27
    449c:	98 a7       	std	Y+40, r25	; 0x28
    449e:	a9 a7       	std	Y+41, r26	; 0x29
    44a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44a2:	6f a1       	ldd	r22, Y+39	; 0x27
    44a4:	78 a5       	ldd	r23, Y+40	; 0x28
    44a6:	89 a5       	ldd	r24, Y+41	; 0x29
    44a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    44aa:	20 e0       	ldi	r18, 0x00	; 0
    44ac:	30 e0       	ldi	r19, 0x00	; 0
    44ae:	4a ef       	ldi	r20, 0xFA	; 250
    44b0:	54 e4       	ldi	r21, 0x44	; 68
    44b2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    44b6:	dc 01       	movw	r26, r24
    44b8:	cb 01       	movw	r24, r22
    44ba:	8b a3       	std	Y+35, r24	; 0x23
    44bc:	9c a3       	std	Y+36, r25	; 0x24
    44be:	ad a3       	std	Y+37, r26	; 0x25
    44c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    44c2:	6b a1       	ldd	r22, Y+35	; 0x23
    44c4:	7c a1       	ldd	r23, Y+36	; 0x24
    44c6:	8d a1       	ldd	r24, Y+37	; 0x25
    44c8:	9e a1       	ldd	r25, Y+38	; 0x26
    44ca:	20 e0       	ldi	r18, 0x00	; 0
    44cc:	30 e0       	ldi	r19, 0x00	; 0
    44ce:	40 e8       	ldi	r20, 0x80	; 128
    44d0:	5f e3       	ldi	r21, 0x3F	; 63
    44d2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    44d6:	88 23       	and	r24, r24
    44d8:	2c f4       	brge	.+10     	; 0x44e4 <Change_Password+0x11e>
		__ticks = 1;
    44da:	81 e0       	ldi	r24, 0x01	; 1
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	9a a3       	std	Y+34, r25	; 0x22
    44e0:	89 a3       	std	Y+33, r24	; 0x21
    44e2:	3f c0       	rjmp	.+126    	; 0x4562 <Change_Password+0x19c>
	else if (__tmp > 65535)
    44e4:	6b a1       	ldd	r22, Y+35	; 0x23
    44e6:	7c a1       	ldd	r23, Y+36	; 0x24
    44e8:	8d a1       	ldd	r24, Y+37	; 0x25
    44ea:	9e a1       	ldd	r25, Y+38	; 0x26
    44ec:	20 e0       	ldi	r18, 0x00	; 0
    44ee:	3f ef       	ldi	r19, 0xFF	; 255
    44f0:	4f e7       	ldi	r20, 0x7F	; 127
    44f2:	57 e4       	ldi	r21, 0x47	; 71
    44f4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    44f8:	18 16       	cp	r1, r24
    44fa:	4c f5       	brge	.+82     	; 0x454e <Change_Password+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44fc:	6f a1       	ldd	r22, Y+39	; 0x27
    44fe:	78 a5       	ldd	r23, Y+40	; 0x28
    4500:	89 a5       	ldd	r24, Y+41	; 0x29
    4502:	9a a5       	ldd	r25, Y+42	; 0x2a
    4504:	20 e0       	ldi	r18, 0x00	; 0
    4506:	30 e0       	ldi	r19, 0x00	; 0
    4508:	40 e2       	ldi	r20, 0x20	; 32
    450a:	51 e4       	ldi	r21, 0x41	; 65
    450c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4510:	dc 01       	movw	r26, r24
    4512:	cb 01       	movw	r24, r22
    4514:	bc 01       	movw	r22, r24
    4516:	cd 01       	movw	r24, r26
    4518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    451c:	dc 01       	movw	r26, r24
    451e:	cb 01       	movw	r24, r22
    4520:	9a a3       	std	Y+34, r25	; 0x22
    4522:	89 a3       	std	Y+33, r24	; 0x21
    4524:	0f c0       	rjmp	.+30     	; 0x4544 <Change_Password+0x17e>
    4526:	88 ec       	ldi	r24, 0xC8	; 200
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	98 a3       	std	Y+32, r25	; 0x20
    452c:	8f 8f       	std	Y+31, r24	; 0x1f
    452e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4530:	98 a1       	ldd	r25, Y+32	; 0x20
    4532:	01 97       	sbiw	r24, 0x01	; 1
    4534:	f1 f7       	brne	.-4      	; 0x4532 <Change_Password+0x16c>
    4536:	98 a3       	std	Y+32, r25	; 0x20
    4538:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    453a:	89 a1       	ldd	r24, Y+33	; 0x21
    453c:	9a a1       	ldd	r25, Y+34	; 0x22
    453e:	01 97       	sbiw	r24, 0x01	; 1
    4540:	9a a3       	std	Y+34, r25	; 0x22
    4542:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4544:	89 a1       	ldd	r24, Y+33	; 0x21
    4546:	9a a1       	ldd	r25, Y+34	; 0x22
    4548:	00 97       	sbiw	r24, 0x00	; 0
    454a:	69 f7       	brne	.-38     	; 0x4526 <Change_Password+0x160>
    454c:	9a c1       	rjmp	.+820    	; 0x4882 <Change_Password+0x4bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    454e:	6b a1       	ldd	r22, Y+35	; 0x23
    4550:	7c a1       	ldd	r23, Y+36	; 0x24
    4552:	8d a1       	ldd	r24, Y+37	; 0x25
    4554:	9e a1       	ldd	r25, Y+38	; 0x26
    4556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    455a:	dc 01       	movw	r26, r24
    455c:	cb 01       	movw	r24, r22
    455e:	9a a3       	std	Y+34, r25	; 0x22
    4560:	89 a3       	std	Y+33, r24	; 0x21
    4562:	89 a1       	ldd	r24, Y+33	; 0x21
    4564:	9a a1       	ldd	r25, Y+34	; 0x22
    4566:	9e 8f       	std	Y+30, r25	; 0x1e
    4568:	8d 8f       	std	Y+29, r24	; 0x1d
    456a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    456c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    456e:	01 97       	sbiw	r24, 0x01	; 1
    4570:	f1 f7       	brne	.-4      	; 0x456e <Change_Password+0x1a8>
    4572:	9e 8f       	std	Y+30, r25	; 0x1e
    4574:	8d 8f       	std	Y+29, r24	; 0x1d
    4576:	85 c1       	rjmp	.+778    	; 0x4882 <Change_Password+0x4bc>
    _delay_ms(1000);
    return;
  }

  for (u8 i = 0; i < pass_length; i++)
    4578:	1b a6       	std	Y+43, r1	; 0x2b
    457a:	92 c0       	rjmp	.+292    	; 0x46a0 <Change_Password+0x2da>
  {
    if (temp_pass[i] != stored_pass[i])
    457c:	8b a5       	ldd	r24, Y+43	; 0x2b
    457e:	28 2f       	mov	r18, r24
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	ce 01       	movw	r24, r28
    4584:	8d 96       	adiw	r24, 0x2d	; 45
    4586:	fc 01       	movw	r30, r24
    4588:	e2 0f       	add	r30, r18
    458a:	f3 1f       	adc	r31, r19
    458c:	40 81       	ld	r20, Z
    458e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4590:	28 2f       	mov	r18, r24
    4592:	30 e0       	ldi	r19, 0x00	; 0
    4594:	ce 01       	movw	r24, r28
    4596:	8e 5b       	subi	r24, 0xBE	; 190
    4598:	9f 4f       	sbci	r25, 0xFF	; 255
    459a:	fc 01       	movw	r30, r24
    459c:	e2 0f       	add	r30, r18
    459e:	f3 1f       	adc	r31, r19
    45a0:	80 81       	ld	r24, Z
    45a2:	48 17       	cp	r20, r24
    45a4:	09 f4       	brne	.+2      	; 0x45a8 <Change_Password+0x1e2>
    45a6:	79 c0       	rjmp	.+242    	; 0x469a <Change_Password+0x2d4>
    {
      CLCD_vClearScreen();
    45a8:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
      CLCD_vSendString((u8 *)"Wrong Password!");
    45ac:	8e ed       	ldi	r24, 0xDE	; 222
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    45b4:	80 e0       	ldi	r24, 0x00	; 0
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	aa e7       	ldi	r26, 0x7A	; 122
    45ba:	b4 e4       	ldi	r27, 0x44	; 68
    45bc:	89 8f       	std	Y+25, r24	; 0x19
    45be:	9a 8f       	std	Y+26, r25	; 0x1a
    45c0:	ab 8f       	std	Y+27, r26	; 0x1b
    45c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45c4:	69 8d       	ldd	r22, Y+25	; 0x19
    45c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45cc:	20 e0       	ldi	r18, 0x00	; 0
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	4a ef       	ldi	r20, 0xFA	; 250
    45d2:	54 e4       	ldi	r21, 0x44	; 68
    45d4:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    45d8:	dc 01       	movw	r26, r24
    45da:	cb 01       	movw	r24, r22
    45dc:	8d 8b       	std	Y+21, r24	; 0x15
    45de:	9e 8b       	std	Y+22, r25	; 0x16
    45e0:	af 8b       	std	Y+23, r26	; 0x17
    45e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    45e4:	6d 89       	ldd	r22, Y+21	; 0x15
    45e6:	7e 89       	ldd	r23, Y+22	; 0x16
    45e8:	8f 89       	ldd	r24, Y+23	; 0x17
    45ea:	98 8d       	ldd	r25, Y+24	; 0x18
    45ec:	20 e0       	ldi	r18, 0x00	; 0
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	40 e8       	ldi	r20, 0x80	; 128
    45f2:	5f e3       	ldi	r21, 0x3F	; 63
    45f4:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    45f8:	88 23       	and	r24, r24
    45fa:	2c f4       	brge	.+10     	; 0x4606 <Change_Password+0x240>
		__ticks = 1;
    45fc:	81 e0       	ldi	r24, 0x01	; 1
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	9c 8b       	std	Y+20, r25	; 0x14
    4602:	8b 8b       	std	Y+19, r24	; 0x13
    4604:	3f c0       	rjmp	.+126    	; 0x4684 <Change_Password+0x2be>
	else if (__tmp > 65535)
    4606:	6d 89       	ldd	r22, Y+21	; 0x15
    4608:	7e 89       	ldd	r23, Y+22	; 0x16
    460a:	8f 89       	ldd	r24, Y+23	; 0x17
    460c:	98 8d       	ldd	r25, Y+24	; 0x18
    460e:	20 e0       	ldi	r18, 0x00	; 0
    4610:	3f ef       	ldi	r19, 0xFF	; 255
    4612:	4f e7       	ldi	r20, 0x7F	; 127
    4614:	57 e4       	ldi	r21, 0x47	; 71
    4616:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    461a:	18 16       	cp	r1, r24
    461c:	4c f5       	brge	.+82     	; 0x4670 <Change_Password+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    461e:	69 8d       	ldd	r22, Y+25	; 0x19
    4620:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4622:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4624:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	40 e2       	ldi	r20, 0x20	; 32
    462c:	51 e4       	ldi	r21, 0x41	; 65
    462e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4632:	dc 01       	movw	r26, r24
    4634:	cb 01       	movw	r24, r22
    4636:	bc 01       	movw	r22, r24
    4638:	cd 01       	movw	r24, r26
    463a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    463e:	dc 01       	movw	r26, r24
    4640:	cb 01       	movw	r24, r22
    4642:	9c 8b       	std	Y+20, r25	; 0x14
    4644:	8b 8b       	std	Y+19, r24	; 0x13
    4646:	0f c0       	rjmp	.+30     	; 0x4666 <Change_Password+0x2a0>
    4648:	88 ec       	ldi	r24, 0xC8	; 200
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	9a 8b       	std	Y+18, r25	; 0x12
    464e:	89 8b       	std	Y+17, r24	; 0x11
    4650:	89 89       	ldd	r24, Y+17	; 0x11
    4652:	9a 89       	ldd	r25, Y+18	; 0x12
    4654:	01 97       	sbiw	r24, 0x01	; 1
    4656:	f1 f7       	brne	.-4      	; 0x4654 <Change_Password+0x28e>
    4658:	9a 8b       	std	Y+18, r25	; 0x12
    465a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    465c:	8b 89       	ldd	r24, Y+19	; 0x13
    465e:	9c 89       	ldd	r25, Y+20	; 0x14
    4660:	01 97       	sbiw	r24, 0x01	; 1
    4662:	9c 8b       	std	Y+20, r25	; 0x14
    4664:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4666:	8b 89       	ldd	r24, Y+19	; 0x13
    4668:	9c 89       	ldd	r25, Y+20	; 0x14
    466a:	00 97       	sbiw	r24, 0x00	; 0
    466c:	69 f7       	brne	.-38     	; 0x4648 <Change_Password+0x282>
    466e:	09 c1       	rjmp	.+530    	; 0x4882 <Change_Password+0x4bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4670:	6d 89       	ldd	r22, Y+21	; 0x15
    4672:	7e 89       	ldd	r23, Y+22	; 0x16
    4674:	8f 89       	ldd	r24, Y+23	; 0x17
    4676:	98 8d       	ldd	r25, Y+24	; 0x18
    4678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    467c:	dc 01       	movw	r26, r24
    467e:	cb 01       	movw	r24, r22
    4680:	9c 8b       	std	Y+20, r25	; 0x14
    4682:	8b 8b       	std	Y+19, r24	; 0x13
    4684:	8b 89       	ldd	r24, Y+19	; 0x13
    4686:	9c 89       	ldd	r25, Y+20	; 0x14
    4688:	98 8b       	std	Y+16, r25	; 0x10
    468a:	8f 87       	std	Y+15, r24	; 0x0f
    468c:	8f 85       	ldd	r24, Y+15	; 0x0f
    468e:	98 89       	ldd	r25, Y+16	; 0x10
    4690:	01 97       	sbiw	r24, 0x01	; 1
    4692:	f1 f7       	brne	.-4      	; 0x4690 <Change_Password+0x2ca>
    4694:	98 8b       	std	Y+16, r25	; 0x10
    4696:	8f 87       	std	Y+15, r24	; 0x0f
    4698:	f4 c0       	rjmp	.+488    	; 0x4882 <Change_Password+0x4bc>
    CLCD_vSendString((u8 *)"Wrong Password!");
    _delay_ms(1000);
    return;
  }

  for (u8 i = 0; i < pass_length; i++)
    469a:	8b a5       	ldd	r24, Y+43	; 0x2b
    469c:	8f 5f       	subi	r24, 0xFF	; 255
    469e:	8b a7       	std	Y+43, r24	; 0x2b
    46a0:	9b a5       	ldd	r25, Y+43	; 0x2b
    46a2:	8c a5       	ldd	r24, Y+44	; 0x2c
    46a4:	98 17       	cp	r25, r24
    46a6:	08 f4       	brcc	.+2      	; 0x46aa <Change_Password+0x2e4>
    46a8:	69 cf       	rjmp	.-302    	; 0x457c <Change_Password+0x1b6>
      return;
    }
  }

  // Get new password
  CLCD_vClearScreen();
    46aa:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
  CLCD_vSendString((u8 *)"New Password:");
    46ae:	8e ee       	ldi	r24, 0xEE	; 238
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    46b6:	82 e0       	ldi	r24, 0x02	; 2
    46b8:	61 e0       	ldi	r22, 0x01	; 1
    46ba:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
  CLCD_vSendString((u8 *)"Min len: ");
    46be:	8c ef       	ldi	r24, 0xFC	; 252
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
  CLCD_vSendIntNumber(PASSWORD_MIN_LENGTH);
    46c6:	68 e0       	ldi	r22, 0x08	; 8
    46c8:	70 e0       	ldi	r23, 0x00	; 0
    46ca:	80 e0       	ldi	r24, 0x00	; 0
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	0e 94 8b 1a 	call	0x3516	; 0x3516 <CLCD_vSendIntNumber>

  pass_length = 0;
    46d2:	1c a6       	std	Y+44, r1	; 0x2c
  while (1)
  {
    Error_State = USART_u8ReceiveData(&KPD_Press);
    46d4:	8e e7       	ldi	r24, 0x7E	; 126
    46d6:	95 e0       	ldi	r25, 0x05	; 5
    46d8:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    46dc:	80 93 93 05 	sts	0x0593, r24
    if (Error_State == OK)
    46e0:	80 91 93 05 	lds	r24, 0x0593
    46e4:	88 23       	and	r24, r24
    46e6:	b1 f7       	brne	.-20     	; 0x46d4 <Change_Password+0x30e>
    {
      if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    46e8:	80 91 7e 05 	lds	r24, 0x057E
    46ec:	8d 30       	cpi	r24, 0x0D	; 13
    46ee:	21 f0       	breq	.+8      	; 0x46f8 <Change_Password+0x332>
    46f0:	80 91 7e 05 	lds	r24, 0x057E
    46f4:	8f 30       	cpi	r24, 0x0F	; 15
    46f6:	21 f4       	brne	.+8      	; 0x4700 <Change_Password+0x33a>
      {
        if (pass_length >= PASSWORD_MIN_LENGTH)
    46f8:	8c a5       	ldd	r24, Y+44	; 0x2c
    46fa:	88 30       	cpi	r24, 0x08	; 8
    46fc:	50 f5       	brcc	.+84     	; 0x4752 <Change_Password+0x38c>
    46fe:	ea cf       	rjmp	.-44     	; 0x46d4 <Change_Password+0x30e>
          break;
      }
      else if (KPD_Press == 0x08)
    4700:	80 91 7e 05 	lds	r24, 0x057E
    4704:	88 30       	cpi	r24, 0x08	; 8
    4706:	81 f4       	brne	.+32     	; 0x4728 <Change_Password+0x362>
      {
        if (pass_length > 0)
    4708:	8c a5       	ldd	r24, Y+44	; 0x2c
    470a:	88 23       	and	r24, r24
    470c:	19 f3       	breq	.-58     	; 0x46d4 <Change_Password+0x30e>
        {
          pass_length--;
    470e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4710:	81 50       	subi	r24, 0x01	; 1
    4712:	8c a7       	std	Y+44, r24	; 0x2c
          CLCD_vSendCommand(CLCD_SHIFT_CURSOR_LEFT);
    4714:	80 e1       	ldi	r24, 0x10	; 16
    4716:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
          CLCD_vSendData(' ');
    471a:	80 e2       	ldi	r24, 0x20	; 32
    471c:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
          CLCD_vSendCommand(CLCD_SHIFT_CURSOR_LEFT);
    4720:	80 e1       	ldi	r24, 0x10	; 16
    4722:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
    4726:	d6 cf       	rjmp	.-84     	; 0x46d4 <Change_Password+0x30e>
        }
      }
      else if (pass_length < PASSWORD_MAX_LENGTH)
    4728:	8c a5       	ldd	r24, Y+44	; 0x2c
    472a:	84 31       	cpi	r24, 0x14	; 20
    472c:	98 f6       	brcc	.-90     	; 0x46d4 <Change_Password+0x30e>
      {
        temp_pass[pass_length++] = KPD_Press;
    472e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4730:	28 2f       	mov	r18, r24
    4732:	30 e0       	ldi	r19, 0x00	; 0
    4734:	40 91 7e 05 	lds	r20, 0x057E
    4738:	ce 01       	movw	r24, r28
    473a:	8d 96       	adiw	r24, 0x2d	; 45
    473c:	fc 01       	movw	r30, r24
    473e:	e2 0f       	add	r30, r18
    4740:	f3 1f       	adc	r31, r19
    4742:	40 83       	st	Z, r20
    4744:	8c a5       	ldd	r24, Y+44	; 0x2c
    4746:	8f 5f       	subi	r24, 0xFF	; 255
    4748:	8c a7       	std	Y+44, r24	; 0x2c
        CLCD_vSendData('*');
    474a:	8a e2       	ldi	r24, 0x2A	; 42
    474c:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
    4750:	c1 cf       	rjmp	.-126    	; 0x46d4 <Change_Password+0x30e>
      }
    }
  }

  if (!Is_Password_Valid(temp_pass, pass_length))
    4752:	ce 01       	movw	r24, r28
    4754:	8d 96       	adiw	r24, 0x2d	; 45
    4756:	6c a5       	ldd	r22, Y+44	; 0x2c
    4758:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <Is_Password_Valid>
    475c:	88 23       	and	r24, r24
    475e:	09 f0       	breq	.+2      	; 0x4762 <Change_Password+0x39c>
    4760:	81 c0       	rjmp	.+258    	; 0x4864 <Change_Password+0x49e>
  {
    CLCD_vClearScreen();
    4762:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
    CLCD_vSendString((u8 *)"Weak Password!");
    4766:	86 e0       	ldi	r24, 0x06	; 6
    4768:	91 e0       	ldi	r25, 0x01	; 1
    476a:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    CLCD_vSetPosition(2, 1);
    476e:	82 e0       	ldi	r24, 0x02	; 2
    4770:	61 e0       	ldi	r22, 0x01	; 1
    4772:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
    CLCD_vSendString((u8 *)"Need: A,a,1,@");
    4776:	85 e1       	ldi	r24, 0x15	; 21
    4778:	91 e0       	ldi	r25, 0x01	; 1
    477a:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    477e:	80 e0       	ldi	r24, 0x00	; 0
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	aa ef       	ldi	r26, 0xFA	; 250
    4784:	b4 e4       	ldi	r27, 0x44	; 68
    4786:	8b 87       	std	Y+11, r24	; 0x0b
    4788:	9c 87       	std	Y+12, r25	; 0x0c
    478a:	ad 87       	std	Y+13, r26	; 0x0d
    478c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    478e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4790:	7c 85       	ldd	r23, Y+12	; 0x0c
    4792:	8d 85       	ldd	r24, Y+13	; 0x0d
    4794:	9e 85       	ldd	r25, Y+14	; 0x0e
    4796:	20 e0       	ldi	r18, 0x00	; 0
    4798:	30 e0       	ldi	r19, 0x00	; 0
    479a:	4a ef       	ldi	r20, 0xFA	; 250
    479c:	54 e4       	ldi	r21, 0x44	; 68
    479e:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    47a2:	dc 01       	movw	r26, r24
    47a4:	cb 01       	movw	r24, r22
    47a6:	8f 83       	std	Y+7, r24	; 0x07
    47a8:	98 87       	std	Y+8, r25	; 0x08
    47aa:	a9 87       	std	Y+9, r26	; 0x09
    47ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47ae:	6f 81       	ldd	r22, Y+7	; 0x07
    47b0:	78 85       	ldd	r23, Y+8	; 0x08
    47b2:	89 85       	ldd	r24, Y+9	; 0x09
    47b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    47b6:	20 e0       	ldi	r18, 0x00	; 0
    47b8:	30 e0       	ldi	r19, 0x00	; 0
    47ba:	40 e8       	ldi	r20, 0x80	; 128
    47bc:	5f e3       	ldi	r21, 0x3F	; 63
    47be:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    47c2:	88 23       	and	r24, r24
    47c4:	2c f4       	brge	.+10     	; 0x47d0 <Change_Password+0x40a>
		__ticks = 1;
    47c6:	81 e0       	ldi	r24, 0x01	; 1
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	9e 83       	std	Y+6, r25	; 0x06
    47cc:	8d 83       	std	Y+5, r24	; 0x05
    47ce:	3f c0       	rjmp	.+126    	; 0x484e <Change_Password+0x488>
	else if (__tmp > 65535)
    47d0:	6f 81       	ldd	r22, Y+7	; 0x07
    47d2:	78 85       	ldd	r23, Y+8	; 0x08
    47d4:	89 85       	ldd	r24, Y+9	; 0x09
    47d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	3f ef       	ldi	r19, 0xFF	; 255
    47dc:	4f e7       	ldi	r20, 0x7F	; 127
    47de:	57 e4       	ldi	r21, 0x47	; 71
    47e0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    47e4:	18 16       	cp	r1, r24
    47e6:	4c f5       	brge	.+82     	; 0x483a <Change_Password+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    47ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    47ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    47ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    47f0:	20 e0       	ldi	r18, 0x00	; 0
    47f2:	30 e0       	ldi	r19, 0x00	; 0
    47f4:	40 e2       	ldi	r20, 0x20	; 32
    47f6:	51 e4       	ldi	r21, 0x41	; 65
    47f8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    47fc:	dc 01       	movw	r26, r24
    47fe:	cb 01       	movw	r24, r22
    4800:	bc 01       	movw	r22, r24
    4802:	cd 01       	movw	r24, r26
    4804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4808:	dc 01       	movw	r26, r24
    480a:	cb 01       	movw	r24, r22
    480c:	9e 83       	std	Y+6, r25	; 0x06
    480e:	8d 83       	std	Y+5, r24	; 0x05
    4810:	0f c0       	rjmp	.+30     	; 0x4830 <Change_Password+0x46a>
    4812:	88 ec       	ldi	r24, 0xC8	; 200
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	9c 83       	std	Y+4, r25	; 0x04
    4818:	8b 83       	std	Y+3, r24	; 0x03
    481a:	8b 81       	ldd	r24, Y+3	; 0x03
    481c:	9c 81       	ldd	r25, Y+4	; 0x04
    481e:	01 97       	sbiw	r24, 0x01	; 1
    4820:	f1 f7       	brne	.-4      	; 0x481e <Change_Password+0x458>
    4822:	9c 83       	std	Y+4, r25	; 0x04
    4824:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4826:	8d 81       	ldd	r24, Y+5	; 0x05
    4828:	9e 81       	ldd	r25, Y+6	; 0x06
    482a:	01 97       	sbiw	r24, 0x01	; 1
    482c:	9e 83       	std	Y+6, r25	; 0x06
    482e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4830:	8d 81       	ldd	r24, Y+5	; 0x05
    4832:	9e 81       	ldd	r25, Y+6	; 0x06
    4834:	00 97       	sbiw	r24, 0x00	; 0
    4836:	69 f7       	brne	.-38     	; 0x4812 <Change_Password+0x44c>
    4838:	24 c0       	rjmp	.+72     	; 0x4882 <Change_Password+0x4bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    483a:	6f 81       	ldd	r22, Y+7	; 0x07
    483c:	78 85       	ldd	r23, Y+8	; 0x08
    483e:	89 85       	ldd	r24, Y+9	; 0x09
    4840:	9a 85       	ldd	r25, Y+10	; 0x0a
    4842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4846:	dc 01       	movw	r26, r24
    4848:	cb 01       	movw	r24, r22
    484a:	9e 83       	std	Y+6, r25	; 0x06
    484c:	8d 83       	std	Y+5, r24	; 0x05
    484e:	8d 81       	ldd	r24, Y+5	; 0x05
    4850:	9e 81       	ldd	r25, Y+6	; 0x06
    4852:	9a 83       	std	Y+2, r25	; 0x02
    4854:	89 83       	std	Y+1, r24	; 0x01
    4856:	89 81       	ldd	r24, Y+1	; 0x01
    4858:	9a 81       	ldd	r25, Y+2	; 0x02
    485a:	01 97       	sbiw	r24, 0x01	; 1
    485c:	f1 f7       	brne	.-4      	; 0x485a <Change_Password+0x494>
    485e:	9a 83       	std	Y+2, r25	; 0x02
    4860:	89 83       	std	Y+1, r24	; 0x01
    4862:	0f c0       	rjmp	.+30     	; 0x4882 <Change_Password+0x4bc>
    _delay_ms(2000);
    return;
  }

  Write_Password(Current_User, temp_pass, pass_length);
    4864:	80 91 65 05 	lds	r24, 0x0565
    4868:	9e 01       	movw	r18, r28
    486a:	23 5d       	subi	r18, 0xD3	; 211
    486c:	3f 4f       	sbci	r19, 0xFF	; 255
    486e:	b9 01       	movw	r22, r18
    4870:	4c a5       	ldd	r20, Y+44	; 0x2c
    4872:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <Write_Password>
  Log_Event(EVENT_PASS_CHANGE, Current_User);
    4876:	90 91 65 05 	lds	r25, 0x0565
    487a:	83 e0       	ldi	r24, 0x03	; 3
    487c:	69 2f       	mov	r22, r25
    487e:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <Log_Event>
}
    4882:	c9 5a       	subi	r28, 0xA9	; 169
    4884:	df 4f       	sbci	r29, 0xFF	; 255
    4886:	0f b6       	in	r0, 0x3f	; 63
    4888:	f8 94       	cli
    488a:	de bf       	out	0x3e, r29	; 62
    488c:	0f be       	out	0x3f, r0	; 63
    488e:	cd bf       	out	0x3d, r28	; 61
    4890:	cf 91       	pop	r28
    4892:	df 91       	pop	r29
    4894:	08 95       	ret

00004896 <Delete_User>:

u8 Delete_User(void)
{
    4896:	df 93       	push	r29
    4898:	cf 93       	push	r28
    489a:	cd b7       	in	r28, 0x3d	; 61
    489c:	de b7       	in	r29, 0x3e	; 62
    489e:	c8 57       	subi	r28, 0x78	; 120
    48a0:	d0 40       	sbci	r29, 0x00	; 0
    48a2:	0f b6       	in	r0, 0x3f	; 63
    48a4:	f8 94       	cli
    48a6:	de bf       	out	0x3e, r29	; 62
    48a8:	0f be       	out	0x3f, r0	; 63
    48aa:	cd bf       	out	0x3d, r28	; 61
  CLCD_vClearScreen();
    48ac:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
  CLCD_vSendString((u8 *)"Enter Pass to");
    48b0:	83 e2       	ldi	r24, 0x23	; 35
    48b2:	91 e0       	ldi	r25, 0x01	; 1
    48b4:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    48b8:	82 e0       	ldi	r24, 0x02	; 2
    48ba:	61 e0       	ldi	r22, 0x01	; 1
    48bc:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
  CLCD_vSendString((u8 *)"Delete Account");
    48c0:	81 e3       	ldi	r24, 0x31	; 49
    48c2:	91 e0       	ldi	r25, 0x01	; 1
    48c4:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>

  u8 temp_pass[21];
  u8 pass_length = 0;
    48c8:	18 a2       	std	Y+32, r1	; 0x20

  while (1)
  {
    Error_State = USART_u8ReceiveData(&KPD_Press);
    48ca:	8e e7       	ldi	r24, 0x7E	; 126
    48cc:	95 e0       	ldi	r25, 0x05	; 5
    48ce:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    48d2:	80 93 93 05 	sts	0x0593, r24
    if (Error_State == OK)
    48d6:	80 91 93 05 	lds	r24, 0x0593
    48da:	88 23       	and	r24, r24
    48dc:	b1 f7       	brne	.-20     	; 0x48ca <Delete_User+0x34>
    {
      if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    48de:	80 91 7e 05 	lds	r24, 0x057E
    48e2:	8d 30       	cpi	r24, 0x0D	; 13
    48e4:	69 f1       	breq	.+90     	; 0x4940 <Delete_User+0xaa>
    48e6:	80 91 7e 05 	lds	r24, 0x057E
    48ea:	8f 30       	cpi	r24, 0x0F	; 15
    48ec:	49 f1       	breq	.+82     	; 0x4940 <Delete_User+0xaa>
        break;
      else if (KPD_Press == 0x08)
    48ee:	80 91 7e 05 	lds	r24, 0x057E
    48f2:	88 30       	cpi	r24, 0x08	; 8
    48f4:	81 f4       	brne	.+32     	; 0x4916 <Delete_User+0x80>
      {
        if (pass_length > 0)
    48f6:	88 a1       	ldd	r24, Y+32	; 0x20
    48f8:	88 23       	and	r24, r24
    48fa:	39 f3       	breq	.-50     	; 0x48ca <Delete_User+0x34>
        {
          pass_length--;
    48fc:	88 a1       	ldd	r24, Y+32	; 0x20
    48fe:	81 50       	subi	r24, 0x01	; 1
    4900:	88 a3       	std	Y+32, r24	; 0x20
          CLCD_vSendCommand(CLCD_SHIFT_CURSOR_LEFT);
    4902:	80 e1       	ldi	r24, 0x10	; 16
    4904:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
          CLCD_vSendData(' ');
    4908:	80 e2       	ldi	r24, 0x20	; 32
    490a:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
          CLCD_vSendCommand(CLCD_SHIFT_CURSOR_LEFT);
    490e:	80 e1       	ldi	r24, 0x10	; 16
    4910:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
    4914:	da cf       	rjmp	.-76     	; 0x48ca <Delete_User+0x34>
        }
      }
      else if (pass_length < PASSWORD_MAX_LENGTH)
    4916:	88 a1       	ldd	r24, Y+32	; 0x20
    4918:	84 31       	cpi	r24, 0x14	; 20
    491a:	b8 f6       	brcc	.-82     	; 0x48ca <Delete_User+0x34>
      {
        temp_pass[pass_length++] = KPD_Press;
    491c:	88 a1       	ldd	r24, Y+32	; 0x20
    491e:	28 2f       	mov	r18, r24
    4920:	30 e0       	ldi	r19, 0x00	; 0
    4922:	40 91 7e 05 	lds	r20, 0x057E
    4926:	ce 01       	movw	r24, r28
    4928:	81 96       	adiw	r24, 0x21	; 33
    492a:	fc 01       	movw	r30, r24
    492c:	e2 0f       	add	r30, r18
    492e:	f3 1f       	adc	r31, r19
    4930:	40 83       	st	Z, r20
    4932:	88 a1       	ldd	r24, Y+32	; 0x20
    4934:	8f 5f       	subi	r24, 0xFF	; 255
    4936:	88 a3       	std	Y+32, r24	; 0x20
        CLCD_vSendData('*');
    4938:	8a e2       	ldi	r24, 0x2A	; 42
    493a:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
    493e:	c5 cf       	rjmp	.-118    	; 0x48ca <Delete_User+0x34>
    }
  }

  u8 stored_pass[21];
  u8 stored_length;
  Read_Password(Current_User, stored_pass, &stored_length);
    4940:	80 91 65 05 	lds	r24, 0x0565
    4944:	9e 01       	movw	r18, r28
    4946:	2a 5c       	subi	r18, 0xCA	; 202
    4948:	3f 4f       	sbci	r19, 0xFF	; 255
    494a:	ae 01       	movw	r20, r28
    494c:	45 5b       	subi	r20, 0xB5	; 181
    494e:	5f 4f       	sbci	r21, 0xFF	; 255
    4950:	b9 01       	movw	r22, r18
    4952:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <Read_Password>

  if (pass_length != stored_length)
    4956:	fe 01       	movw	r30, r28
    4958:	e5 5b       	subi	r30, 0xB5	; 181
    495a:	ff 4f       	sbci	r31, 0xFF	; 255
    495c:	90 81       	ld	r25, Z
    495e:	88 a1       	ldd	r24, Y+32	; 0x20
    4960:	89 17       	cp	r24, r25
    4962:	09 f4       	brne	.+2      	; 0x4966 <Delete_User+0xd0>
    4964:	7c c0       	rjmp	.+248    	; 0x4a5e <Delete_User+0x1c8>
  {
    CLCD_vClearScreen();
    4966:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
    CLCD_vSendString((u8 *)"Wrong Password!");
    496a:	8e ed       	ldi	r24, 0xDE	; 222
    496c:	90 e0       	ldi	r25, 0x00	; 0
    496e:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    4972:	80 e0       	ldi	r24, 0x00	; 0
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	aa e7       	ldi	r26, 0x7A	; 122
    4978:	b4 e4       	ldi	r27, 0x44	; 68
    497a:	89 8f       	std	Y+25, r24	; 0x19
    497c:	9a 8f       	std	Y+26, r25	; 0x1a
    497e:	ab 8f       	std	Y+27, r26	; 0x1b
    4980:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4982:	69 8d       	ldd	r22, Y+25	; 0x19
    4984:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4986:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4988:	9c 8d       	ldd	r25, Y+28	; 0x1c
    498a:	20 e0       	ldi	r18, 0x00	; 0
    498c:	30 e0       	ldi	r19, 0x00	; 0
    498e:	4a ef       	ldi	r20, 0xFA	; 250
    4990:	54 e4       	ldi	r21, 0x44	; 68
    4992:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4996:	dc 01       	movw	r26, r24
    4998:	cb 01       	movw	r24, r22
    499a:	8d 8b       	std	Y+21, r24	; 0x15
    499c:	9e 8b       	std	Y+22, r25	; 0x16
    499e:	af 8b       	std	Y+23, r26	; 0x17
    49a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    49a2:	6d 89       	ldd	r22, Y+21	; 0x15
    49a4:	7e 89       	ldd	r23, Y+22	; 0x16
    49a6:	8f 89       	ldd	r24, Y+23	; 0x17
    49a8:	98 8d       	ldd	r25, Y+24	; 0x18
    49aa:	20 e0       	ldi	r18, 0x00	; 0
    49ac:	30 e0       	ldi	r19, 0x00	; 0
    49ae:	40 e8       	ldi	r20, 0x80	; 128
    49b0:	5f e3       	ldi	r21, 0x3F	; 63
    49b2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    49b6:	88 23       	and	r24, r24
    49b8:	2c f4       	brge	.+10     	; 0x49c4 <Delete_User+0x12e>
		__ticks = 1;
    49ba:	81 e0       	ldi	r24, 0x01	; 1
    49bc:	90 e0       	ldi	r25, 0x00	; 0
    49be:	9c 8b       	std	Y+20, r25	; 0x14
    49c0:	8b 8b       	std	Y+19, r24	; 0x13
    49c2:	3f c0       	rjmp	.+126    	; 0x4a42 <Delete_User+0x1ac>
	else if (__tmp > 65535)
    49c4:	6d 89       	ldd	r22, Y+21	; 0x15
    49c6:	7e 89       	ldd	r23, Y+22	; 0x16
    49c8:	8f 89       	ldd	r24, Y+23	; 0x17
    49ca:	98 8d       	ldd	r25, Y+24	; 0x18
    49cc:	20 e0       	ldi	r18, 0x00	; 0
    49ce:	3f ef       	ldi	r19, 0xFF	; 255
    49d0:	4f e7       	ldi	r20, 0x7F	; 127
    49d2:	57 e4       	ldi	r21, 0x47	; 71
    49d4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    49d8:	18 16       	cp	r1, r24
    49da:	4c f5       	brge	.+82     	; 0x4a2e <Delete_User+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49dc:	69 8d       	ldd	r22, Y+25	; 0x19
    49de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49e4:	20 e0       	ldi	r18, 0x00	; 0
    49e6:	30 e0       	ldi	r19, 0x00	; 0
    49e8:	40 e2       	ldi	r20, 0x20	; 32
    49ea:	51 e4       	ldi	r21, 0x41	; 65
    49ec:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    49f0:	dc 01       	movw	r26, r24
    49f2:	cb 01       	movw	r24, r22
    49f4:	bc 01       	movw	r22, r24
    49f6:	cd 01       	movw	r24, r26
    49f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49fc:	dc 01       	movw	r26, r24
    49fe:	cb 01       	movw	r24, r22
    4a00:	9c 8b       	std	Y+20, r25	; 0x14
    4a02:	8b 8b       	std	Y+19, r24	; 0x13
    4a04:	0f c0       	rjmp	.+30     	; 0x4a24 <Delete_User+0x18e>
    4a06:	88 ec       	ldi	r24, 0xC8	; 200
    4a08:	90 e0       	ldi	r25, 0x00	; 0
    4a0a:	9a 8b       	std	Y+18, r25	; 0x12
    4a0c:	89 8b       	std	Y+17, r24	; 0x11
    4a0e:	89 89       	ldd	r24, Y+17	; 0x11
    4a10:	9a 89       	ldd	r25, Y+18	; 0x12
    4a12:	01 97       	sbiw	r24, 0x01	; 1
    4a14:	f1 f7       	brne	.-4      	; 0x4a12 <Delete_User+0x17c>
    4a16:	9a 8b       	std	Y+18, r25	; 0x12
    4a18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a1a:	8b 89       	ldd	r24, Y+19	; 0x13
    4a1c:	9c 89       	ldd	r25, Y+20	; 0x14
    4a1e:	01 97       	sbiw	r24, 0x01	; 1
    4a20:	9c 8b       	std	Y+20, r25	; 0x14
    4a22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a24:	8b 89       	ldd	r24, Y+19	; 0x13
    4a26:	9c 89       	ldd	r25, Y+20	; 0x14
    4a28:	00 97       	sbiw	r24, 0x00	; 0
    4a2a:	69 f7       	brne	.-38     	; 0x4a06 <Delete_User+0x170>
    4a2c:	14 c0       	rjmp	.+40     	; 0x4a56 <Delete_User+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a2e:	6d 89       	ldd	r22, Y+21	; 0x15
    4a30:	7e 89       	ldd	r23, Y+22	; 0x16
    4a32:	8f 89       	ldd	r24, Y+23	; 0x17
    4a34:	98 8d       	ldd	r25, Y+24	; 0x18
    4a36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a3a:	dc 01       	movw	r26, r24
    4a3c:	cb 01       	movw	r24, r22
    4a3e:	9c 8b       	std	Y+20, r25	; 0x14
    4a40:	8b 8b       	std	Y+19, r24	; 0x13
    4a42:	8b 89       	ldd	r24, Y+19	; 0x13
    4a44:	9c 89       	ldd	r25, Y+20	; 0x14
    4a46:	98 8b       	std	Y+16, r25	; 0x10
    4a48:	8f 87       	std	Y+15, r24	; 0x0f
    4a4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a4c:	98 89       	ldd	r25, Y+16	; 0x10
    4a4e:	01 97       	sbiw	r24, 0x01	; 1
    4a50:	f1 f7       	brne	.-4      	; 0x4a4e <Delete_User+0x1b8>
    4a52:	98 8b       	std	Y+16, r25	; 0x10
    4a54:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1000);
    return 0;
    4a56:	e9 96       	adiw	r28, 0x39	; 57
    4a58:	1f ae       	std	Y+63, r1	; 0x3f
    4a5a:	e9 97       	sbiw	r28, 0x39	; 57
    4a5c:	f2 c0       	rjmp	.+484    	; 0x4c42 <Delete_User+0x3ac>
  }

  for (u8 i = 0; i < pass_length; i++)
    4a5e:	1f 8e       	std	Y+31, r1	; 0x1f
    4a60:	94 c0       	rjmp	.+296    	; 0x4b8a <Delete_User+0x2f4>
  {
    if (temp_pass[i] != stored_pass[i])
    4a62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a64:	28 2f       	mov	r18, r24
    4a66:	30 e0       	ldi	r19, 0x00	; 0
    4a68:	ce 01       	movw	r24, r28
    4a6a:	81 96       	adiw	r24, 0x21	; 33
    4a6c:	fc 01       	movw	r30, r24
    4a6e:	e2 0f       	add	r30, r18
    4a70:	f3 1f       	adc	r31, r19
    4a72:	40 81       	ld	r20, Z
    4a74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a76:	28 2f       	mov	r18, r24
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	ce 01       	movw	r24, r28
    4a7c:	c6 96       	adiw	r24, 0x36	; 54
    4a7e:	fc 01       	movw	r30, r24
    4a80:	e2 0f       	add	r30, r18
    4a82:	f3 1f       	adc	r31, r19
    4a84:	80 81       	ld	r24, Z
    4a86:	48 17       	cp	r20, r24
    4a88:	09 f4       	brne	.+2      	; 0x4a8c <Delete_User+0x1f6>
    4a8a:	7c c0       	rjmp	.+248    	; 0x4b84 <Delete_User+0x2ee>
    {
      CLCD_vClearScreen();
    4a8c:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
      CLCD_vSendString((u8 *)"Wrong Password!");
    4a90:	8e ed       	ldi	r24, 0xDE	; 222
    4a92:	90 e0       	ldi	r25, 0x00	; 0
    4a94:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    4a98:	80 e0       	ldi	r24, 0x00	; 0
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	aa e7       	ldi	r26, 0x7A	; 122
    4a9e:	b4 e4       	ldi	r27, 0x44	; 68
    4aa0:	8b 87       	std	Y+11, r24	; 0x0b
    4aa2:	9c 87       	std	Y+12, r25	; 0x0c
    4aa4:	ad 87       	std	Y+13, r26	; 0x0d
    4aa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    4aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    4aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ab0:	20 e0       	ldi	r18, 0x00	; 0
    4ab2:	30 e0       	ldi	r19, 0x00	; 0
    4ab4:	4a ef       	ldi	r20, 0xFA	; 250
    4ab6:	54 e4       	ldi	r21, 0x44	; 68
    4ab8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4abc:	dc 01       	movw	r26, r24
    4abe:	cb 01       	movw	r24, r22
    4ac0:	8f 83       	std	Y+7, r24	; 0x07
    4ac2:	98 87       	std	Y+8, r25	; 0x08
    4ac4:	a9 87       	std	Y+9, r26	; 0x09
    4ac6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    4aca:	78 85       	ldd	r23, Y+8	; 0x08
    4acc:	89 85       	ldd	r24, Y+9	; 0x09
    4ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ad0:	20 e0       	ldi	r18, 0x00	; 0
    4ad2:	30 e0       	ldi	r19, 0x00	; 0
    4ad4:	40 e8       	ldi	r20, 0x80	; 128
    4ad6:	5f e3       	ldi	r21, 0x3F	; 63
    4ad8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4adc:	88 23       	and	r24, r24
    4ade:	2c f4       	brge	.+10     	; 0x4aea <Delete_User+0x254>
		__ticks = 1;
    4ae0:	81 e0       	ldi	r24, 0x01	; 1
    4ae2:	90 e0       	ldi	r25, 0x00	; 0
    4ae4:	9e 83       	std	Y+6, r25	; 0x06
    4ae6:	8d 83       	std	Y+5, r24	; 0x05
    4ae8:	3f c0       	rjmp	.+126    	; 0x4b68 <Delete_User+0x2d2>
	else if (__tmp > 65535)
    4aea:	6f 81       	ldd	r22, Y+7	; 0x07
    4aec:	78 85       	ldd	r23, Y+8	; 0x08
    4aee:	89 85       	ldd	r24, Y+9	; 0x09
    4af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4af2:	20 e0       	ldi	r18, 0x00	; 0
    4af4:	3f ef       	ldi	r19, 0xFF	; 255
    4af6:	4f e7       	ldi	r20, 0x7F	; 127
    4af8:	57 e4       	ldi	r21, 0x47	; 71
    4afa:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4afe:	18 16       	cp	r1, r24
    4b00:	4c f5       	brge	.+82     	; 0x4b54 <Delete_User+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b0a:	20 e0       	ldi	r18, 0x00	; 0
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	40 e2       	ldi	r20, 0x20	; 32
    4b10:	51 e4       	ldi	r21, 0x41	; 65
    4b12:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4b16:	dc 01       	movw	r26, r24
    4b18:	cb 01       	movw	r24, r22
    4b1a:	bc 01       	movw	r22, r24
    4b1c:	cd 01       	movw	r24, r26
    4b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b22:	dc 01       	movw	r26, r24
    4b24:	cb 01       	movw	r24, r22
    4b26:	9e 83       	std	Y+6, r25	; 0x06
    4b28:	8d 83       	std	Y+5, r24	; 0x05
    4b2a:	0f c0       	rjmp	.+30     	; 0x4b4a <Delete_User+0x2b4>
    4b2c:	88 ec       	ldi	r24, 0xC8	; 200
    4b2e:	90 e0       	ldi	r25, 0x00	; 0
    4b30:	9c 83       	std	Y+4, r25	; 0x04
    4b32:	8b 83       	std	Y+3, r24	; 0x03
    4b34:	8b 81       	ldd	r24, Y+3	; 0x03
    4b36:	9c 81       	ldd	r25, Y+4	; 0x04
    4b38:	01 97       	sbiw	r24, 0x01	; 1
    4b3a:	f1 f7       	brne	.-4      	; 0x4b38 <Delete_User+0x2a2>
    4b3c:	9c 83       	std	Y+4, r25	; 0x04
    4b3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b40:	8d 81       	ldd	r24, Y+5	; 0x05
    4b42:	9e 81       	ldd	r25, Y+6	; 0x06
    4b44:	01 97       	sbiw	r24, 0x01	; 1
    4b46:	9e 83       	std	Y+6, r25	; 0x06
    4b48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b4e:	00 97       	sbiw	r24, 0x00	; 0
    4b50:	69 f7       	brne	.-38     	; 0x4b2c <Delete_User+0x296>
    4b52:	14 c0       	rjmp	.+40     	; 0x4b7c <Delete_User+0x2e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b54:	6f 81       	ldd	r22, Y+7	; 0x07
    4b56:	78 85       	ldd	r23, Y+8	; 0x08
    4b58:	89 85       	ldd	r24, Y+9	; 0x09
    4b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b60:	dc 01       	movw	r26, r24
    4b62:	cb 01       	movw	r24, r22
    4b64:	9e 83       	std	Y+6, r25	; 0x06
    4b66:	8d 83       	std	Y+5, r24	; 0x05
    4b68:	8d 81       	ldd	r24, Y+5	; 0x05
    4b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b6c:	9a 83       	std	Y+2, r25	; 0x02
    4b6e:	89 83       	std	Y+1, r24	; 0x01
    4b70:	89 81       	ldd	r24, Y+1	; 0x01
    4b72:	9a 81       	ldd	r25, Y+2	; 0x02
    4b74:	01 97       	sbiw	r24, 0x01	; 1
    4b76:	f1 f7       	brne	.-4      	; 0x4b74 <Delete_User+0x2de>
    4b78:	9a 83       	std	Y+2, r25	; 0x02
    4b7a:	89 83       	std	Y+1, r24	; 0x01
      _delay_ms(1000);
      return 0;
    4b7c:	e9 96       	adiw	r28, 0x39	; 57
    4b7e:	1f ae       	std	Y+63, r1	; 0x3f
    4b80:	e9 97       	sbiw	r28, 0x39	; 57
    4b82:	5f c0       	rjmp	.+190    	; 0x4c42 <Delete_User+0x3ac>
    CLCD_vSendString((u8 *)"Wrong Password!");
    _delay_ms(1000);
    return 0;
  }

  for (u8 i = 0; i < pass_length; i++)
    4b84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b86:	8f 5f       	subi	r24, 0xFF	; 255
    4b88:	8f 8f       	std	Y+31, r24	; 0x1f
    4b8a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4b8c:	88 a1       	ldd	r24, Y+32	; 0x20
    4b8e:	98 17       	cp	r25, r24
    4b90:	08 f4       	brcc	.+2      	; 0x4b94 <Delete_User+0x2fe>
    4b92:	67 cf       	rjmp	.-306    	; 0x4a62 <Delete_User+0x1cc>
      return 0;
    }
  }

  // Move all users after current user one position back
  for (u8 i = Current_User; i < User_Count - 1; i++)
    4b94:	80 91 65 05 	lds	r24, 0x0565
    4b98:	8e 8f       	std	Y+30, r24	; 0x1e
    4b9a:	32 c0       	rjmp	.+100    	; 0x4c00 <Delete_User+0x36a>
  {
    u8 next_user = i + 1;
    4b9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b9e:	8f 5f       	subi	r24, 0xFF	; 255
    4ba0:	8d 8f       	std	Y+29, r24	; 0x1d
    u8 username[21], password[21];
    u8 uname_len, pass_len;

    Read_Username(next_user, username, &uname_len);
    4ba2:	9e 01       	movw	r18, r28
    4ba4:	24 5b       	subi	r18, 0xB4	; 180
    4ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ba8:	ae 01       	movw	r20, r28
    4baa:	4a 58       	subi	r20, 0x8A	; 138
    4bac:	5f 4f       	sbci	r21, 0xFF	; 255
    4bae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4bb0:	b9 01       	movw	r22, r18
    4bb2:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <Read_Username>
    Read_Password(next_user, password, &pass_len);
    4bb6:	9e 01       	movw	r18, r28
    4bb8:	2f 59       	subi	r18, 0x9F	; 159
    4bba:	3f 4f       	sbci	r19, 0xFF	; 255
    4bbc:	ae 01       	movw	r20, r28
    4bbe:	49 58       	subi	r20, 0x89	; 137
    4bc0:	5f 4f       	sbci	r21, 0xFF	; 255
    4bc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4bc4:	b9 01       	movw	r22, r18
    4bc6:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <Read_Password>

    Write_Username(i, username, uname_len);
    4bca:	fe 01       	movw	r30, r28
    4bcc:	ea 58       	subi	r30, 0x8A	; 138
    4bce:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd0:	90 81       	ld	r25, Z
    4bd2:	9e 01       	movw	r18, r28
    4bd4:	24 5b       	subi	r18, 0xB4	; 180
    4bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4bda:	b9 01       	movw	r22, r18
    4bdc:	49 2f       	mov	r20, r25
    4bde:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Write_Username>
    Write_Password(i, password, pass_len);
    4be2:	fe 01       	movw	r30, r28
    4be4:	e9 58       	subi	r30, 0x89	; 137
    4be6:	ff 4f       	sbci	r31, 0xFF	; 255
    4be8:	90 81       	ld	r25, Z
    4bea:	9e 01       	movw	r18, r28
    4bec:	2f 59       	subi	r18, 0x9F	; 159
    4bee:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4bf2:	b9 01       	movw	r22, r18
    4bf4:	49 2f       	mov	r20, r25
    4bf6:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <Write_Password>
      return 0;
    }
  }

  // Move all users after current user one position back
  for (u8 i = Current_User; i < User_Count - 1; i++)
    4bfa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4bfc:	8f 5f       	subi	r24, 0xFF	; 255
    4bfe:	8e 8f       	std	Y+30, r24	; 0x1e
    4c00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4c02:	28 2f       	mov	r18, r24
    4c04:	30 e0       	ldi	r19, 0x00	; 0
    4c06:	80 91 66 05 	lds	r24, 0x0566
    4c0a:	88 2f       	mov	r24, r24
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	01 97       	sbiw	r24, 0x01	; 1
    4c10:	28 17       	cp	r18, r24
    4c12:	39 07       	cpc	r19, r25
    4c14:	1c f2       	brlt	.-122    	; 0x4b9c <Delete_User+0x306>

    Write_Username(i, username, uname_len);
    Write_Password(i, password, pass_len);
  }

  User_Count--;
    4c16:	80 91 66 05 	lds	r24, 0x0566
    4c1a:	81 50       	subi	r24, 0x01	; 1
    4c1c:	80 93 66 05 	sts	0x0566, r24
  EEPROM_vWrite(EEPROM_UserCount_Location, User_Count);
    4c20:	20 91 66 05 	lds	r18, 0x0566
    4c24:	83 e1       	ldi	r24, 0x13	; 19
    4c26:	90 e0       	ldi	r25, 0x00	; 0
    4c28:	62 2f       	mov	r22, r18
    4c2a:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>

  Log_Event(EVENT_USER_DELETE, Current_User);
    4c2e:	90 91 65 05 	lds	r25, 0x0565
    4c32:	85 e0       	ldi	r24, 0x05	; 5
    4c34:	69 2f       	mov	r22, r25
    4c36:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <Log_Event>
  return 1;
    4c3a:	81 e0       	ldi	r24, 0x01	; 1
    4c3c:	e9 96       	adiw	r28, 0x39	; 57
    4c3e:	8f af       	std	Y+63, r24	; 0x3f
    4c40:	e9 97       	sbiw	r28, 0x39	; 57
    4c42:	e9 96       	adiw	r28, 0x39	; 57
    4c44:	8f ad       	ldd	r24, Y+63	; 0x3f
    4c46:	e9 97       	sbiw	r28, 0x39	; 57
}
    4c48:	c8 58       	subi	r28, 0x88	; 136
    4c4a:	df 4f       	sbci	r29, 0xFF	; 255
    4c4c:	0f b6       	in	r0, 0x3f	; 63
    4c4e:	f8 94       	cli
    4c50:	de bf       	out	0x3e, r29	; 62
    4c52:	0f be       	out	0x3f, r0	; 63
    4c54:	cd bf       	out	0x3d, r28	; 61
    4c56:	cf 91       	pop	r28
    4c58:	df 91       	pop	r29
    4c5a:	08 95       	ret

00004c5c <Delete_User_By_Admin>:

void Delete_User_By_Admin(u8 user_index)
{
    4c5c:	df 93       	push	r29
    4c5e:	cf 93       	push	r28
    4c60:	cd b7       	in	r28, 0x3d	; 61
    4c62:	de b7       	in	r29, 0x3e	; 62
    4c64:	af 97       	sbiw	r28, 0x2f	; 47
    4c66:	0f b6       	in	r0, 0x3f	; 63
    4c68:	f8 94       	cli
    4c6a:	de bf       	out	0x3e, r29	; 62
    4c6c:	0f be       	out	0x3f, r0	; 63
    4c6e:	cd bf       	out	0x3d, r28	; 61
    4c70:	8f a7       	std	Y+47, r24	; 0x2f
  if (!Is_Admin || user_index >= User_Count)
    4c72:	80 91 67 05 	lds	r24, 0x0567
    4c76:	88 23       	and	r24, r24
    4c78:	09 f4       	brne	.+2      	; 0x4c7c <Delete_User_By_Admin+0x20>
    4c7a:	50 c0       	rjmp	.+160    	; 0x4d1c <Delete_User_By_Admin+0xc0>
    4c7c:	90 91 66 05 	lds	r25, 0x0566
    4c80:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c82:	89 17       	cp	r24, r25
    4c84:	08 f0       	brcs	.+2      	; 0x4c88 <Delete_User_By_Admin+0x2c>
    4c86:	4a c0       	rjmp	.+148    	; 0x4d1c <Delete_User_By_Admin+0xc0>
    return;

  // Move all users after deleted user one position back
  for (u8 i = user_index; i < User_Count - 1; i++)
    4c88:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c8a:	8a 83       	std	Y+2, r24	; 0x02
    4c8c:	2c c0       	rjmp	.+88     	; 0x4ce6 <Delete_User_By_Admin+0x8a>
  {
    u8 next_user = i + 1;
    4c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c90:	8f 5f       	subi	r24, 0xFF	; 255
    4c92:	89 83       	std	Y+1, r24	; 0x01
    u8 username[21], password[21];
    u8 uname_len, pass_len;

    Read_Username(next_user, username, &uname_len);
    4c94:	9e 01       	movw	r18, r28
    4c96:	2d 5f       	subi	r18, 0xFD	; 253
    4c98:	3f 4f       	sbci	r19, 0xFF	; 255
    4c9a:	ae 01       	movw	r20, r28
    4c9c:	43 5d       	subi	r20, 0xD3	; 211
    4c9e:	5f 4f       	sbci	r21, 0xFF	; 255
    4ca0:	89 81       	ldd	r24, Y+1	; 0x01
    4ca2:	b9 01       	movw	r22, r18
    4ca4:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <Read_Username>
    Read_Password(next_user, password, &pass_len);
    4ca8:	9e 01       	movw	r18, r28
    4caa:	28 5e       	subi	r18, 0xE8	; 232
    4cac:	3f 4f       	sbci	r19, 0xFF	; 255
    4cae:	ae 01       	movw	r20, r28
    4cb0:	42 5d       	subi	r20, 0xD2	; 210
    4cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    4cb4:	89 81       	ldd	r24, Y+1	; 0x01
    4cb6:	b9 01       	movw	r22, r18
    4cb8:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <Read_Password>

    Write_Username(i, username, uname_len);
    4cbc:	9d a5       	ldd	r25, Y+45	; 0x2d
    4cbe:	9e 01       	movw	r18, r28
    4cc0:	2d 5f       	subi	r18, 0xFD	; 253
    4cc2:	3f 4f       	sbci	r19, 0xFF	; 255
    4cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    4cc6:	b9 01       	movw	r22, r18
    4cc8:	49 2f       	mov	r20, r25
    4cca:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Write_Username>
    Write_Password(i, password, pass_len);
    4cce:	9e a5       	ldd	r25, Y+46	; 0x2e
    4cd0:	9e 01       	movw	r18, r28
    4cd2:	28 5e       	subi	r18, 0xE8	; 232
    4cd4:	3f 4f       	sbci	r19, 0xFF	; 255
    4cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd8:	b9 01       	movw	r22, r18
    4cda:	49 2f       	mov	r20, r25
    4cdc:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <Write_Password>
{
  if (!Is_Admin || user_index >= User_Count)
    return;

  // Move all users after deleted user one position back
  for (u8 i = user_index; i < User_Count - 1; i++)
    4ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce2:	8f 5f       	subi	r24, 0xFF	; 255
    4ce4:	8a 83       	std	Y+2, r24	; 0x02
    4ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce8:	28 2f       	mov	r18, r24
    4cea:	30 e0       	ldi	r19, 0x00	; 0
    4cec:	80 91 66 05 	lds	r24, 0x0566
    4cf0:	88 2f       	mov	r24, r24
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	01 97       	sbiw	r24, 0x01	; 1
    4cf6:	28 17       	cp	r18, r24
    4cf8:	39 07       	cpc	r19, r25
    4cfa:	4c f2       	brlt	.-110    	; 0x4c8e <Delete_User_By_Admin+0x32>

    Write_Username(i, username, uname_len);
    Write_Password(i, password, pass_len);
  }

  User_Count--;
    4cfc:	80 91 66 05 	lds	r24, 0x0566
    4d00:	81 50       	subi	r24, 0x01	; 1
    4d02:	80 93 66 05 	sts	0x0566, r24
  EEPROM_vWrite(EEPROM_UserCount_Location, User_Count);
    4d06:	20 91 66 05 	lds	r18, 0x0566
    4d0a:	83 e1       	ldi	r24, 0x13	; 19
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
    4d0e:	62 2f       	mov	r22, r18
    4d10:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>

  Log_Event(EVENT_USER_DELETE, user_index);
    4d14:	85 e0       	ldi	r24, 0x05	; 5
    4d16:	6f a5       	ldd	r22, Y+47	; 0x2f
    4d18:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <Log_Event>
}
    4d1c:	af 96       	adiw	r28, 0x2f	; 47
    4d1e:	0f b6       	in	r0, 0x3f	; 63
    4d20:	f8 94       	cli
    4d22:	de bf       	out	0x3e, r29	; 62
    4d24:	0f be       	out	0x3f, r0	; 63
    4d26:	cd bf       	out	0x3d, r28	; 61
    4d28:	cf 91       	pop	r28
    4d2a:	df 91       	pop	r29
    4d2c:	08 95       	ret

00004d2e <List_Users>:

void List_Users(void)
{
    4d2e:	df 93       	push	r29
    4d30:	cf 93       	push	r28
    4d32:	cd b7       	in	r28, 0x3d	; 61
    4d34:	de b7       	in	r29, 0x3e	; 62
    4d36:	e3 97       	sbiw	r28, 0x33	; 51
    4d38:	0f b6       	in	r0, 0x3f	; 63
    4d3a:	f8 94       	cli
    4d3c:	de bf       	out	0x3e, r29	; 62
    4d3e:	0f be       	out	0x3f, r0	; 63
    4d40:	cd bf       	out	0x3d, r28	; 61
  if (!Is_Admin)
    4d42:	80 91 67 05 	lds	r24, 0x0567
    4d46:	88 23       	and	r24, r24
    4d48:	09 f4       	brne	.+2      	; 0x4d4c <List_Users+0x1e>
    4d4a:	32 c1       	rjmp	.+612    	; 0x4fb0 <List_Users+0x282>
    return;

  CLCD_vClearScreen();
    4d4c:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
  CLCD_vSendString((u8 *)"Users List:");
    4d50:	80 e4       	ldi	r24, 0x40	; 64
    4d52:	91 e0       	ldi	r25, 0x01	; 1
    4d54:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>

  for (u8 i = 0; i < User_Count; i++)
    4d58:	1d 8e       	std	Y+29, r1	; 0x1d
    4d5a:	b2 c0       	rjmp	.+356    	; 0x4ec0 <List_Users+0x192>
  {
    if (i > 3)
    4d5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d5e:	84 30       	cpi	r24, 0x04	; 4
    4d60:	08 f4       	brcc	.+2      	; 0x4d64 <List_Users+0x36>
    4d62:	83 c0       	rjmp	.+262    	; 0x4e6a <List_Users+0x13c>
    {
      CLCD_vSetPosition(4, 1);
    4d64:	84 e0       	ldi	r24, 0x04	; 4
    4d66:	61 e0       	ldi	r22, 0x01	; 1
    4d68:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
      CLCD_vSendString((u8 *)"More...");
    4d6c:	8c e4       	ldi	r24, 0x4C	; 76
    4d6e:	91 e0       	ldi	r25, 0x01	; 1
    4d70:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    4d74:	80 e0       	ldi	r24, 0x00	; 0
    4d76:	90 e0       	ldi	r25, 0x00	; 0
    4d78:	aa ef       	ldi	r26, 0xFA	; 250
    4d7a:	b4 e4       	ldi	r27, 0x44	; 68
    4d7c:	89 8f       	std	Y+25, r24	; 0x19
    4d7e:	9a 8f       	std	Y+26, r25	; 0x1a
    4d80:	ab 8f       	std	Y+27, r26	; 0x1b
    4d82:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d84:	69 8d       	ldd	r22, Y+25	; 0x19
    4d86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d8c:	20 e0       	ldi	r18, 0x00	; 0
    4d8e:	30 e0       	ldi	r19, 0x00	; 0
    4d90:	4a ef       	ldi	r20, 0xFA	; 250
    4d92:	54 e4       	ldi	r21, 0x44	; 68
    4d94:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4d98:	dc 01       	movw	r26, r24
    4d9a:	cb 01       	movw	r24, r22
    4d9c:	8d 8b       	std	Y+21, r24	; 0x15
    4d9e:	9e 8b       	std	Y+22, r25	; 0x16
    4da0:	af 8b       	std	Y+23, r26	; 0x17
    4da2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4da4:	6d 89       	ldd	r22, Y+21	; 0x15
    4da6:	7e 89       	ldd	r23, Y+22	; 0x16
    4da8:	8f 89       	ldd	r24, Y+23	; 0x17
    4daa:	98 8d       	ldd	r25, Y+24	; 0x18
    4dac:	20 e0       	ldi	r18, 0x00	; 0
    4dae:	30 e0       	ldi	r19, 0x00	; 0
    4db0:	40 e8       	ldi	r20, 0x80	; 128
    4db2:	5f e3       	ldi	r21, 0x3F	; 63
    4db4:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4db8:	88 23       	and	r24, r24
    4dba:	2c f4       	brge	.+10     	; 0x4dc6 <List_Users+0x98>
		__ticks = 1;
    4dbc:	81 e0       	ldi	r24, 0x01	; 1
    4dbe:	90 e0       	ldi	r25, 0x00	; 0
    4dc0:	9c 8b       	std	Y+20, r25	; 0x14
    4dc2:	8b 8b       	std	Y+19, r24	; 0x13
    4dc4:	3f c0       	rjmp	.+126    	; 0x4e44 <List_Users+0x116>
	else if (__tmp > 65535)
    4dc6:	6d 89       	ldd	r22, Y+21	; 0x15
    4dc8:	7e 89       	ldd	r23, Y+22	; 0x16
    4dca:	8f 89       	ldd	r24, Y+23	; 0x17
    4dcc:	98 8d       	ldd	r25, Y+24	; 0x18
    4dce:	20 e0       	ldi	r18, 0x00	; 0
    4dd0:	3f ef       	ldi	r19, 0xFF	; 255
    4dd2:	4f e7       	ldi	r20, 0x7F	; 127
    4dd4:	57 e4       	ldi	r21, 0x47	; 71
    4dd6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4dda:	18 16       	cp	r1, r24
    4ddc:	4c f5       	brge	.+82     	; 0x4e30 <List_Users+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dde:	69 8d       	ldd	r22, Y+25	; 0x19
    4de0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4de2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4de4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4de6:	20 e0       	ldi	r18, 0x00	; 0
    4de8:	30 e0       	ldi	r19, 0x00	; 0
    4dea:	40 e2       	ldi	r20, 0x20	; 32
    4dec:	51 e4       	ldi	r21, 0x41	; 65
    4dee:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4df2:	dc 01       	movw	r26, r24
    4df4:	cb 01       	movw	r24, r22
    4df6:	bc 01       	movw	r22, r24
    4df8:	cd 01       	movw	r24, r26
    4dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dfe:	dc 01       	movw	r26, r24
    4e00:	cb 01       	movw	r24, r22
    4e02:	9c 8b       	std	Y+20, r25	; 0x14
    4e04:	8b 8b       	std	Y+19, r24	; 0x13
    4e06:	0f c0       	rjmp	.+30     	; 0x4e26 <List_Users+0xf8>
    4e08:	88 ec       	ldi	r24, 0xC8	; 200
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	9a 8b       	std	Y+18, r25	; 0x12
    4e0e:	89 8b       	std	Y+17, r24	; 0x11
    4e10:	89 89       	ldd	r24, Y+17	; 0x11
    4e12:	9a 89       	ldd	r25, Y+18	; 0x12
    4e14:	01 97       	sbiw	r24, 0x01	; 1
    4e16:	f1 f7       	brne	.-4      	; 0x4e14 <List_Users+0xe6>
    4e18:	9a 8b       	std	Y+18, r25	; 0x12
    4e1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e1c:	8b 89       	ldd	r24, Y+19	; 0x13
    4e1e:	9c 89       	ldd	r25, Y+20	; 0x14
    4e20:	01 97       	sbiw	r24, 0x01	; 1
    4e22:	9c 8b       	std	Y+20, r25	; 0x14
    4e24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e26:	8b 89       	ldd	r24, Y+19	; 0x13
    4e28:	9c 89       	ldd	r25, Y+20	; 0x14
    4e2a:	00 97       	sbiw	r24, 0x00	; 0
    4e2c:	69 f7       	brne	.-38     	; 0x4e08 <List_Users+0xda>
    4e2e:	14 c0       	rjmp	.+40     	; 0x4e58 <List_Users+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e30:	6d 89       	ldd	r22, Y+21	; 0x15
    4e32:	7e 89       	ldd	r23, Y+22	; 0x16
    4e34:	8f 89       	ldd	r24, Y+23	; 0x17
    4e36:	98 8d       	ldd	r25, Y+24	; 0x18
    4e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e3c:	dc 01       	movw	r26, r24
    4e3e:	cb 01       	movw	r24, r22
    4e40:	9c 8b       	std	Y+20, r25	; 0x14
    4e42:	8b 8b       	std	Y+19, r24	; 0x13
    4e44:	8b 89       	ldd	r24, Y+19	; 0x13
    4e46:	9c 89       	ldd	r25, Y+20	; 0x14
    4e48:	98 8b       	std	Y+16, r25	; 0x10
    4e4a:	8f 87       	std	Y+15, r24	; 0x0f
    4e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e4e:	98 89       	ldd	r25, Y+16	; 0x10
    4e50:	01 97       	sbiw	r24, 0x01	; 1
    4e52:	f1 f7       	brne	.-4      	; 0x4e50 <List_Users+0x122>
    4e54:	98 8b       	std	Y+16, r25	; 0x10
    4e56:	8f 87       	std	Y+15, r24	; 0x0f
      _delay_ms(2000);
      CLCD_vClearScreen();
    4e58:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
      CLCD_vSendString((u8 *)"Users List:");
    4e5c:	80 e4       	ldi	r24, 0x40	; 64
    4e5e:	91 e0       	ldi	r25, 0x01	; 1
    4e60:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
      i = i - 3;
    4e64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e66:	83 50       	subi	r24, 0x03	; 3
    4e68:	8d 8f       	std	Y+29, r24	; 0x1d
    }

    u8 username[21];
    u8 length;
    Read_Username(i, username, &length);
    4e6a:	9e 01       	movw	r18, r28
    4e6c:	22 5e       	subi	r18, 0xE2	; 226
    4e6e:	3f 4f       	sbci	r19, 0xFF	; 255
    4e70:	ae 01       	movw	r20, r28
    4e72:	4d 5c       	subi	r20, 0xCD	; 205
    4e74:	5f 4f       	sbci	r21, 0xFF	; 255
    4e76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e78:	b9 01       	movw	r22, r18
    4e7a:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <Read_Username>

    CLCD_vSetPosition(i % 3 + 1, 1);
    4e7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e80:	93 e0       	ldi	r25, 0x03	; 3
    4e82:	69 2f       	mov	r22, r25
    4e84:	0e 94 24 3a 	call	0x7448	; 0x7448 <__udivmodqi4>
    4e88:	89 2f       	mov	r24, r25
    4e8a:	8f 5f       	subi	r24, 0xFF	; 255
    4e8c:	61 e0       	ldi	r22, 0x01	; 1
    4e8e:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
    CLCD_vSendIntNumber(i + 1);
    4e92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e94:	88 2f       	mov	r24, r24
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	01 96       	adiw	r24, 0x01	; 1
    4e9a:	aa 27       	eor	r26, r26
    4e9c:	97 fd       	sbrc	r25, 7
    4e9e:	a0 95       	com	r26
    4ea0:	ba 2f       	mov	r27, r26
    4ea2:	bc 01       	movw	r22, r24
    4ea4:	cd 01       	movw	r24, r26
    4ea6:	0e 94 8b 1a 	call	0x3516	; 0x3516 <CLCD_vSendIntNumber>
    CLCD_vSendString((u8 *)": ");
    4eaa:	84 e5       	ldi	r24, 0x54	; 84
    4eac:	91 e0       	ldi	r25, 0x01	; 1
    4eae:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    CLCD_vSendString(username);
    4eb2:	ce 01       	movw	r24, r28
    4eb4:	4e 96       	adiw	r24, 0x1e	; 30
    4eb6:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    return;

  CLCD_vClearScreen();
  CLCD_vSendString((u8 *)"Users List:");

  for (u8 i = 0; i < User_Count; i++)
    4eba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ebc:	8f 5f       	subi	r24, 0xFF	; 255
    4ebe:	8d 8f       	std	Y+29, r24	; 0x1d
    4ec0:	90 91 66 05 	lds	r25, 0x0566
    4ec4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ec6:	89 17       	cp	r24, r25
    4ec8:	08 f4       	brcc	.+2      	; 0x4ecc <List_Users+0x19e>
    4eca:	48 cf       	rjmp	.-368    	; 0x4d5c <List_Users+0x2e>
    4ecc:	80 e0       	ldi	r24, 0x00	; 0
    4ece:	90 e8       	ldi	r25, 0x80	; 128
    4ed0:	ab e3       	ldi	r26, 0x3B	; 59
    4ed2:	b5 e4       	ldi	r27, 0x45	; 69
    4ed4:	8b 87       	std	Y+11, r24	; 0x0b
    4ed6:	9c 87       	std	Y+12, r25	; 0x0c
    4ed8:	ad 87       	std	Y+13, r26	; 0x0d
    4eda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ee4:	20 e0       	ldi	r18, 0x00	; 0
    4ee6:	30 e0       	ldi	r19, 0x00	; 0
    4ee8:	4a ef       	ldi	r20, 0xFA	; 250
    4eea:	54 e4       	ldi	r21, 0x44	; 68
    4eec:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4ef0:	dc 01       	movw	r26, r24
    4ef2:	cb 01       	movw	r24, r22
    4ef4:	8f 83       	std	Y+7, r24	; 0x07
    4ef6:	98 87       	std	Y+8, r25	; 0x08
    4ef8:	a9 87       	std	Y+9, r26	; 0x09
    4efa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4efc:	6f 81       	ldd	r22, Y+7	; 0x07
    4efe:	78 85       	ldd	r23, Y+8	; 0x08
    4f00:	89 85       	ldd	r24, Y+9	; 0x09
    4f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f04:	20 e0       	ldi	r18, 0x00	; 0
    4f06:	30 e0       	ldi	r19, 0x00	; 0
    4f08:	40 e8       	ldi	r20, 0x80	; 128
    4f0a:	5f e3       	ldi	r21, 0x3F	; 63
    4f0c:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    4f10:	88 23       	and	r24, r24
    4f12:	2c f4       	brge	.+10     	; 0x4f1e <List_Users+0x1f0>
		__ticks = 1;
    4f14:	81 e0       	ldi	r24, 0x01	; 1
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	9e 83       	std	Y+6, r25	; 0x06
    4f1a:	8d 83       	std	Y+5, r24	; 0x05
    4f1c:	3f c0       	rjmp	.+126    	; 0x4f9c <List_Users+0x26e>
	else if (__tmp > 65535)
    4f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    4f20:	78 85       	ldd	r23, Y+8	; 0x08
    4f22:	89 85       	ldd	r24, Y+9	; 0x09
    4f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f26:	20 e0       	ldi	r18, 0x00	; 0
    4f28:	3f ef       	ldi	r19, 0xFF	; 255
    4f2a:	4f e7       	ldi	r20, 0x7F	; 127
    4f2c:	57 e4       	ldi	r21, 0x47	; 71
    4f2e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    4f32:	18 16       	cp	r1, r24
    4f34:	4c f5       	brge	.+82     	; 0x4f88 <List_Users+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f36:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f38:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f3e:	20 e0       	ldi	r18, 0x00	; 0
    4f40:	30 e0       	ldi	r19, 0x00	; 0
    4f42:	40 e2       	ldi	r20, 0x20	; 32
    4f44:	51 e4       	ldi	r21, 0x41	; 65
    4f46:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    4f4a:	dc 01       	movw	r26, r24
    4f4c:	cb 01       	movw	r24, r22
    4f4e:	bc 01       	movw	r22, r24
    4f50:	cd 01       	movw	r24, r26
    4f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f56:	dc 01       	movw	r26, r24
    4f58:	cb 01       	movw	r24, r22
    4f5a:	9e 83       	std	Y+6, r25	; 0x06
    4f5c:	8d 83       	std	Y+5, r24	; 0x05
    4f5e:	0f c0       	rjmp	.+30     	; 0x4f7e <List_Users+0x250>
    4f60:	88 ec       	ldi	r24, 0xC8	; 200
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	9c 83       	std	Y+4, r25	; 0x04
    4f66:	8b 83       	std	Y+3, r24	; 0x03
    4f68:	8b 81       	ldd	r24, Y+3	; 0x03
    4f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f6c:	01 97       	sbiw	r24, 0x01	; 1
    4f6e:	f1 f7       	brne	.-4      	; 0x4f6c <List_Users+0x23e>
    4f70:	9c 83       	std	Y+4, r25	; 0x04
    4f72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f74:	8d 81       	ldd	r24, Y+5	; 0x05
    4f76:	9e 81       	ldd	r25, Y+6	; 0x06
    4f78:	01 97       	sbiw	r24, 0x01	; 1
    4f7a:	9e 83       	std	Y+6, r25	; 0x06
    4f7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f80:	9e 81       	ldd	r25, Y+6	; 0x06
    4f82:	00 97       	sbiw	r24, 0x00	; 0
    4f84:	69 f7       	brne	.-38     	; 0x4f60 <List_Users+0x232>
    4f86:	14 c0       	rjmp	.+40     	; 0x4fb0 <List_Users+0x282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f88:	6f 81       	ldd	r22, Y+7	; 0x07
    4f8a:	78 85       	ldd	r23, Y+8	; 0x08
    4f8c:	89 85       	ldd	r24, Y+9	; 0x09
    4f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f94:	dc 01       	movw	r26, r24
    4f96:	cb 01       	movw	r24, r22
    4f98:	9e 83       	std	Y+6, r25	; 0x06
    4f9a:	8d 83       	std	Y+5, r24	; 0x05
    4f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    4f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    4fa0:	9a 83       	std	Y+2, r25	; 0x02
    4fa2:	89 83       	std	Y+1, r24	; 0x01
    4fa4:	89 81       	ldd	r24, Y+1	; 0x01
    4fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa8:	01 97       	sbiw	r24, 0x01	; 1
    4faa:	f1 f7       	brne	.-4      	; 0x4fa8 <List_Users+0x27a>
    4fac:	9a 83       	std	Y+2, r25	; 0x02
    4fae:	89 83       	std	Y+1, r24	; 0x01
    CLCD_vSendString((u8 *)": ");
    CLCD_vSendString(username);
  }

  _delay_ms(3000);
}
    4fb0:	e3 96       	adiw	r28, 0x33	; 51
    4fb2:	0f b6       	in	r0, 0x3f	; 63
    4fb4:	f8 94       	cli
    4fb6:	de bf       	out	0x3e, r29	; 62
    4fb8:	0f be       	out	0x3f, r0	; 63
    4fba:	cd bf       	out	0x3d, r28	; 61
    4fbc:	cf 91       	pop	r28
    4fbe:	df 91       	pop	r29
    4fc0:	08 95       	ret

00004fc2 <User_Menu>:

void User_Menu(void)
{
    4fc2:	df 93       	push	r29
    4fc4:	cf 93       	push	r28
    4fc6:	00 d0       	rcall	.+0      	; 0x4fc8 <User_Menu+0x6>
    4fc8:	cd b7       	in	r28, 0x3d	; 61
    4fca:	de b7       	in	r29, 0x3e	; 62
  while (1)
  {
    CLCD_vClearScreen();
    4fcc:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
    CLCD_vSendString((u8 *)"1:Change Pass");
    4fd0:	87 e5       	ldi	r24, 0x57	; 87
    4fd2:	91 e0       	ldi	r25, 0x01	; 1
    4fd4:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    CLCD_vSetPosition(2, 1);
    4fd8:	82 e0       	ldi	r24, 0x02	; 2
    4fda:	61 e0       	ldi	r22, 0x01	; 1
    4fdc:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
    CLCD_vSendString((u8 *)"2:Change User");
    4fe0:	85 e6       	ldi	r24, 0x65	; 101
    4fe2:	91 e0       	ldi	r25, 0x01	; 1
    4fe4:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    CLCD_vSetPosition(3, 1);
    4fe8:	83 e0       	ldi	r24, 0x03	; 3
    4fea:	61 e0       	ldi	r22, 0x01	; 1
    4fec:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
    CLCD_vSendString((u8 *)"3:Delete Account");
    4ff0:	83 e7       	ldi	r24, 0x73	; 115
    4ff2:	91 e0       	ldi	r25, 0x01	; 1
    4ff4:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    CLCD_vSetPosition(4, 1);
    4ff8:	84 e0       	ldi	r24, 0x04	; 4
    4ffa:	61 e0       	ldi	r22, 0x01	; 1
    4ffc:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
    CLCD_vSendString((u8 *)"4:Logout");
    5000:	84 e8       	ldi	r24, 0x84	; 132
    5002:	91 e0       	ldi	r25, 0x01	; 1
    5004:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>

    while (1)
    {
      Error_State = USART_u8ReceiveData(&KPD_Press);
    5008:	8e e7       	ldi	r24, 0x7E	; 126
    500a:	95 e0       	ldi	r25, 0x05	; 5
    500c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    5010:	80 93 93 05 	sts	0x0593, r24
      if (Error_State == OK)
    5014:	80 91 93 05 	lds	r24, 0x0593
    5018:	88 23       	and	r24, r24
    501a:	b1 f7       	brne	.-20     	; 0x5008 <User_Menu+0x46>
      {
        if (KPD_Press >= '1' && KPD_Press <= '4')
    501c:	80 91 7e 05 	lds	r24, 0x057E
    5020:	81 33       	cpi	r24, 0x31	; 49
    5022:	90 f3       	brcs	.-28     	; 0x5008 <User_Menu+0x46>
    5024:	80 91 7e 05 	lds	r24, 0x057E
    5028:	85 33       	cpi	r24, 0x35	; 53
    502a:	70 f7       	brcc	.-36     	; 0x5008 <User_Menu+0x46>
          break;
      }
    }

    switch (KPD_Press)
    502c:	80 91 7e 05 	lds	r24, 0x057E
    5030:	28 2f       	mov	r18, r24
    5032:	30 e0       	ldi	r19, 0x00	; 0
    5034:	3a 83       	std	Y+2, r19	; 0x02
    5036:	29 83       	std	Y+1, r18	; 0x01
    5038:	89 81       	ldd	r24, Y+1	; 0x01
    503a:	9a 81       	ldd	r25, Y+2	; 0x02
    503c:	82 33       	cpi	r24, 0x32	; 50
    503e:	91 05       	cpc	r25, r1
    5040:	c9 f0       	breq	.+50     	; 0x5074 <User_Menu+0xb2>
    5042:	29 81       	ldd	r18, Y+1	; 0x01
    5044:	3a 81       	ldd	r19, Y+2	; 0x02
    5046:	23 33       	cpi	r18, 0x33	; 51
    5048:	31 05       	cpc	r19, r1
    504a:	34 f4       	brge	.+12     	; 0x5058 <User_Menu+0x96>
    504c:	89 81       	ldd	r24, Y+1	; 0x01
    504e:	9a 81       	ldd	r25, Y+2	; 0x02
    5050:	81 33       	cpi	r24, 0x31	; 49
    5052:	91 05       	cpc	r25, r1
    5054:	61 f0       	breq	.+24     	; 0x506e <User_Menu+0xac>
    5056:	ba cf       	rjmp	.-140    	; 0x4fcc <User_Menu+0xa>
    5058:	29 81       	ldd	r18, Y+1	; 0x01
    505a:	3a 81       	ldd	r19, Y+2	; 0x02
    505c:	23 33       	cpi	r18, 0x33	; 51
    505e:	31 05       	cpc	r19, r1
    5060:	61 f0       	breq	.+24     	; 0x507a <User_Menu+0xb8>
    5062:	89 81       	ldd	r24, Y+1	; 0x01
    5064:	9a 81       	ldd	r25, Y+2	; 0x02
    5066:	84 33       	cpi	r24, 0x34	; 52
    5068:	91 05       	cpc	r25, r1
    506a:	61 f0       	breq	.+24     	; 0x5084 <User_Menu+0xc2>
    506c:	af cf       	rjmp	.-162    	; 0x4fcc <User_Menu+0xa>
    {
    case '1':
      Change_Password();
    506e:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <Change_Password>
    5072:	ac cf       	rjmp	.-168    	; 0x4fcc <User_Menu+0xa>
      break;
    case '2':
      Change_Username();
    5074:	0e 94 cd 20 	call	0x419a	; 0x419a <Change_Username>
    5078:	a9 cf       	rjmp	.-174    	; 0x4fcc <User_Menu+0xa>
      break;
    case '3':
      if (Delete_User())
    507a:	0e 94 4b 24 	call	0x4896	; 0x4896 <Delete_User>
    507e:	88 23       	and	r24, r24
    5080:	09 f4       	brne	.+2      	; 0x5084 <User_Menu+0xc2>
    5082:	a4 cf       	rjmp	.-184    	; 0x4fcc <User_Menu+0xa>
      break;
    case '4':
      return;
    }
  }
}
    5084:	0f 90       	pop	r0
    5086:	0f 90       	pop	r0
    5088:	cf 91       	pop	r28
    508a:	df 91       	pop	r29
    508c:	08 95       	ret

0000508e <Admin_Menu>:

void Admin_Menu(void)
{
    508e:	df 93       	push	r29
    5090:	cf 93       	push	r28
    5092:	00 d0       	rcall	.+0      	; 0x5094 <Admin_Menu+0x6>
    5094:	0f 92       	push	r0
    5096:	cd b7       	in	r28, 0x3d	; 61
    5098:	de b7       	in	r29, 0x3e	; 62
  while (1)
  {
    CLCD_vClearScreen();
    509a:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
    CLCD_vSendString((u8 *)"1:List Users");
    509e:	8d e8       	ldi	r24, 0x8D	; 141
    50a0:	91 e0       	ldi	r25, 0x01	; 1
    50a2:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    CLCD_vSetPosition(2, 1);
    50a6:	82 e0       	ldi	r24, 0x02	; 2
    50a8:	61 e0       	ldi	r22, 0x01	; 1
    50aa:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
    CLCD_vSendString((u8 *)"2:Delete User");
    50ae:	8a e9       	ldi	r24, 0x9A	; 154
    50b0:	91 e0       	ldi	r25, 0x01	; 1
    50b2:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    CLCD_vSetPosition(3, 1);
    50b6:	83 e0       	ldi	r24, 0x03	; 3
    50b8:	61 e0       	ldi	r22, 0x01	; 1
    50ba:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
    CLCD_vSendString((u8 *)"3:User Menu");
    50be:	88 ea       	ldi	r24, 0xA8	; 168
    50c0:	91 e0       	ldi	r25, 0x01	; 1
    50c2:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    CLCD_vSetPosition(4, 1);
    50c6:	84 e0       	ldi	r24, 0x04	; 4
    50c8:	61 e0       	ldi	r22, 0x01	; 1
    50ca:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
    CLCD_vSendString((u8 *)"4:Logout");
    50ce:	84 e8       	ldi	r24, 0x84	; 132
    50d0:	91 e0       	ldi	r25, 0x01	; 1
    50d2:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>

    while (1)
    {
      Error_State = USART_u8ReceiveData(&KPD_Press);
    50d6:	8e e7       	ldi	r24, 0x7E	; 126
    50d8:	95 e0       	ldi	r25, 0x05	; 5
    50da:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    50de:	80 93 93 05 	sts	0x0593, r24
      if (Error_State == OK)
    50e2:	80 91 93 05 	lds	r24, 0x0593
    50e6:	88 23       	and	r24, r24
    50e8:	b1 f7       	brne	.-20     	; 0x50d6 <Admin_Menu+0x48>
      {
        if (KPD_Press >= '1' && KPD_Press <= '4')
    50ea:	80 91 7e 05 	lds	r24, 0x057E
    50ee:	81 33       	cpi	r24, 0x31	; 49
    50f0:	90 f3       	brcs	.-28     	; 0x50d6 <Admin_Menu+0x48>
    50f2:	80 91 7e 05 	lds	r24, 0x057E
    50f6:	85 33       	cpi	r24, 0x35	; 53
    50f8:	70 f7       	brcc	.-36     	; 0x50d6 <Admin_Menu+0x48>
          break;
      }
    }

    switch (KPD_Press)
    50fa:	80 91 7e 05 	lds	r24, 0x057E
    50fe:	28 2f       	mov	r18, r24
    5100:	30 e0       	ldi	r19, 0x00	; 0
    5102:	3b 83       	std	Y+3, r19	; 0x03
    5104:	2a 83       	std	Y+2, r18	; 0x02
    5106:	8a 81       	ldd	r24, Y+2	; 0x02
    5108:	9b 81       	ldd	r25, Y+3	; 0x03
    510a:	82 33       	cpi	r24, 0x32	; 50
    510c:	91 05       	cpc	r25, r1
    510e:	d9 f0       	breq	.+54     	; 0x5146 <Admin_Menu+0xb8>
    5110:	2a 81       	ldd	r18, Y+2	; 0x02
    5112:	3b 81       	ldd	r19, Y+3	; 0x03
    5114:	23 33       	cpi	r18, 0x33	; 51
    5116:	31 05       	cpc	r19, r1
    5118:	34 f4       	brge	.+12     	; 0x5126 <Admin_Menu+0x98>
    511a:	8a 81       	ldd	r24, Y+2	; 0x02
    511c:	9b 81       	ldd	r25, Y+3	; 0x03
    511e:	81 33       	cpi	r24, 0x31	; 49
    5120:	91 05       	cpc	r25, r1
    5122:	71 f0       	breq	.+28     	; 0x5140 <Admin_Menu+0xb2>
    5124:	ba cf       	rjmp	.-140    	; 0x509a <Admin_Menu+0xc>
    5126:	2a 81       	ldd	r18, Y+2	; 0x02
    5128:	3b 81       	ldd	r19, Y+3	; 0x03
    512a:	23 33       	cpi	r18, 0x33	; 51
    512c:	31 05       	cpc	r19, r1
    512e:	09 f4       	brne	.+2      	; 0x5132 <Admin_Menu+0xa4>
    5130:	50 c0       	rjmp	.+160    	; 0x51d2 <Admin_Menu+0x144>
    5132:	8a 81       	ldd	r24, Y+2	; 0x02
    5134:	9b 81       	ldd	r25, Y+3	; 0x03
    5136:	84 33       	cpi	r24, 0x34	; 52
    5138:	91 05       	cpc	r25, r1
    513a:	09 f4       	brne	.+2      	; 0x513e <Admin_Menu+0xb0>
    513c:	4d c0       	rjmp	.+154    	; 0x51d8 <Admin_Menu+0x14a>
    513e:	ad cf       	rjmp	.-166    	; 0x509a <Admin_Menu+0xc>
    {
    case '1':
      List_Users();
    5140:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <List_Users>
    5144:	aa cf       	rjmp	.-172    	; 0x509a <Admin_Menu+0xc>
      break;
    case '2':
    {
      CLCD_vClearScreen();
    5146:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
      CLCD_vSendString((u8 *)"User Number:");
    514a:	84 eb       	ldi	r24, 0xB4	; 180
    514c:	91 e0       	ldi	r25, 0x01	; 1
    514e:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>

      u8 user_num = 0;
    5152:	19 82       	std	Y+1, r1	; 0x01
      while (1)
      {
        Error_State = USART_u8ReceiveData(&KPD_Press);
    5154:	8e e7       	ldi	r24, 0x7E	; 126
    5156:	95 e0       	ldi	r25, 0x05	; 5
    5158:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    515c:	80 93 93 05 	sts	0x0593, r24
        if (Error_State == OK)
    5160:	80 91 93 05 	lds	r24, 0x0593
    5164:	88 23       	and	r24, r24
    5166:	b1 f7       	brne	.-20     	; 0x5154 <Admin_Menu+0xc6>
        {
          if (KPD_Press >= '0' && KPD_Press <= '9')
    5168:	80 91 7e 05 	lds	r24, 0x057E
    516c:	80 33       	cpi	r24, 0x30	; 48
    516e:	e0 f0       	brcs	.+56     	; 0x51a8 <Admin_Menu+0x11a>
    5170:	80 91 7e 05 	lds	r24, 0x057E
    5174:	8a 33       	cpi	r24, 0x3A	; 58
    5176:	c0 f4       	brcc	.+48     	; 0x51a8 <Admin_Menu+0x11a>
          {
            user_num = user_num * 10 + (KPD_Press - '0');
    5178:	89 81       	ldd	r24, Y+1	; 0x01
    517a:	88 2f       	mov	r24, r24
    517c:	90 e0       	ldi	r25, 0x00	; 0
    517e:	9c 01       	movw	r18, r24
    5180:	22 0f       	add	r18, r18
    5182:	33 1f       	adc	r19, r19
    5184:	c9 01       	movw	r24, r18
    5186:	88 0f       	add	r24, r24
    5188:	99 1f       	adc	r25, r25
    518a:	88 0f       	add	r24, r24
    518c:	99 1f       	adc	r25, r25
    518e:	82 0f       	add	r24, r18
    5190:	93 1f       	adc	r25, r19
    5192:	98 2f       	mov	r25, r24
    5194:	80 91 7e 05 	lds	r24, 0x057E
    5198:	89 0f       	add	r24, r25
    519a:	80 53       	subi	r24, 0x30	; 48
    519c:	89 83       	std	Y+1, r24	; 0x01
            CLCD_vSendData(KPD_Press);
    519e:	80 91 7e 05 	lds	r24, 0x057E
    51a2:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
    51a6:	d6 cf       	rjmp	.-84     	; 0x5154 <Admin_Menu+0xc6>
          }
          else if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    51a8:	80 91 7e 05 	lds	r24, 0x057E
    51ac:	8d 30       	cpi	r24, 0x0D	; 13
    51ae:	21 f0       	breq	.+8      	; 0x51b8 <Admin_Menu+0x12a>
    51b0:	80 91 7e 05 	lds	r24, 0x057E
    51b4:	8f 30       	cpi	r24, 0x0F	; 15
    51b6:	71 f6       	brne	.-100    	; 0x5154 <Admin_Menu+0xc6>
          {
            if (user_num > 0 && user_num <= User_Count)
    51b8:	89 81       	ldd	r24, Y+1	; 0x01
    51ba:	88 23       	and	r24, r24
    51bc:	59 f2       	breq	.-106    	; 0x5154 <Admin_Menu+0xc6>
    51be:	90 91 66 05 	lds	r25, 0x0566
    51c2:	89 81       	ldd	r24, Y+1	; 0x01
    51c4:	98 17       	cp	r25, r24
    51c6:	30 f2       	brcs	.-116    	; 0x5154 <Admin_Menu+0xc6>
              break;
          }
        }
      }
      Delete_User_By_Admin(user_num - 1);
    51c8:	89 81       	ldd	r24, Y+1	; 0x01
    51ca:	81 50       	subi	r24, 0x01	; 1
    51cc:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <Delete_User_By_Admin>
    51d0:	64 cf       	rjmp	.-312    	; 0x509a <Admin_Menu+0xc>
      break;
    }
    case '3':
      User_Menu();
    51d2:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <User_Menu>
    51d6:	61 cf       	rjmp	.-318    	; 0x509a <Admin_Menu+0xc>
      break;
    case '4':
      return;
    }
  }
}
    51d8:	0f 90       	pop	r0
    51da:	0f 90       	pop	r0
    51dc:	0f 90       	pop	r0
    51de:	cf 91       	pop	r28
    51e0:	df 91       	pop	r29
    51e2:	08 95       	ret

000051e4 <EEPROM_vInit>:

void EEPROM_vInit(void)
{
    51e4:	df 93       	push	r29
    51e6:	cf 93       	push	r28
    51e8:	cd b7       	in	r28, 0x3d	; 61
    51ea:	de b7       	in	r29, 0x3e	; 62
  /* Read number of users */
  User_Count = EEPROM_vRead(EEPROM_UserCount_Location);
    51ec:	83 e1       	ldi	r24, 0x13	; 19
    51ee:	90 e0       	ldi	r25, 0x00	; 0
    51f0:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    51f4:	80 93 66 05 	sts	0x0566, r24
  if (User_Count == 0xFF)
    51f8:	80 91 66 05 	lds	r24, 0x0566
    51fc:	8f 3f       	cpi	r24, 0xFF	; 255
    51fe:	49 f4       	brne	.+18     	; 0x5212 <EEPROM_vInit+0x2e>
  { // First time initialization
    User_Count = 0;
    5200:	10 92 66 05 	sts	0x0566, r1
    EEPROM_vWrite(EEPROM_UserCount_Location, User_Count);
    5204:	20 91 66 05 	lds	r18, 0x0566
    5208:	83 e1       	ldi	r24, 0x13	; 19
    520a:	90 e0       	ldi	r25, 0x00	; 0
    520c:	62 2f       	mov	r22, r18
    520e:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
  }

  /* Read number of tries left */
  if (EEPROM_vRead(EEPROM_NoTries_Location) != NOTPRESSED)
    5212:	82 e1       	ldi	r24, 0x12	; 18
    5214:	90 e0       	ldi	r25, 0x00	; 0
    5216:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    521a:	8f 3f       	cpi	r24, 0xFF	; 255
    521c:	61 f0       	breq	.+24     	; 0x5236 <EEPROM_vInit+0x52>
  {
    Tries = EEPROM_vRead(EEPROM_NoTries_Location);
    521e:	82 e1       	ldi	r24, 0x12	; 18
    5220:	90 e0       	ldi	r25, 0x00	; 0
    5222:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    5226:	80 93 55 05 	sts	0x0555, r24
    if (Tries == 0)
    522a:	80 91 55 05 	lds	r24, 0x0555
    522e:	88 23       	and	r24, r24
    5230:	11 f4       	brne	.+4      	; 0x5236 <EEPROM_vInit+0x52>
    {
      Error_TimeOut();
    5232:	0e 94 3e 2e 	call	0x5c7c	; 0x5c7c <Error_TimeOut>
    }
  }
}
    5236:	cf 91       	pop	r28
    5238:	df 91       	pop	r29
    523a:	08 95       	ret

0000523c <UserName_Set>:

void UserName_Set(void)
{
    523c:	df 93       	push	r29
    523e:	cf 93       	push	r28
    5240:	cd b7       	in	r28, 0x3d	; 61
    5242:	de b7       	in	r29, 0x3e	; 62
    5244:	e2 97       	sbiw	r28, 0x32	; 50
    5246:	0f b6       	in	r0, 0x3f	; 63
    5248:	f8 94       	cli
    524a:	de bf       	out	0x3e, r29	; 62
    524c:	0f be       	out	0x3f, r0	; 63
    524e:	cd bf       	out	0x3d, r28	; 61
  if (User_Count >= MAX_USERS)
    5250:	80 91 66 05 	lds	r24, 0x0566
    5254:	87 31       	cpi	r24, 0x17	; 23
    5256:	08 f4       	brcc	.+2      	; 0x525a <UserName_Set+0x1e>
    5258:	79 c0       	rjmp	.+242    	; 0x534c <UserName_Set+0x110>
  {
    CLCD_vClearScreen();
    525a:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
    CLCD_vSendString((u8 *)"Max Users Reached");
    525e:	81 ec       	ldi	r24, 0xC1	; 193
    5260:	91 e0       	ldi	r25, 0x01	; 1
    5262:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    5266:	80 e0       	ldi	r24, 0x00	; 0
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	aa e7       	ldi	r26, 0x7A	; 122
    526c:	b4 e4       	ldi	r27, 0x44	; 68
    526e:	89 8f       	std	Y+25, r24	; 0x19
    5270:	9a 8f       	std	Y+26, r25	; 0x1a
    5272:	ab 8f       	std	Y+27, r26	; 0x1b
    5274:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5276:	69 8d       	ldd	r22, Y+25	; 0x19
    5278:	7a 8d       	ldd	r23, Y+26	; 0x1a
    527a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    527c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    527e:	20 e0       	ldi	r18, 0x00	; 0
    5280:	30 e0       	ldi	r19, 0x00	; 0
    5282:	4a ef       	ldi	r20, 0xFA	; 250
    5284:	54 e4       	ldi	r21, 0x44	; 68
    5286:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    528a:	dc 01       	movw	r26, r24
    528c:	cb 01       	movw	r24, r22
    528e:	8d 8b       	std	Y+21, r24	; 0x15
    5290:	9e 8b       	std	Y+22, r25	; 0x16
    5292:	af 8b       	std	Y+23, r26	; 0x17
    5294:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5296:	6d 89       	ldd	r22, Y+21	; 0x15
    5298:	7e 89       	ldd	r23, Y+22	; 0x16
    529a:	8f 89       	ldd	r24, Y+23	; 0x17
    529c:	98 8d       	ldd	r25, Y+24	; 0x18
    529e:	20 e0       	ldi	r18, 0x00	; 0
    52a0:	30 e0       	ldi	r19, 0x00	; 0
    52a2:	40 e8       	ldi	r20, 0x80	; 128
    52a4:	5f e3       	ldi	r21, 0x3F	; 63
    52a6:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    52aa:	88 23       	and	r24, r24
    52ac:	2c f4       	brge	.+10     	; 0x52b8 <UserName_Set+0x7c>
		__ticks = 1;
    52ae:	81 e0       	ldi	r24, 0x01	; 1
    52b0:	90 e0       	ldi	r25, 0x00	; 0
    52b2:	9c 8b       	std	Y+20, r25	; 0x14
    52b4:	8b 8b       	std	Y+19, r24	; 0x13
    52b6:	3f c0       	rjmp	.+126    	; 0x5336 <UserName_Set+0xfa>
	else if (__tmp > 65535)
    52b8:	6d 89       	ldd	r22, Y+21	; 0x15
    52ba:	7e 89       	ldd	r23, Y+22	; 0x16
    52bc:	8f 89       	ldd	r24, Y+23	; 0x17
    52be:	98 8d       	ldd	r25, Y+24	; 0x18
    52c0:	20 e0       	ldi	r18, 0x00	; 0
    52c2:	3f ef       	ldi	r19, 0xFF	; 255
    52c4:	4f e7       	ldi	r20, 0x7F	; 127
    52c6:	57 e4       	ldi	r21, 0x47	; 71
    52c8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    52cc:	18 16       	cp	r1, r24
    52ce:	4c f5       	brge	.+82     	; 0x5322 <UserName_Set+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52d0:	69 8d       	ldd	r22, Y+25	; 0x19
    52d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52d8:	20 e0       	ldi	r18, 0x00	; 0
    52da:	30 e0       	ldi	r19, 0x00	; 0
    52dc:	40 e2       	ldi	r20, 0x20	; 32
    52de:	51 e4       	ldi	r21, 0x41	; 65
    52e0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    52e4:	dc 01       	movw	r26, r24
    52e6:	cb 01       	movw	r24, r22
    52e8:	bc 01       	movw	r22, r24
    52ea:	cd 01       	movw	r24, r26
    52ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52f0:	dc 01       	movw	r26, r24
    52f2:	cb 01       	movw	r24, r22
    52f4:	9c 8b       	std	Y+20, r25	; 0x14
    52f6:	8b 8b       	std	Y+19, r24	; 0x13
    52f8:	0f c0       	rjmp	.+30     	; 0x5318 <UserName_Set+0xdc>
    52fa:	88 ec       	ldi	r24, 0xC8	; 200
    52fc:	90 e0       	ldi	r25, 0x00	; 0
    52fe:	9a 8b       	std	Y+18, r25	; 0x12
    5300:	89 8b       	std	Y+17, r24	; 0x11
    5302:	89 89       	ldd	r24, Y+17	; 0x11
    5304:	9a 89       	ldd	r25, Y+18	; 0x12
    5306:	01 97       	sbiw	r24, 0x01	; 1
    5308:	f1 f7       	brne	.-4      	; 0x5306 <UserName_Set+0xca>
    530a:	9a 8b       	std	Y+18, r25	; 0x12
    530c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    530e:	8b 89       	ldd	r24, Y+19	; 0x13
    5310:	9c 89       	ldd	r25, Y+20	; 0x14
    5312:	01 97       	sbiw	r24, 0x01	; 1
    5314:	9c 8b       	std	Y+20, r25	; 0x14
    5316:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5318:	8b 89       	ldd	r24, Y+19	; 0x13
    531a:	9c 89       	ldd	r25, Y+20	; 0x14
    531c:	00 97       	sbiw	r24, 0x00	; 0
    531e:	69 f7       	brne	.-38     	; 0x52fa <UserName_Set+0xbe>
    5320:	3d c1       	rjmp	.+634    	; 0x559c <UserName_Set+0x360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5322:	6d 89       	ldd	r22, Y+21	; 0x15
    5324:	7e 89       	ldd	r23, Y+22	; 0x16
    5326:	8f 89       	ldd	r24, Y+23	; 0x17
    5328:	98 8d       	ldd	r25, Y+24	; 0x18
    532a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    532e:	dc 01       	movw	r26, r24
    5330:	cb 01       	movw	r24, r22
    5332:	9c 8b       	std	Y+20, r25	; 0x14
    5334:	8b 8b       	std	Y+19, r24	; 0x13
    5336:	8b 89       	ldd	r24, Y+19	; 0x13
    5338:	9c 89       	ldd	r25, Y+20	; 0x14
    533a:	98 8b       	std	Y+16, r25	; 0x10
    533c:	8f 87       	std	Y+15, r24	; 0x0f
    533e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5340:	98 89       	ldd	r25, Y+16	; 0x10
    5342:	01 97       	sbiw	r24, 0x01	; 1
    5344:	f1 f7       	brne	.-4      	; 0x5342 <UserName_Set+0x106>
    5346:	98 8b       	std	Y+16, r25	; 0x10
    5348:	8f 87       	std	Y+15, r24	; 0x0f
    534a:	28 c1       	rjmp	.+592    	; 0x559c <UserName_Set+0x360>
    _delay_ms(1000);
    return;
  }

  CLCD_vClearScreen();
    534c:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
  CLCD_vSendString((u8 *)"Set UserName");
    5350:	83 ed       	ldi	r24, 0xD3	; 211
    5352:	91 e0       	ldi	r25, 0x01	; 1
    5354:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    5358:	82 e0       	ldi	r24, 0x02	; 2
    535a:	61 e0       	ldi	r22, 0x01	; 1
    535c:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
  CLCD_vSendString((u8 *)"Max chars: ");
    5360:	80 ee       	ldi	r24, 0xE0	; 224
    5362:	91 e0       	ldi	r25, 0x01	; 1
    5364:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
  CLCD_vSendIntNumber(USERNAME_MAX_LENGTH);
    5368:	64 e1       	ldi	r22, 0x14	; 20
    536a:	70 e0       	ldi	r23, 0x00	; 0
    536c:	80 e0       	ldi	r24, 0x00	; 0
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	0e 94 8b 1a 	call	0x3516	; 0x3516 <CLCD_vSendIntNumber>

  UserName_Length = 0;
    5374:	10 92 63 05 	sts	0x0563, r1
  u8 temp_username[21];

  do
  {
    if (UserName_Length != 0)
    5378:	80 91 63 05 	lds	r24, 0x0563
    537c:	88 23       	and	r24, r24
    537e:	09 f4       	brne	.+2      	; 0x5382 <UserName_Set+0x146>
    5380:	8e c0       	rjmp	.+284    	; 0x549e <UserName_Set+0x262>
    {
      CLCD_vClearScreen();
    5382:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
      CLCD_vSendString((u8 *)"Min Length: ");
    5386:	8c ee       	ldi	r24, 0xEC	; 236
    5388:	91 e0       	ldi	r25, 0x01	; 1
    538a:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
      CLCD_vSendIntNumber(USERNAME_MIN_LENGTH);
    538e:	65 e0       	ldi	r22, 0x05	; 5
    5390:	70 e0       	ldi	r23, 0x00	; 0
    5392:	80 e0       	ldi	r24, 0x00	; 0
    5394:	90 e0       	ldi	r25, 0x00	; 0
    5396:	0e 94 8b 1a 	call	0x3516	; 0x3516 <CLCD_vSendIntNumber>
    539a:	80 e0       	ldi	r24, 0x00	; 0
    539c:	90 e0       	ldi	r25, 0x00	; 0
    539e:	aa e7       	ldi	r26, 0x7A	; 122
    53a0:	b4 e4       	ldi	r27, 0x44	; 68
    53a2:	8b 87       	std	Y+11, r24	; 0x0b
    53a4:	9c 87       	std	Y+12, r25	; 0x0c
    53a6:	ad 87       	std	Y+13, r26	; 0x0d
    53a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    53ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    53ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    53b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    53b2:	20 e0       	ldi	r18, 0x00	; 0
    53b4:	30 e0       	ldi	r19, 0x00	; 0
    53b6:	4a ef       	ldi	r20, 0xFA	; 250
    53b8:	54 e4       	ldi	r21, 0x44	; 68
    53ba:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    53be:	dc 01       	movw	r26, r24
    53c0:	cb 01       	movw	r24, r22
    53c2:	8f 83       	std	Y+7, r24	; 0x07
    53c4:	98 87       	std	Y+8, r25	; 0x08
    53c6:	a9 87       	std	Y+9, r26	; 0x09
    53c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    53ca:	6f 81       	ldd	r22, Y+7	; 0x07
    53cc:	78 85       	ldd	r23, Y+8	; 0x08
    53ce:	89 85       	ldd	r24, Y+9	; 0x09
    53d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    53d2:	20 e0       	ldi	r18, 0x00	; 0
    53d4:	30 e0       	ldi	r19, 0x00	; 0
    53d6:	40 e8       	ldi	r20, 0x80	; 128
    53d8:	5f e3       	ldi	r21, 0x3F	; 63
    53da:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    53de:	88 23       	and	r24, r24
    53e0:	2c f4       	brge	.+10     	; 0x53ec <UserName_Set+0x1b0>
		__ticks = 1;
    53e2:	81 e0       	ldi	r24, 0x01	; 1
    53e4:	90 e0       	ldi	r25, 0x00	; 0
    53e6:	9e 83       	std	Y+6, r25	; 0x06
    53e8:	8d 83       	std	Y+5, r24	; 0x05
    53ea:	3f c0       	rjmp	.+126    	; 0x546a <UserName_Set+0x22e>
	else if (__tmp > 65535)
    53ec:	6f 81       	ldd	r22, Y+7	; 0x07
    53ee:	78 85       	ldd	r23, Y+8	; 0x08
    53f0:	89 85       	ldd	r24, Y+9	; 0x09
    53f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    53f4:	20 e0       	ldi	r18, 0x00	; 0
    53f6:	3f ef       	ldi	r19, 0xFF	; 255
    53f8:	4f e7       	ldi	r20, 0x7F	; 127
    53fa:	57 e4       	ldi	r21, 0x47	; 71
    53fc:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5400:	18 16       	cp	r1, r24
    5402:	4c f5       	brge	.+82     	; 0x5456 <UserName_Set+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5404:	6b 85       	ldd	r22, Y+11	; 0x0b
    5406:	7c 85       	ldd	r23, Y+12	; 0x0c
    5408:	8d 85       	ldd	r24, Y+13	; 0x0d
    540a:	9e 85       	ldd	r25, Y+14	; 0x0e
    540c:	20 e0       	ldi	r18, 0x00	; 0
    540e:	30 e0       	ldi	r19, 0x00	; 0
    5410:	40 e2       	ldi	r20, 0x20	; 32
    5412:	51 e4       	ldi	r21, 0x41	; 65
    5414:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5418:	dc 01       	movw	r26, r24
    541a:	cb 01       	movw	r24, r22
    541c:	bc 01       	movw	r22, r24
    541e:	cd 01       	movw	r24, r26
    5420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5424:	dc 01       	movw	r26, r24
    5426:	cb 01       	movw	r24, r22
    5428:	9e 83       	std	Y+6, r25	; 0x06
    542a:	8d 83       	std	Y+5, r24	; 0x05
    542c:	0f c0       	rjmp	.+30     	; 0x544c <UserName_Set+0x210>
    542e:	88 ec       	ldi	r24, 0xC8	; 200
    5430:	90 e0       	ldi	r25, 0x00	; 0
    5432:	9c 83       	std	Y+4, r25	; 0x04
    5434:	8b 83       	std	Y+3, r24	; 0x03
    5436:	8b 81       	ldd	r24, Y+3	; 0x03
    5438:	9c 81       	ldd	r25, Y+4	; 0x04
    543a:	01 97       	sbiw	r24, 0x01	; 1
    543c:	f1 f7       	brne	.-4      	; 0x543a <UserName_Set+0x1fe>
    543e:	9c 83       	std	Y+4, r25	; 0x04
    5440:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5442:	8d 81       	ldd	r24, Y+5	; 0x05
    5444:	9e 81       	ldd	r25, Y+6	; 0x06
    5446:	01 97       	sbiw	r24, 0x01	; 1
    5448:	9e 83       	std	Y+6, r25	; 0x06
    544a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    544c:	8d 81       	ldd	r24, Y+5	; 0x05
    544e:	9e 81       	ldd	r25, Y+6	; 0x06
    5450:	00 97       	sbiw	r24, 0x00	; 0
    5452:	69 f7       	brne	.-38     	; 0x542e <UserName_Set+0x1f2>
    5454:	14 c0       	rjmp	.+40     	; 0x547e <UserName_Set+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5456:	6f 81       	ldd	r22, Y+7	; 0x07
    5458:	78 85       	ldd	r23, Y+8	; 0x08
    545a:	89 85       	ldd	r24, Y+9	; 0x09
    545c:	9a 85       	ldd	r25, Y+10	; 0x0a
    545e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5462:	dc 01       	movw	r26, r24
    5464:	cb 01       	movw	r24, r22
    5466:	9e 83       	std	Y+6, r25	; 0x06
    5468:	8d 83       	std	Y+5, r24	; 0x05
    546a:	8d 81       	ldd	r24, Y+5	; 0x05
    546c:	9e 81       	ldd	r25, Y+6	; 0x06
    546e:	9a 83       	std	Y+2, r25	; 0x02
    5470:	89 83       	std	Y+1, r24	; 0x01
    5472:	89 81       	ldd	r24, Y+1	; 0x01
    5474:	9a 81       	ldd	r25, Y+2	; 0x02
    5476:	01 97       	sbiw	r24, 0x01	; 1
    5478:	f1 f7       	brne	.-4      	; 0x5476 <UserName_Set+0x23a>
    547a:	9a 83       	std	Y+2, r25	; 0x02
    547c:	89 83       	std	Y+1, r24	; 0x01
      _delay_ms(1000);
      CLCD_vClearScreen();
    547e:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
      CLCD_vSendString((u8 *)"Set UserName");
    5482:	83 ed       	ldi	r24, 0xD3	; 211
    5484:	91 e0       	ldi	r25, 0x01	; 1
    5486:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
      CLCD_vSetPosition(2, 1);
    548a:	82 e0       	ldi	r24, 0x02	; 2
    548c:	61 e0       	ldi	r22, 0x01	; 1
    548e:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
      CLCD_vSendString((u8 *)"Max chars: ");
    5492:	80 ee       	ldi	r24, 0xE0	; 224
    5494:	91 e0       	ldi	r25, 0x01	; 1
    5496:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
      UserName_Length = 0;
    549a:	10 92 63 05 	sts	0x0563, r1
    }
    CLCD_vSetPosition(3, 1);
    549e:	83 e0       	ldi	r24, 0x03	; 3
    54a0:	61 e0       	ldi	r22, 0x01	; 1
    54a2:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
    while (1)
    {
      Error_State = USART_u8ReceiveData(&KPD_Press);
    54a6:	8e e7       	ldi	r24, 0x7E	; 126
    54a8:	95 e0       	ldi	r25, 0x05	; 5
    54aa:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    54ae:	80 93 93 05 	sts	0x0593, r24

      if (Error_State == OK)
    54b2:	80 91 93 05 	lds	r24, 0x0593
    54b6:	88 23       	and	r24, r24
    54b8:	b1 f7       	brne	.-20     	; 0x54a6 <UserName_Set+0x26a>
      {
        if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    54ba:	80 91 7e 05 	lds	r24, 0x057E
    54be:	8d 30       	cpi	r24, 0x0D	; 13
    54c0:	21 f0       	breq	.+8      	; 0x54ca <UserName_Set+0x28e>
    54c2:	80 91 7e 05 	lds	r24, 0x057E
    54c6:	8f 30       	cpi	r24, 0x0F	; 15
    54c8:	29 f4       	brne	.+10     	; 0x54d4 <UserName_Set+0x298>
        { // Enter key
          if (UserName_Length >= USERNAME_MIN_LENGTH)
    54ca:	80 91 63 05 	lds	r24, 0x0563
    54ce:	85 30       	cpi	r24, 0x05	; 5
    54d0:	48 f5       	brcc	.+82     	; 0x5524 <UserName_Set+0x2e8>
    54d2:	e9 cf       	rjmp	.-46     	; 0x54a6 <UserName_Set+0x26a>
            break;
        }
        else if (KPD_Press == 0x08)
    54d4:	80 91 7e 05 	lds	r24, 0x057E
    54d8:	88 30       	cpi	r24, 0x08	; 8
    54da:	51 f4       	brne	.+20     	; 0x54f0 <UserName_Set+0x2b4>
        { // Backspace
          if (UserName_Length > 0)
    54dc:	80 91 63 05 	lds	r24, 0x0563
    54e0:	88 23       	and	r24, r24
    54e2:	09 f3       	breq	.-62     	; 0x54a6 <UserName_Set+0x26a>
          {
            UserName_Length--;
    54e4:	80 91 63 05 	lds	r24, 0x0563
    54e8:	81 50       	subi	r24, 0x01	; 1
    54ea:	80 93 63 05 	sts	0x0563, r24
    54ee:	db cf       	rjmp	.-74     	; 0x54a6 <UserName_Set+0x26a>
          }
        }
        else if (UserName_Length < USERNAME_MAX_LENGTH)
    54f0:	80 91 63 05 	lds	r24, 0x0563
    54f4:	84 31       	cpi	r24, 0x14	; 20
    54f6:	b8 f6       	brcc	.-82     	; 0x54a6 <UserName_Set+0x26a>
        {
          temp_username[UserName_Length] = KPD_Press;
    54f8:	80 91 63 05 	lds	r24, 0x0563
    54fc:	28 2f       	mov	r18, r24
    54fe:	30 e0       	ldi	r19, 0x00	; 0
    5500:	40 91 7e 05 	lds	r20, 0x057E
    5504:	ce 01       	movw	r24, r28
    5506:	4e 96       	adiw	r24, 0x1e	; 30
    5508:	fc 01       	movw	r30, r24
    550a:	e2 0f       	add	r30, r18
    550c:	f3 1f       	adc	r31, r19
    550e:	40 83       	st	Z, r20
          CLCD_vSendData(KPD_Press);
    5510:	80 91 7e 05 	lds	r24, 0x057E
    5514:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
          UserName_Length++;
    5518:	80 91 63 05 	lds	r24, 0x0563
    551c:	8f 5f       	subi	r24, 0xFF	; 255
    551e:	80 93 63 05 	sts	0x0563, r24
    5522:	c1 cf       	rjmp	.-126    	; 0x54a6 <UserName_Set+0x26a>
        }
      }
    }
  } while (UserName_Length < USERNAME_MIN_LENGTH);
    5524:	80 91 63 05 	lds	r24, 0x0563
    5528:	85 30       	cpi	r24, 0x05	; 5
    552a:	08 f4       	brcc	.+2      	; 0x552e <UserName_Set+0x2f2>
    552c:	25 cf       	rjmp	.-438    	; 0x5378 <UserName_Set+0x13c>

  temp_username[UserName_Length] = '\0';
    552e:	80 91 63 05 	lds	r24, 0x0563
    5532:	28 2f       	mov	r18, r24
    5534:	30 e0       	ldi	r19, 0x00	; 0
    5536:	ce 01       	movw	r24, r28
    5538:	4e 96       	adiw	r24, 0x1e	; 30
    553a:	fc 01       	movw	r30, r24
    553c:	e2 0f       	add	r30, r18
    553e:	f3 1f       	adc	r31, r19
    5540:	10 82       	st	Z, r1
  Write_Username(User_Count, temp_username, UserName_Length);
    5542:	80 91 66 05 	lds	r24, 0x0566
    5546:	90 91 63 05 	lds	r25, 0x0563
    554a:	9e 01       	movw	r18, r28
    554c:	22 5e       	subi	r18, 0xE2	; 226
    554e:	3f 4f       	sbci	r19, 0xFF	; 255
    5550:	b9 01       	movw	r22, r18
    5552:	49 2f       	mov	r20, r25
    5554:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <Write_Username>

  for (u8 i = 0; i < UserName_Length; i++)
    5558:	1d 8e       	std	Y+29, r1	; 0x1d
    555a:	13 c0       	rjmp	.+38     	; 0x5582 <UserName_Set+0x346>
  {
    UserName[i] = temp_username[i];
    555c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    555e:	48 2f       	mov	r20, r24
    5560:	50 e0       	ldi	r21, 0x00	; 0
    5562:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5564:	28 2f       	mov	r18, r24
    5566:	30 e0       	ldi	r19, 0x00	; 0
    5568:	ce 01       	movw	r24, r28
    556a:	4e 96       	adiw	r24, 0x1e	; 30
    556c:	fc 01       	movw	r30, r24
    556e:	e2 0f       	add	r30, r18
    5570:	f3 1f       	adc	r31, r19
    5572:	80 81       	ld	r24, Z
    5574:	fa 01       	movw	r30, r20
    5576:	e1 58       	subi	r30, 0x81	; 129
    5578:	fa 4f       	sbci	r31, 0xFA	; 250
    557a:	80 83       	st	Z, r24
  } while (UserName_Length < USERNAME_MIN_LENGTH);

  temp_username[UserName_Length] = '\0';
  Write_Username(User_Count, temp_username, UserName_Length);

  for (u8 i = 0; i < UserName_Length; i++)
    557c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    557e:	8f 5f       	subi	r24, 0xFF	; 255
    5580:	8d 8f       	std	Y+29, r24	; 0x1d
    5582:	90 91 63 05 	lds	r25, 0x0563
    5586:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5588:	89 17       	cp	r24, r25
    558a:	40 f3       	brcs	.-48     	; 0x555c <UserName_Set+0x320>
  {
    UserName[i] = temp_username[i];
  }
  UserName[UserName_Length] = '\0';
    558c:	80 91 63 05 	lds	r24, 0x0563
    5590:	88 2f       	mov	r24, r24
    5592:	90 e0       	ldi	r25, 0x00	; 0
    5594:	fc 01       	movw	r30, r24
    5596:	e1 58       	subi	r30, 0x81	; 129
    5598:	fa 4f       	sbci	r31, 0xFA	; 250
    559a:	10 82       	st	Z, r1
}
    559c:	e2 96       	adiw	r28, 0x32	; 50
    559e:	0f b6       	in	r0, 0x3f	; 63
    55a0:	f8 94       	cli
    55a2:	de bf       	out	0x3e, r29	; 62
    55a4:	0f be       	out	0x3f, r0	; 63
    55a6:	cd bf       	out	0x3d, r28	; 61
    55a8:	cf 91       	pop	r28
    55aa:	df 91       	pop	r29
    55ac:	08 95       	ret

000055ae <PassWord_Set>:

void PassWord_Set(void)
{
    55ae:	df 93       	push	r29
    55b0:	cf 93       	push	r28
    55b2:	cd b7       	in	r28, 0x3d	; 61
    55b4:	de b7       	in	r29, 0x3e	; 62
    55b6:	a3 97       	sbiw	r28, 0x23	; 35
    55b8:	0f b6       	in	r0, 0x3f	; 63
    55ba:	f8 94       	cli
    55bc:	de bf       	out	0x3e, r29	; 62
    55be:	0f be       	out	0x3f, r0	; 63
    55c0:	cd bf       	out	0x3d, r28	; 61
  CLCD_vClearScreen();
    55c2:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
  CLCD_vSendString((u8 *)"Set Password");
    55c6:	89 ef       	ldi	r24, 0xF9	; 249
    55c8:	91 e0       	ldi	r25, 0x01	; 1
    55ca:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
  CLCD_vSetPosition(2, 1);
    55ce:	82 e0       	ldi	r24, 0x02	; 2
    55d0:	61 e0       	ldi	r22, 0x01	; 1
    55d2:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
  CLCD_vSendString((u8 *)"Max chars: ");
    55d6:	80 ee       	ldi	r24, 0xE0	; 224
    55d8:	91 e0       	ldi	r25, 0x01	; 1
    55da:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
  CLCD_vSendIntNumber(PASSWORD_MAX_LENGTH);
    55de:	64 e1       	ldi	r22, 0x14	; 20
    55e0:	70 e0       	ldi	r23, 0x00	; 0
    55e2:	80 e0       	ldi	r24, 0x00	; 0
    55e4:	90 e0       	ldi	r25, 0x00	; 0
    55e6:	0e 94 8b 1a 	call	0x3516	; 0x3516 <CLCD_vSendIntNumber>

  PassWord_Length = 0;
    55ea:	10 92 64 05 	sts	0x0564, r1
  u8 temp_password[21];

  do
  {
    if (PassWord_Length != 0)
    55ee:	80 91 64 05 	lds	r24, 0x0564
    55f2:	88 23       	and	r24, r24
    55f4:	09 f4       	brne	.+2      	; 0x55f8 <PassWord_Set+0x4a>
    55f6:	86 c0       	rjmp	.+268    	; 0x5704 <PassWord_Set+0x156>
    {
      CLCD_vClearScreen();
    55f8:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
      CLCD_vSendString((u8 *)"Min Length: ");
    55fc:	8c ee       	ldi	r24, 0xEC	; 236
    55fe:	91 e0       	ldi	r25, 0x01	; 1
    5600:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
      CLCD_vSendIntNumber(PASSWORD_MIN_LENGTH);
    5604:	68 e0       	ldi	r22, 0x08	; 8
    5606:	70 e0       	ldi	r23, 0x00	; 0
    5608:	80 e0       	ldi	r24, 0x00	; 0
    560a:	90 e0       	ldi	r25, 0x00	; 0
    560c:	0e 94 8b 1a 	call	0x3516	; 0x3516 <CLCD_vSendIntNumber>
    5610:	80 e0       	ldi	r24, 0x00	; 0
    5612:	90 e0       	ldi	r25, 0x00	; 0
    5614:	aa e7       	ldi	r26, 0x7A	; 122
    5616:	b4 e4       	ldi	r27, 0x44	; 68
    5618:	8b 87       	std	Y+11, r24	; 0x0b
    561a:	9c 87       	std	Y+12, r25	; 0x0c
    561c:	ad 87       	std	Y+13, r26	; 0x0d
    561e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5620:	6b 85       	ldd	r22, Y+11	; 0x0b
    5622:	7c 85       	ldd	r23, Y+12	; 0x0c
    5624:	8d 85       	ldd	r24, Y+13	; 0x0d
    5626:	9e 85       	ldd	r25, Y+14	; 0x0e
    5628:	20 e0       	ldi	r18, 0x00	; 0
    562a:	30 e0       	ldi	r19, 0x00	; 0
    562c:	4a ef       	ldi	r20, 0xFA	; 250
    562e:	54 e4       	ldi	r21, 0x44	; 68
    5630:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5634:	dc 01       	movw	r26, r24
    5636:	cb 01       	movw	r24, r22
    5638:	8f 83       	std	Y+7, r24	; 0x07
    563a:	98 87       	std	Y+8, r25	; 0x08
    563c:	a9 87       	std	Y+9, r26	; 0x09
    563e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5640:	6f 81       	ldd	r22, Y+7	; 0x07
    5642:	78 85       	ldd	r23, Y+8	; 0x08
    5644:	89 85       	ldd	r24, Y+9	; 0x09
    5646:	9a 85       	ldd	r25, Y+10	; 0x0a
    5648:	20 e0       	ldi	r18, 0x00	; 0
    564a:	30 e0       	ldi	r19, 0x00	; 0
    564c:	40 e8       	ldi	r20, 0x80	; 128
    564e:	5f e3       	ldi	r21, 0x3F	; 63
    5650:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5654:	88 23       	and	r24, r24
    5656:	2c f4       	brge	.+10     	; 0x5662 <PassWord_Set+0xb4>
		__ticks = 1;
    5658:	81 e0       	ldi	r24, 0x01	; 1
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	9e 83       	std	Y+6, r25	; 0x06
    565e:	8d 83       	std	Y+5, r24	; 0x05
    5660:	3f c0       	rjmp	.+126    	; 0x56e0 <PassWord_Set+0x132>
	else if (__tmp > 65535)
    5662:	6f 81       	ldd	r22, Y+7	; 0x07
    5664:	78 85       	ldd	r23, Y+8	; 0x08
    5666:	89 85       	ldd	r24, Y+9	; 0x09
    5668:	9a 85       	ldd	r25, Y+10	; 0x0a
    566a:	20 e0       	ldi	r18, 0x00	; 0
    566c:	3f ef       	ldi	r19, 0xFF	; 255
    566e:	4f e7       	ldi	r20, 0x7F	; 127
    5670:	57 e4       	ldi	r21, 0x47	; 71
    5672:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5676:	18 16       	cp	r1, r24
    5678:	4c f5       	brge	.+82     	; 0x56cc <PassWord_Set+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    567a:	6b 85       	ldd	r22, Y+11	; 0x0b
    567c:	7c 85       	ldd	r23, Y+12	; 0x0c
    567e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5680:	9e 85       	ldd	r25, Y+14	; 0x0e
    5682:	20 e0       	ldi	r18, 0x00	; 0
    5684:	30 e0       	ldi	r19, 0x00	; 0
    5686:	40 e2       	ldi	r20, 0x20	; 32
    5688:	51 e4       	ldi	r21, 0x41	; 65
    568a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    568e:	dc 01       	movw	r26, r24
    5690:	cb 01       	movw	r24, r22
    5692:	bc 01       	movw	r22, r24
    5694:	cd 01       	movw	r24, r26
    5696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    569a:	dc 01       	movw	r26, r24
    569c:	cb 01       	movw	r24, r22
    569e:	9e 83       	std	Y+6, r25	; 0x06
    56a0:	8d 83       	std	Y+5, r24	; 0x05
    56a2:	0f c0       	rjmp	.+30     	; 0x56c2 <PassWord_Set+0x114>
    56a4:	88 ec       	ldi	r24, 0xC8	; 200
    56a6:	90 e0       	ldi	r25, 0x00	; 0
    56a8:	9c 83       	std	Y+4, r25	; 0x04
    56aa:	8b 83       	std	Y+3, r24	; 0x03
    56ac:	8b 81       	ldd	r24, Y+3	; 0x03
    56ae:	9c 81       	ldd	r25, Y+4	; 0x04
    56b0:	01 97       	sbiw	r24, 0x01	; 1
    56b2:	f1 f7       	brne	.-4      	; 0x56b0 <PassWord_Set+0x102>
    56b4:	9c 83       	std	Y+4, r25	; 0x04
    56b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56b8:	8d 81       	ldd	r24, Y+5	; 0x05
    56ba:	9e 81       	ldd	r25, Y+6	; 0x06
    56bc:	01 97       	sbiw	r24, 0x01	; 1
    56be:	9e 83       	std	Y+6, r25	; 0x06
    56c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56c2:	8d 81       	ldd	r24, Y+5	; 0x05
    56c4:	9e 81       	ldd	r25, Y+6	; 0x06
    56c6:	00 97       	sbiw	r24, 0x00	; 0
    56c8:	69 f7       	brne	.-38     	; 0x56a4 <PassWord_Set+0xf6>
    56ca:	14 c0       	rjmp	.+40     	; 0x56f4 <PassWord_Set+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56cc:	6f 81       	ldd	r22, Y+7	; 0x07
    56ce:	78 85       	ldd	r23, Y+8	; 0x08
    56d0:	89 85       	ldd	r24, Y+9	; 0x09
    56d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    56d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56d8:	dc 01       	movw	r26, r24
    56da:	cb 01       	movw	r24, r22
    56dc:	9e 83       	std	Y+6, r25	; 0x06
    56de:	8d 83       	std	Y+5, r24	; 0x05
    56e0:	8d 81       	ldd	r24, Y+5	; 0x05
    56e2:	9e 81       	ldd	r25, Y+6	; 0x06
    56e4:	9a 83       	std	Y+2, r25	; 0x02
    56e6:	89 83       	std	Y+1, r24	; 0x01
    56e8:	89 81       	ldd	r24, Y+1	; 0x01
    56ea:	9a 81       	ldd	r25, Y+2	; 0x02
    56ec:	01 97       	sbiw	r24, 0x01	; 1
    56ee:	f1 f7       	brne	.-4      	; 0x56ec <PassWord_Set+0x13e>
    56f0:	9a 83       	std	Y+2, r25	; 0x02
    56f2:	89 83       	std	Y+1, r24	; 0x01
      _delay_ms(1000);
      CLCD_vClearScreen();
    56f4:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
      CLCD_vSendString((u8 *)"Set Password");
    56f8:	89 ef       	ldi	r24, 0xF9	; 249
    56fa:	91 e0       	ldi	r25, 0x01	; 1
    56fc:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
      PassWord_Length = 0;
    5700:	10 92 64 05 	sts	0x0564, r1
    }

    while (1)
    {
      Error_State = USART_u8ReceiveData(&KPD_Press);
    5704:	8e e7       	ldi	r24, 0x7E	; 126
    5706:	95 e0       	ldi	r25, 0x05	; 5
    5708:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    570c:	80 93 93 05 	sts	0x0593, r24

      if (Error_State == OK)
    5710:	80 91 93 05 	lds	r24, 0x0593
    5714:	88 23       	and	r24, r24
    5716:	b1 f7       	brne	.-20     	; 0x5704 <PassWord_Set+0x156>
      {
        if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    5718:	80 91 7e 05 	lds	r24, 0x057E
    571c:	8d 30       	cpi	r24, 0x0D	; 13
    571e:	21 f0       	breq	.+8      	; 0x5728 <PassWord_Set+0x17a>
    5720:	80 91 7e 05 	lds	r24, 0x057E
    5724:	8f 30       	cpi	r24, 0x0F	; 15
    5726:	29 f4       	brne	.+10     	; 0x5732 <PassWord_Set+0x184>
        { // Enter key
          if (PassWord_Length >= PASSWORD_MIN_LENGTH)
    5728:	80 91 64 05 	lds	r24, 0x0564
    572c:	88 30       	cpi	r24, 0x08	; 8
    572e:	40 f5       	brcc	.+80     	; 0x5780 <PassWord_Set+0x1d2>
    5730:	e9 cf       	rjmp	.-46     	; 0x5704 <PassWord_Set+0x156>
            break;
        }
        else if (KPD_Press == 0x08)
    5732:	80 91 7e 05 	lds	r24, 0x057E
    5736:	88 30       	cpi	r24, 0x08	; 8
    5738:	51 f4       	brne	.+20     	; 0x574e <PassWord_Set+0x1a0>
        { // Backspace
          if (PassWord_Length > 0)
    573a:	80 91 64 05 	lds	r24, 0x0564
    573e:	88 23       	and	r24, r24
    5740:	09 f3       	breq	.-62     	; 0x5704 <PassWord_Set+0x156>
          {
            PassWord_Length--;
    5742:	80 91 64 05 	lds	r24, 0x0564
    5746:	81 50       	subi	r24, 0x01	; 1
    5748:	80 93 64 05 	sts	0x0564, r24
    574c:	db cf       	rjmp	.-74     	; 0x5704 <PassWord_Set+0x156>
          }
        }
        else if (PassWord_Length < PASSWORD_MAX_LENGTH)
    574e:	80 91 64 05 	lds	r24, 0x0564
    5752:	84 31       	cpi	r24, 0x14	; 20
    5754:	b8 f6       	brcc	.-82     	; 0x5704 <PassWord_Set+0x156>
        {
          temp_password[PassWord_Length] = KPD_Press;
    5756:	80 91 64 05 	lds	r24, 0x0564
    575a:	28 2f       	mov	r18, r24
    575c:	30 e0       	ldi	r19, 0x00	; 0
    575e:	40 91 7e 05 	lds	r20, 0x057E
    5762:	ce 01       	movw	r24, r28
    5764:	0f 96       	adiw	r24, 0x0f	; 15
    5766:	fc 01       	movw	r30, r24
    5768:	e2 0f       	add	r30, r18
    576a:	f3 1f       	adc	r31, r19
    576c:	40 83       	st	Z, r20
          CLCD_vSendData('*'); // Show * for password
    576e:	8a e2       	ldi	r24, 0x2A	; 42
    5770:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
          PassWord_Length++;
    5774:	80 91 64 05 	lds	r24, 0x0564
    5778:	8f 5f       	subi	r24, 0xFF	; 255
    577a:	80 93 64 05 	sts	0x0564, r24
    577e:	c2 cf       	rjmp	.-124    	; 0x5704 <PassWord_Set+0x156>
        }
      }
    }
  } while (PassWord_Length < PASSWORD_MIN_LENGTH);
    5780:	80 91 64 05 	lds	r24, 0x0564
    5784:	88 30       	cpi	r24, 0x08	; 8
    5786:	08 f4       	brcc	.+2      	; 0x578a <PassWord_Set+0x1dc>
    5788:	32 cf       	rjmp	.-412    	; 0x55ee <PassWord_Set+0x40>

  Write_Password(User_Count, temp_password, PassWord_Length);
    578a:	80 91 66 05 	lds	r24, 0x0566
    578e:	90 91 64 05 	lds	r25, 0x0564
    5792:	9e 01       	movw	r18, r28
    5794:	21 5f       	subi	r18, 0xF1	; 241
    5796:	3f 4f       	sbci	r19, 0xFF	; 255
    5798:	b9 01       	movw	r22, r18
    579a:	49 2f       	mov	r20, r25
    579c:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <Write_Password>
  User_Count++;
    57a0:	80 91 66 05 	lds	r24, 0x0566
    57a4:	8f 5f       	subi	r24, 0xFF	; 255
    57a6:	80 93 66 05 	sts	0x0566, r24
  EEPROM_vWrite(EEPROM_UserCount_Location, User_Count);
    57aa:	20 91 66 05 	lds	r18, 0x0566
    57ae:	83 e1       	ldi	r24, 0x13	; 19
    57b0:	90 e0       	ldi	r25, 0x00	; 0
    57b2:	62 2f       	mov	r22, r18
    57b4:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
}
    57b8:	a3 96       	adiw	r28, 0x23	; 35
    57ba:	0f b6       	in	r0, 0x3f	; 63
    57bc:	f8 94       	cli
    57be:	de bf       	out	0x3e, r29	; 62
    57c0:	0f be       	out	0x3f, r0	; 63
    57c2:	cd bf       	out	0x3d, r28	; 61
    57c4:	cf 91       	pop	r28
    57c6:	df 91       	pop	r29
    57c8:	08 95       	ret

000057ca <UserName_Check>:

void UserName_Check(void)
{
    57ca:	df 93       	push	r29
    57cc:	cf 93       	push	r28
    57ce:	cd b7       	in	r28, 0x3d	; 61
    57d0:	de b7       	in	r29, 0x3e	; 62
    57d2:	6a 97       	sbiw	r28, 0x1a	; 26
    57d4:	0f b6       	in	r0, 0x3f	; 63
    57d6:	f8 94       	cli
    57d8:	de bf       	out	0x3e, r29	; 62
    57da:	0f be       	out	0x3f, r0	; 63
    57dc:	cd bf       	out	0x3d, r28	; 61
  CLCD_vClearScreen();
    57de:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
  CLCD_vSendString((u8 *)"Enter Username");
    57e2:	86 e0       	ldi	r24, 0x06	; 6
    57e4:	92 e0       	ldi	r25, 0x02	; 2
    57e6:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>

  u8 CheckLength = 0;
    57ea:	1c 82       	std	Y+4, r1	; 0x04
  UserName_Check_Flag = 0;
    57ec:	10 92 56 05 	sts	0x0556, r1

  while (1)
  {
    Error_State = USART_u8ReceiveData(&KPD_Press);
    57f0:	8e e7       	ldi	r24, 0x7E	; 126
    57f2:	95 e0       	ldi	r25, 0x05	; 5
    57f4:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    57f8:	80 93 93 05 	sts	0x0593, r24

    if (Error_State == OK)
    57fc:	80 91 93 05 	lds	r24, 0x0593
    5800:	88 23       	and	r24, r24
    5802:	b1 f7       	brne	.-20     	; 0x57f0 <UserName_Check+0x26>
    {
      if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    5804:	80 91 7e 05 	lds	r24, 0x057E
    5808:	8d 30       	cpi	r24, 0x0D	; 13
    580a:	f9 f0       	breq	.+62     	; 0x584a <UserName_Check+0x80>
    580c:	80 91 7e 05 	lds	r24, 0x057E
    5810:	8f 30       	cpi	r24, 0x0F	; 15
    5812:	d9 f0       	breq	.+54     	; 0x584a <UserName_Check+0x80>
      { // Enter key
        break;
      }
      else if (KPD_Press == 0x08)
    5814:	80 91 7e 05 	lds	r24, 0x057E
    5818:	88 30       	cpi	r24, 0x08	; 8
    581a:	39 f4       	brne	.+14     	; 0x582a <UserName_Check+0x60>
      { // Backspace
        if (CheckLength > 0)
    581c:	8c 81       	ldd	r24, Y+4	; 0x04
    581e:	88 23       	and	r24, r24
    5820:	39 f3       	breq	.-50     	; 0x57f0 <UserName_Check+0x26>
        {
          CheckLength--;
    5822:	8c 81       	ldd	r24, Y+4	; 0x04
    5824:	81 50       	subi	r24, 0x01	; 1
    5826:	8c 83       	std	Y+4, r24	; 0x04
    5828:	e3 cf       	rjmp	.-58     	; 0x57f0 <UserName_Check+0x26>
        }
      }
      else if (CheckLength < USERNAME_MAX_LENGTH)
    582a:	8c 81       	ldd	r24, Y+4	; 0x04
    582c:	84 31       	cpi	r24, 0x14	; 20
    582e:	00 f7       	brcc	.-64     	; 0x57f0 <UserName_Check+0x26>
      {
        Check[CheckLength] = KPD_Press;
    5830:	8c 81       	ldd	r24, Y+4	; 0x04
    5832:	88 2f       	mov	r24, r24
    5834:	90 e0       	ldi	r25, 0x00	; 0
    5836:	20 91 7e 05 	lds	r18, 0x057E
    583a:	fc 01       	movw	r30, r24
    583c:	e7 59       	subi	r30, 0x97	; 151
    583e:	fa 4f       	sbci	r31, 0xFA	; 250
    5840:	20 83       	st	Z, r18
        CheckLength++;
    5842:	8c 81       	ldd	r24, Y+4	; 0x04
    5844:	8f 5f       	subi	r24, 0xFF	; 255
    5846:	8c 83       	std	Y+4, r24	; 0x04
    5848:	d3 cf       	rjmp	.-90     	; 0x57f0 <UserName_Check+0x26>
      }
    }
  }
  Check[CheckLength] = '\0';
    584a:	8c 81       	ldd	r24, Y+4	; 0x04
    584c:	88 2f       	mov	r24, r24
    584e:	90 e0       	ldi	r25, 0x00	; 0
    5850:	fc 01       	movw	r30, r24
    5852:	e7 59       	subi	r30, 0x97	; 151
    5854:	fa 4f       	sbci	r31, 0xFA	; 250
    5856:	10 82       	st	Z, r1

  // Check against all stored usernames
  u8 stored_username[21];
  u8 stored_length;

  for (u8 i = 0; i < User_Count; i++)
    5858:	1b 82       	std	Y+3, r1	; 0x03
    585a:	3a c0       	rjmp	.+116    	; 0x58d0 <UserName_Check+0x106>
  {
    Read_Username(i, stored_username, &stored_length);
    585c:	9e 01       	movw	r18, r28
    585e:	2b 5f       	subi	r18, 0xFB	; 251
    5860:	3f 4f       	sbci	r19, 0xFF	; 255
    5862:	ae 01       	movw	r20, r28
    5864:	46 5e       	subi	r20, 0xE6	; 230
    5866:	5f 4f       	sbci	r21, 0xFF	; 255
    5868:	8b 81       	ldd	r24, Y+3	; 0x03
    586a:	b9 01       	movw	r22, r18
    586c:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <Read_Username>

    if (CheckLength == stored_length)
    5870:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5872:	8c 81       	ldd	r24, Y+4	; 0x04
    5874:	89 17       	cp	r24, r25
    5876:	49 f5       	brne	.+82     	; 0x58ca <UserName_Check+0x100>
    {
      u8 match = 1;
    5878:	81 e0       	ldi	r24, 0x01	; 1
    587a:	8a 83       	std	Y+2, r24	; 0x02
      for (u8 j = 0; j < CheckLength; j++)
    587c:	19 82       	std	Y+1, r1	; 0x01
    587e:	17 c0       	rjmp	.+46     	; 0x58ae <UserName_Check+0xe4>
      {
        if (Check[j] != stored_username[j])
    5880:	89 81       	ldd	r24, Y+1	; 0x01
    5882:	88 2f       	mov	r24, r24
    5884:	90 e0       	ldi	r25, 0x00	; 0
    5886:	fc 01       	movw	r30, r24
    5888:	e7 59       	subi	r30, 0x97	; 151
    588a:	fa 4f       	sbci	r31, 0xFA	; 250
    588c:	40 81       	ld	r20, Z
    588e:	89 81       	ldd	r24, Y+1	; 0x01
    5890:	28 2f       	mov	r18, r24
    5892:	30 e0       	ldi	r19, 0x00	; 0
    5894:	ce 01       	movw	r24, r28
    5896:	05 96       	adiw	r24, 0x05	; 5
    5898:	fc 01       	movw	r30, r24
    589a:	e2 0f       	add	r30, r18
    589c:	f3 1f       	adc	r31, r19
    589e:	80 81       	ld	r24, Z
    58a0:	48 17       	cp	r20, r24
    58a2:	11 f0       	breq	.+4      	; 0x58a8 <UserName_Check+0xde>
        {
          match = 0;
    58a4:	1a 82       	std	Y+2, r1	; 0x02
    58a6:	07 c0       	rjmp	.+14     	; 0x58b6 <UserName_Check+0xec>
    Read_Username(i, stored_username, &stored_length);

    if (CheckLength == stored_length)
    {
      u8 match = 1;
      for (u8 j = 0; j < CheckLength; j++)
    58a8:	89 81       	ldd	r24, Y+1	; 0x01
    58aa:	8f 5f       	subi	r24, 0xFF	; 255
    58ac:	89 83       	std	Y+1, r24	; 0x01
    58ae:	99 81       	ldd	r25, Y+1	; 0x01
    58b0:	8c 81       	ldd	r24, Y+4	; 0x04
    58b2:	98 17       	cp	r25, r24
    58b4:	28 f3       	brcs	.-54     	; 0x5880 <UserName_Check+0xb6>
        {
          match = 0;
          break;
        }
      }
      if (match)
    58b6:	8a 81       	ldd	r24, Y+2	; 0x02
    58b8:	88 23       	and	r24, r24
    58ba:	39 f0       	breq	.+14     	; 0x58ca <UserName_Check+0x100>
      {
        UserName_Check_Flag = 1;
    58bc:	81 e0       	ldi	r24, 0x01	; 1
    58be:	80 93 56 05 	sts	0x0556, r24
        Current_User = i;
    58c2:	8b 81       	ldd	r24, Y+3	; 0x03
    58c4:	80 93 65 05 	sts	0x0565, r24
    58c8:	08 c0       	rjmp	.+16     	; 0x58da <UserName_Check+0x110>

  // Check against all stored usernames
  u8 stored_username[21];
  u8 stored_length;

  for (u8 i = 0; i < User_Count; i++)
    58ca:	8b 81       	ldd	r24, Y+3	; 0x03
    58cc:	8f 5f       	subi	r24, 0xFF	; 255
    58ce:	8b 83       	std	Y+3, r24	; 0x03
    58d0:	90 91 66 05 	lds	r25, 0x0566
    58d4:	8b 81       	ldd	r24, Y+3	; 0x03
    58d6:	89 17       	cp	r24, r25
    58d8:	08 f2       	brcs	.-126    	; 0x585c <UserName_Check+0x92>
        Current_User = i;
        break;
      }
    }
  }
}
    58da:	6a 96       	adiw	r28, 0x1a	; 26
    58dc:	0f b6       	in	r0, 0x3f	; 63
    58de:	f8 94       	cli
    58e0:	de bf       	out	0x3e, r29	; 62
    58e2:	0f be       	out	0x3f, r0	; 63
    58e4:	cd bf       	out	0x3d, r28	; 61
    58e6:	cf 91       	pop	r28
    58e8:	df 91       	pop	r29
    58ea:	08 95       	ret

000058ec <PassWord_Check>:

void PassWord_Check(void)
{
    58ec:	df 93       	push	r29
    58ee:	cf 93       	push	r28
    58f0:	cd b7       	in	r28, 0x3d	; 61
    58f2:	de b7       	in	r29, 0x3e	; 62
    58f4:	68 97       	sbiw	r28, 0x18	; 24
    58f6:	0f b6       	in	r0, 0x3f	; 63
    58f8:	f8 94       	cli
    58fa:	de bf       	out	0x3e, r29	; 62
    58fc:	0f be       	out	0x3f, r0	; 63
    58fe:	cd bf       	out	0x3d, r28	; 61
  CLCD_vClearScreen();
    5900:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
  CLCD_vSendString((u8 *)"Enter Password");
    5904:	85 e1       	ldi	r24, 0x15	; 21
    5906:	92 e0       	ldi	r25, 0x02	; 2
    5908:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>

  u8 CheckLength = 0;
    590c:	1a 82       	std	Y+2, r1	; 0x02
  PassWord_Check_Flag = 0;
    590e:	10 92 57 05 	sts	0x0557, r1

  while (1)
  {
    Error_State = USART_u8ReceiveData(&KPD_Press);
    5912:	8e e7       	ldi	r24, 0x7E	; 126
    5914:	95 e0       	ldi	r25, 0x05	; 5
    5916:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    591a:	80 93 93 05 	sts	0x0593, r24

    if (Error_State == OK)
    591e:	80 91 93 05 	lds	r24, 0x0593
    5922:	88 23       	and	r24, r24
    5924:	b1 f7       	brne	.-20     	; 0x5912 <PassWord_Check+0x26>
    {
      if (KPD_Press == 0x0D || KPD_Press == 0x0F)
    5926:	80 91 7e 05 	lds	r24, 0x057E
    592a:	8d 30       	cpi	r24, 0x0D	; 13
    592c:	11 f1       	breq	.+68     	; 0x5972 <PassWord_Check+0x86>
    592e:	80 91 7e 05 	lds	r24, 0x057E
    5932:	8f 30       	cpi	r24, 0x0F	; 15
    5934:	f1 f0       	breq	.+60     	; 0x5972 <PassWord_Check+0x86>
      { // Enter key
        break;
      }
      else if (KPD_Press == 0x08)
    5936:	80 91 7e 05 	lds	r24, 0x057E
    593a:	88 30       	cpi	r24, 0x08	; 8
    593c:	39 f4       	brne	.+14     	; 0x594c <PassWord_Check+0x60>
      { // Backspace
        if (CheckLength > 0)
    593e:	8a 81       	ldd	r24, Y+2	; 0x02
    5940:	88 23       	and	r24, r24
    5942:	39 f3       	breq	.-50     	; 0x5912 <PassWord_Check+0x26>
        {
          CheckLength--;
    5944:	8a 81       	ldd	r24, Y+2	; 0x02
    5946:	81 50       	subi	r24, 0x01	; 1
    5948:	8a 83       	std	Y+2, r24	; 0x02
    594a:	e3 cf       	rjmp	.-58     	; 0x5912 <PassWord_Check+0x26>
        }
      }
      else if (CheckLength < PASSWORD_MAX_LENGTH)
    594c:	8a 81       	ldd	r24, Y+2	; 0x02
    594e:	84 31       	cpi	r24, 0x14	; 20
    5950:	00 f7       	brcc	.-64     	; 0x5912 <PassWord_Check+0x26>
      {
        Check[CheckLength] = KPD_Press;
    5952:	8a 81       	ldd	r24, Y+2	; 0x02
    5954:	88 2f       	mov	r24, r24
    5956:	90 e0       	ldi	r25, 0x00	; 0
    5958:	20 91 7e 05 	lds	r18, 0x057E
    595c:	fc 01       	movw	r30, r24
    595e:	e7 59       	subi	r30, 0x97	; 151
    5960:	fa 4f       	sbci	r31, 0xFA	; 250
    5962:	20 83       	st	Z, r18
        CLCD_vSendData('*'); // Show * for password
    5964:	8a e2       	ldi	r24, 0x2A	; 42
    5966:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
        CheckLength++;
    596a:	8a 81       	ldd	r24, Y+2	; 0x02
    596c:	8f 5f       	subi	r24, 0xFF	; 255
    596e:	8a 83       	std	Y+2, r24	; 0x02
    5970:	d0 cf       	rjmp	.-96     	; 0x5912 <PassWord_Check+0x26>

  // Check password for current user
  u8 stored_password[21];
  u8 stored_length;

  Read_Password(Current_User, stored_password, &stored_length);
    5972:	80 91 65 05 	lds	r24, 0x0565
    5976:	9e 01       	movw	r18, r28
    5978:	2d 5f       	subi	r18, 0xFD	; 253
    597a:	3f 4f       	sbci	r19, 0xFF	; 255
    597c:	ae 01       	movw	r20, r28
    597e:	48 5e       	subi	r20, 0xE8	; 232
    5980:	5f 4f       	sbci	r21, 0xFF	; 255
    5982:	b9 01       	movw	r22, r18
    5984:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <Read_Password>

  if (CheckLength == stored_length)
    5988:	98 8d       	ldd	r25, Y+24	; 0x18
    598a:	8a 81       	ldd	r24, Y+2	; 0x02
    598c:	89 17       	cp	r24, r25
    598e:	09 f5       	brne	.+66     	; 0x59d2 <PassWord_Check+0xe6>
  {
    PassWord_Check_Flag = 1;
    5990:	81 e0       	ldi	r24, 0x01	; 1
    5992:	80 93 57 05 	sts	0x0557, r24
    for (u8 i = 0; i < CheckLength; i++)
    5996:	19 82       	std	Y+1, r1	; 0x01
    5998:	18 c0       	rjmp	.+48     	; 0x59ca <PassWord_Check+0xde>
    {
      if (Check[i] != stored_password[i])
    599a:	89 81       	ldd	r24, Y+1	; 0x01
    599c:	88 2f       	mov	r24, r24
    599e:	90 e0       	ldi	r25, 0x00	; 0
    59a0:	fc 01       	movw	r30, r24
    59a2:	e7 59       	subi	r30, 0x97	; 151
    59a4:	fa 4f       	sbci	r31, 0xFA	; 250
    59a6:	40 81       	ld	r20, Z
    59a8:	89 81       	ldd	r24, Y+1	; 0x01
    59aa:	28 2f       	mov	r18, r24
    59ac:	30 e0       	ldi	r19, 0x00	; 0
    59ae:	ce 01       	movw	r24, r28
    59b0:	03 96       	adiw	r24, 0x03	; 3
    59b2:	fc 01       	movw	r30, r24
    59b4:	e2 0f       	add	r30, r18
    59b6:	f3 1f       	adc	r31, r19
    59b8:	80 81       	ld	r24, Z
    59ba:	48 17       	cp	r20, r24
    59bc:	19 f0       	breq	.+6      	; 0x59c4 <PassWord_Check+0xd8>
      {
        PassWord_Check_Flag = 0;
    59be:	10 92 57 05 	sts	0x0557, r1
    59c2:	07 c0       	rjmp	.+14     	; 0x59d2 <PassWord_Check+0xe6>
  Read_Password(Current_User, stored_password, &stored_length);

  if (CheckLength == stored_length)
  {
    PassWord_Check_Flag = 1;
    for (u8 i = 0; i < CheckLength; i++)
    59c4:	89 81       	ldd	r24, Y+1	; 0x01
    59c6:	8f 5f       	subi	r24, 0xFF	; 255
    59c8:	89 83       	std	Y+1, r24	; 0x01
    59ca:	99 81       	ldd	r25, Y+1	; 0x01
    59cc:	8a 81       	ldd	r24, Y+2	; 0x02
    59ce:	98 17       	cp	r25, r24
    59d0:	20 f3       	brcs	.-56     	; 0x599a <PassWord_Check+0xae>
        PassWord_Check_Flag = 0;
        break;
      }
    }
  }
}
    59d2:	68 96       	adiw	r28, 0x18	; 24
    59d4:	0f b6       	in	r0, 0x3f	; 63
    59d6:	f8 94       	cli
    59d8:	de bf       	out	0x3e, r29	; 62
    59da:	0f be       	out	0x3f, r0	; 63
    59dc:	cd bf       	out	0x3d, r28	; 61
    59de:	cf 91       	pop	r28
    59e0:	df 91       	pop	r29
    59e2:	08 95       	ret

000059e4 <Sign_In>:

void Sign_In(void)
{
    59e4:	df 93       	push	r29
    59e6:	cf 93       	push	r28
    59e8:	cd b7       	in	r28, 0x3d	; 61
    59ea:	de b7       	in	r29, 0x3e	; 62
    59ec:	6c 97       	sbiw	r28, 0x1c	; 28
    59ee:	0f b6       	in	r0, 0x3f	; 63
    59f0:	f8 94       	cli
    59f2:	de bf       	out	0x3e, r29	; 62
    59f4:	0f be       	out	0x3f, r0	; 63
    59f6:	cd bf       	out	0x3d, r28	; 61
  while (1)
  {
    UserName_Check();
    59f8:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <UserName_Check>
    if (UserName_Check_Flag)
    59fc:	80 91 56 05 	lds	r24, 0x0556
    5a00:	88 23       	and	r24, r24
    5a02:	11 f0       	breq	.+4      	; 0x5a08 <Sign_In+0x24>
    {
      PassWord_Check();
    5a04:	0e 94 76 2c 	call	0x58ec	; 0x58ec <PassWord_Check>
    }

    if (UserName_Check_Flag == 0 || PassWord_Check_Flag == 0)
    5a08:	80 91 56 05 	lds	r24, 0x0556
    5a0c:	88 23       	and	r24, r24
    5a0e:	29 f0       	breq	.+10     	; 0x5a1a <Sign_In+0x36>
    5a10:	80 91 57 05 	lds	r24, 0x0557
    5a14:	88 23       	and	r24, r24
    5a16:	09 f0       	breq	.+2      	; 0x5a1a <Sign_In+0x36>
    5a18:	9f c0       	rjmp	.+318    	; 0x5b58 <Sign_In+0x174>
    {
      CLCD_vClearScreen();
    5a1a:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
      CLCD_vSendString((u8 *)"Invalid Login");
    5a1e:	84 e2       	ldi	r24, 0x24	; 36
    5a20:	92 e0       	ldi	r25, 0x02	; 2
    5a22:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>

      Tries--;
    5a26:	80 91 55 05 	lds	r24, 0x0555
    5a2a:	81 50       	subi	r24, 0x01	; 1
    5a2c:	80 93 55 05 	sts	0x0555, r24
      EEPROM_vWrite(EEPROM_NoTries_Location, Tries);
    5a30:	20 91 55 05 	lds	r18, 0x0555
    5a34:	82 e1       	ldi	r24, 0x12	; 18
    5a36:	90 e0       	ldi	r25, 0x00	; 0
    5a38:	62 2f       	mov	r22, r18
    5a3a:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>

      if (Tries > 0)
    5a3e:	80 91 55 05 	lds	r24, 0x0555
    5a42:	88 23       	and	r24, r24
    5a44:	09 f4       	brne	.+2      	; 0x5a48 <Sign_In+0x64>
    5a46:	85 c0       	rjmp	.+266    	; 0x5b52 <Sign_In+0x16e>
      {
        CLCD_vSetPosition(2, 1);
    5a48:	82 e0       	ldi	r24, 0x02	; 2
    5a4a:	61 e0       	ldi	r22, 0x01	; 1
    5a4c:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
        CLCD_vSendString((u8 *)"Tries Left: ");
    5a50:	82 e3       	ldi	r24, 0x32	; 50
    5a52:	92 e0       	ldi	r25, 0x02	; 2
    5a54:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
        CLCD_vSendIntNumber(Tries);
    5a58:	80 91 55 05 	lds	r24, 0x0555
    5a5c:	88 2f       	mov	r24, r24
    5a5e:	90 e0       	ldi	r25, 0x00	; 0
    5a60:	a0 e0       	ldi	r26, 0x00	; 0
    5a62:	b0 e0       	ldi	r27, 0x00	; 0
    5a64:	bc 01       	movw	r22, r24
    5a66:	cd 01       	movw	r24, r26
    5a68:	0e 94 8b 1a 	call	0x3516	; 0x3516 <CLCD_vSendIntNumber>
    5a6c:	80 e0       	ldi	r24, 0x00	; 0
    5a6e:	90 e0       	ldi	r25, 0x00	; 0
    5a70:	aa e7       	ldi	r26, 0x7A	; 122
    5a72:	b4 e4       	ldi	r27, 0x44	; 68
    5a74:	89 8f       	std	Y+25, r24	; 0x19
    5a76:	9a 8f       	std	Y+26, r25	; 0x1a
    5a78:	ab 8f       	std	Y+27, r26	; 0x1b
    5a7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a7c:	69 8d       	ldd	r22, Y+25	; 0x19
    5a7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a84:	20 e0       	ldi	r18, 0x00	; 0
    5a86:	30 e0       	ldi	r19, 0x00	; 0
    5a88:	4a ef       	ldi	r20, 0xFA	; 250
    5a8a:	54 e4       	ldi	r21, 0x44	; 68
    5a8c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5a90:	dc 01       	movw	r26, r24
    5a92:	cb 01       	movw	r24, r22
    5a94:	8d 8b       	std	Y+21, r24	; 0x15
    5a96:	9e 8b       	std	Y+22, r25	; 0x16
    5a98:	af 8b       	std	Y+23, r26	; 0x17
    5a9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5a9c:	6d 89       	ldd	r22, Y+21	; 0x15
    5a9e:	7e 89       	ldd	r23, Y+22	; 0x16
    5aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    5aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    5aa4:	20 e0       	ldi	r18, 0x00	; 0
    5aa6:	30 e0       	ldi	r19, 0x00	; 0
    5aa8:	40 e8       	ldi	r20, 0x80	; 128
    5aaa:	5f e3       	ldi	r21, 0x3F	; 63
    5aac:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5ab0:	88 23       	and	r24, r24
    5ab2:	2c f4       	brge	.+10     	; 0x5abe <Sign_In+0xda>
		__ticks = 1;
    5ab4:	81 e0       	ldi	r24, 0x01	; 1
    5ab6:	90 e0       	ldi	r25, 0x00	; 0
    5ab8:	9c 8b       	std	Y+20, r25	; 0x14
    5aba:	8b 8b       	std	Y+19, r24	; 0x13
    5abc:	3f c0       	rjmp	.+126    	; 0x5b3c <Sign_In+0x158>
	else if (__tmp > 65535)
    5abe:	6d 89       	ldd	r22, Y+21	; 0x15
    5ac0:	7e 89       	ldd	r23, Y+22	; 0x16
    5ac2:	8f 89       	ldd	r24, Y+23	; 0x17
    5ac4:	98 8d       	ldd	r25, Y+24	; 0x18
    5ac6:	20 e0       	ldi	r18, 0x00	; 0
    5ac8:	3f ef       	ldi	r19, 0xFF	; 255
    5aca:	4f e7       	ldi	r20, 0x7F	; 127
    5acc:	57 e4       	ldi	r21, 0x47	; 71
    5ace:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5ad2:	18 16       	cp	r1, r24
    5ad4:	4c f5       	brge	.+82     	; 0x5b28 <Sign_In+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ad6:	69 8d       	ldd	r22, Y+25	; 0x19
    5ad8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5ada:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5adc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ade:	20 e0       	ldi	r18, 0x00	; 0
    5ae0:	30 e0       	ldi	r19, 0x00	; 0
    5ae2:	40 e2       	ldi	r20, 0x20	; 32
    5ae4:	51 e4       	ldi	r21, 0x41	; 65
    5ae6:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5aea:	dc 01       	movw	r26, r24
    5aec:	cb 01       	movw	r24, r22
    5aee:	bc 01       	movw	r22, r24
    5af0:	cd 01       	movw	r24, r26
    5af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5af6:	dc 01       	movw	r26, r24
    5af8:	cb 01       	movw	r24, r22
    5afa:	9c 8b       	std	Y+20, r25	; 0x14
    5afc:	8b 8b       	std	Y+19, r24	; 0x13
    5afe:	0f c0       	rjmp	.+30     	; 0x5b1e <Sign_In+0x13a>
    5b00:	88 ec       	ldi	r24, 0xC8	; 200
    5b02:	90 e0       	ldi	r25, 0x00	; 0
    5b04:	9a 8b       	std	Y+18, r25	; 0x12
    5b06:	89 8b       	std	Y+17, r24	; 0x11
    5b08:	89 89       	ldd	r24, Y+17	; 0x11
    5b0a:	9a 89       	ldd	r25, Y+18	; 0x12
    5b0c:	01 97       	sbiw	r24, 0x01	; 1
    5b0e:	f1 f7       	brne	.-4      	; 0x5b0c <Sign_In+0x128>
    5b10:	9a 8b       	std	Y+18, r25	; 0x12
    5b12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b14:	8b 89       	ldd	r24, Y+19	; 0x13
    5b16:	9c 89       	ldd	r25, Y+20	; 0x14
    5b18:	01 97       	sbiw	r24, 0x01	; 1
    5b1a:	9c 8b       	std	Y+20, r25	; 0x14
    5b1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b1e:	8b 89       	ldd	r24, Y+19	; 0x13
    5b20:	9c 89       	ldd	r25, Y+20	; 0x14
    5b22:	00 97       	sbiw	r24, 0x00	; 0
    5b24:	69 f7       	brne	.-38     	; 0x5b00 <Sign_In+0x11c>
    5b26:	68 cf       	rjmp	.-304    	; 0x59f8 <Sign_In+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b28:	6d 89       	ldd	r22, Y+21	; 0x15
    5b2a:	7e 89       	ldd	r23, Y+22	; 0x16
    5b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    5b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    5b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b34:	dc 01       	movw	r26, r24
    5b36:	cb 01       	movw	r24, r22
    5b38:	9c 8b       	std	Y+20, r25	; 0x14
    5b3a:	8b 8b       	std	Y+19, r24	; 0x13
    5b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    5b3e:	9c 89       	ldd	r25, Y+20	; 0x14
    5b40:	98 8b       	std	Y+16, r25	; 0x10
    5b42:	8f 87       	std	Y+15, r24	; 0x0f
    5b44:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b46:	98 89       	ldd	r25, Y+16	; 0x10
    5b48:	01 97       	sbiw	r24, 0x01	; 1
    5b4a:	f1 f7       	brne	.-4      	; 0x5b48 <Sign_In+0x164>
    5b4c:	98 8b       	std	Y+16, r25	; 0x10
    5b4e:	8f 87       	std	Y+15, r24	; 0x0f
    5b50:	53 cf       	rjmp	.-346    	; 0x59f8 <Sign_In+0x14>
        _delay_ms(1000);
      }
      else
      {
        Error_TimeOut();
    5b52:	0e 94 3e 2e 	call	0x5c7c	; 0x5c7c <Error_TimeOut>
    5b56:	50 cf       	rjmp	.-352    	; 0x59f8 <Sign_In+0x14>
      }
    }
    else
    {
      CLCD_vClearScreen();
    5b58:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
      CLCD_vSendString((u8 *)"Login Success!");
    5b5c:	8f e3       	ldi	r24, 0x3F	; 63
    5b5e:	92 e0       	ldi	r25, 0x02	; 2
    5b60:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    5b64:	80 e0       	ldi	r24, 0x00	; 0
    5b66:	90 e0       	ldi	r25, 0x00	; 0
    5b68:	aa e7       	ldi	r26, 0x7A	; 122
    5b6a:	b4 e4       	ldi	r27, 0x44	; 68
    5b6c:	8b 87       	std	Y+11, r24	; 0x0b
    5b6e:	9c 87       	std	Y+12, r25	; 0x0c
    5b70:	ad 87       	std	Y+13, r26	; 0x0d
    5b72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b74:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b76:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b78:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b7c:	20 e0       	ldi	r18, 0x00	; 0
    5b7e:	30 e0       	ldi	r19, 0x00	; 0
    5b80:	4a ef       	ldi	r20, 0xFA	; 250
    5b82:	54 e4       	ldi	r21, 0x44	; 68
    5b84:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5b88:	dc 01       	movw	r26, r24
    5b8a:	cb 01       	movw	r24, r22
    5b8c:	8f 83       	std	Y+7, r24	; 0x07
    5b8e:	98 87       	std	Y+8, r25	; 0x08
    5b90:	a9 87       	std	Y+9, r26	; 0x09
    5b92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5b94:	6f 81       	ldd	r22, Y+7	; 0x07
    5b96:	78 85       	ldd	r23, Y+8	; 0x08
    5b98:	89 85       	ldd	r24, Y+9	; 0x09
    5b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b9c:	20 e0       	ldi	r18, 0x00	; 0
    5b9e:	30 e0       	ldi	r19, 0x00	; 0
    5ba0:	40 e8       	ldi	r20, 0x80	; 128
    5ba2:	5f e3       	ldi	r21, 0x3F	; 63
    5ba4:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5ba8:	88 23       	and	r24, r24
    5baa:	2c f4       	brge	.+10     	; 0x5bb6 <Sign_In+0x1d2>
		__ticks = 1;
    5bac:	81 e0       	ldi	r24, 0x01	; 1
    5bae:	90 e0       	ldi	r25, 0x00	; 0
    5bb0:	9e 83       	std	Y+6, r25	; 0x06
    5bb2:	8d 83       	std	Y+5, r24	; 0x05
    5bb4:	3f c0       	rjmp	.+126    	; 0x5c34 <Sign_In+0x250>
	else if (__tmp > 65535)
    5bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    5bb8:	78 85       	ldd	r23, Y+8	; 0x08
    5bba:	89 85       	ldd	r24, Y+9	; 0x09
    5bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bbe:	20 e0       	ldi	r18, 0x00	; 0
    5bc0:	3f ef       	ldi	r19, 0xFF	; 255
    5bc2:	4f e7       	ldi	r20, 0x7F	; 127
    5bc4:	57 e4       	ldi	r21, 0x47	; 71
    5bc6:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5bca:	18 16       	cp	r1, r24
    5bcc:	4c f5       	brge	.+82     	; 0x5c20 <Sign_In+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bce:	6b 85       	ldd	r22, Y+11	; 0x0b
    5bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bd6:	20 e0       	ldi	r18, 0x00	; 0
    5bd8:	30 e0       	ldi	r19, 0x00	; 0
    5bda:	40 e2       	ldi	r20, 0x20	; 32
    5bdc:	51 e4       	ldi	r21, 0x41	; 65
    5bde:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5be2:	dc 01       	movw	r26, r24
    5be4:	cb 01       	movw	r24, r22
    5be6:	bc 01       	movw	r22, r24
    5be8:	cd 01       	movw	r24, r26
    5bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bee:	dc 01       	movw	r26, r24
    5bf0:	cb 01       	movw	r24, r22
    5bf2:	9e 83       	std	Y+6, r25	; 0x06
    5bf4:	8d 83       	std	Y+5, r24	; 0x05
    5bf6:	0f c0       	rjmp	.+30     	; 0x5c16 <Sign_In+0x232>
    5bf8:	88 ec       	ldi	r24, 0xC8	; 200
    5bfa:	90 e0       	ldi	r25, 0x00	; 0
    5bfc:	9c 83       	std	Y+4, r25	; 0x04
    5bfe:	8b 83       	std	Y+3, r24	; 0x03
    5c00:	8b 81       	ldd	r24, Y+3	; 0x03
    5c02:	9c 81       	ldd	r25, Y+4	; 0x04
    5c04:	01 97       	sbiw	r24, 0x01	; 1
    5c06:	f1 f7       	brne	.-4      	; 0x5c04 <Sign_In+0x220>
    5c08:	9c 83       	std	Y+4, r25	; 0x04
    5c0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    5c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    5c10:	01 97       	sbiw	r24, 0x01	; 1
    5c12:	9e 83       	std	Y+6, r25	; 0x06
    5c14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c16:	8d 81       	ldd	r24, Y+5	; 0x05
    5c18:	9e 81       	ldd	r25, Y+6	; 0x06
    5c1a:	00 97       	sbiw	r24, 0x00	; 0
    5c1c:	69 f7       	brne	.-38     	; 0x5bf8 <Sign_In+0x214>
    5c1e:	14 c0       	rjmp	.+40     	; 0x5c48 <Sign_In+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c20:	6f 81       	ldd	r22, Y+7	; 0x07
    5c22:	78 85       	ldd	r23, Y+8	; 0x08
    5c24:	89 85       	ldd	r24, Y+9	; 0x09
    5c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c2c:	dc 01       	movw	r26, r24
    5c2e:	cb 01       	movw	r24, r22
    5c30:	9e 83       	std	Y+6, r25	; 0x06
    5c32:	8d 83       	std	Y+5, r24	; 0x05
    5c34:	8d 81       	ldd	r24, Y+5	; 0x05
    5c36:	9e 81       	ldd	r25, Y+6	; 0x06
    5c38:	9a 83       	std	Y+2, r25	; 0x02
    5c3a:	89 83       	std	Y+1, r24	; 0x01
    5c3c:	89 81       	ldd	r24, Y+1	; 0x01
    5c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5c40:	01 97       	sbiw	r24, 0x01	; 1
    5c42:	f1 f7       	brne	.-4      	; 0x5c40 <Sign_In+0x25c>
    5c44:	9a 83       	std	Y+2, r25	; 0x02
    5c46:	89 83       	std	Y+1, r24	; 0x01
      _delay_ms(1000);

      // Reset tries on successful login
      EEPROM_vWrite(EEPROM_NoTries_Location, NOTPRESSED);
    5c48:	82 e1       	ldi	r24, 0x12	; 18
    5c4a:	90 e0       	ldi	r25, 0x00	; 0
    5c4c:	6f ef       	ldi	r22, 0xFF	; 255
    5c4e:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
      Tries = Tries_Max;
    5c52:	83 e0       	ldi	r24, 0x03	; 3
    5c54:	80 93 55 05 	sts	0x0555, r24

      // Read and display username
      Read_Username(Current_User, UserName, &UserName_Length);
    5c58:	80 91 65 05 	lds	r24, 0x0565
    5c5c:	2f e7       	ldi	r18, 0x7F	; 127
    5c5e:	35 e0       	ldi	r19, 0x05	; 5
    5c60:	43 e6       	ldi	r20, 0x63	; 99
    5c62:	55 e0       	ldi	r21, 0x05	; 5
    5c64:	b9 01       	movw	r22, r18
    5c66:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <Read_Username>
      break;
    }
  }
}
    5c6a:	6c 96       	adiw	r28, 0x1c	; 28
    5c6c:	0f b6       	in	r0, 0x3f	; 63
    5c6e:	f8 94       	cli
    5c70:	de bf       	out	0x3e, r29	; 62
    5c72:	0f be       	out	0x3f, r0	; 63
    5c74:	cd bf       	out	0x3d, r28	; 61
    5c76:	cf 91       	pop	r28
    5c78:	df 91       	pop	r29
    5c7a:	08 95       	ret

00005c7c <Error_TimeOut>:

void Error_TimeOut(void)
{
    5c7c:	df 93       	push	r29
    5c7e:	cf 93       	push	r28
    5c80:	cd b7       	in	r28, 0x3d	; 61
    5c82:	de b7       	in	r29, 0x3e	; 62
    5c84:	2f 97       	sbiw	r28, 0x0f	; 15
    5c86:	0f b6       	in	r0, 0x3f	; 63
    5c88:	f8 94       	cli
    5c8a:	de bf       	out	0x3e, r29	; 62
    5c8c:	0f be       	out	0x3f, r0	; 63
    5c8e:	cd bf       	out	0x3d, r28	; 61
  CLCD_vClearScreen();
    5c90:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
  CLCD_vSendString((u8 *)"Time out: ");
    5c94:	8e e4       	ldi	r24, 0x4E	; 78
    5c96:	92 e0       	ldi	r25, 0x02	; 2
    5c98:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>

  for (u8 i = 5; i > 0; i--)
    5c9c:	85 e0       	ldi	r24, 0x05	; 5
    5c9e:	8f 87       	std	Y+15, r24	; 0x0f
    5ca0:	82 c0       	rjmp	.+260    	; 0x5da6 <Error_TimeOut+0x12a>
  {
    CLCD_vSetPosition(1, 10);
    5ca2:	81 e0       	ldi	r24, 0x01	; 1
    5ca4:	6a e0       	ldi	r22, 0x0A	; 10
    5ca6:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
    CLCD_vSendIntNumber(i);
    5caa:	8f 85       	ldd	r24, Y+15	; 0x0f
    5cac:	88 2f       	mov	r24, r24
    5cae:	90 e0       	ldi	r25, 0x00	; 0
    5cb0:	a0 e0       	ldi	r26, 0x00	; 0
    5cb2:	b0 e0       	ldi	r27, 0x00	; 0
    5cb4:	bc 01       	movw	r22, r24
    5cb6:	cd 01       	movw	r24, r26
    5cb8:	0e 94 8b 1a 	call	0x3516	; 0x3516 <CLCD_vSendIntNumber>
    5cbc:	80 e0       	ldi	r24, 0x00	; 0
    5cbe:	90 e0       	ldi	r25, 0x00	; 0
    5cc0:	aa e7       	ldi	r26, 0x7A	; 122
    5cc2:	b4 e4       	ldi	r27, 0x44	; 68
    5cc4:	8b 87       	std	Y+11, r24	; 0x0b
    5cc6:	9c 87       	std	Y+12, r25	; 0x0c
    5cc8:	ad 87       	std	Y+13, r26	; 0x0d
    5cca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ccc:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cce:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cd4:	20 e0       	ldi	r18, 0x00	; 0
    5cd6:	30 e0       	ldi	r19, 0x00	; 0
    5cd8:	4a ef       	ldi	r20, 0xFA	; 250
    5cda:	54 e4       	ldi	r21, 0x44	; 68
    5cdc:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5ce0:	dc 01       	movw	r26, r24
    5ce2:	cb 01       	movw	r24, r22
    5ce4:	8f 83       	std	Y+7, r24	; 0x07
    5ce6:	98 87       	std	Y+8, r25	; 0x08
    5ce8:	a9 87       	std	Y+9, r26	; 0x09
    5cea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5cec:	6f 81       	ldd	r22, Y+7	; 0x07
    5cee:	78 85       	ldd	r23, Y+8	; 0x08
    5cf0:	89 85       	ldd	r24, Y+9	; 0x09
    5cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cf4:	20 e0       	ldi	r18, 0x00	; 0
    5cf6:	30 e0       	ldi	r19, 0x00	; 0
    5cf8:	40 e8       	ldi	r20, 0x80	; 128
    5cfa:	5f e3       	ldi	r21, 0x3F	; 63
    5cfc:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    5d00:	88 23       	and	r24, r24
    5d02:	2c f4       	brge	.+10     	; 0x5d0e <Error_TimeOut+0x92>
		__ticks = 1;
    5d04:	81 e0       	ldi	r24, 0x01	; 1
    5d06:	90 e0       	ldi	r25, 0x00	; 0
    5d08:	9e 83       	std	Y+6, r25	; 0x06
    5d0a:	8d 83       	std	Y+5, r24	; 0x05
    5d0c:	3f c0       	rjmp	.+126    	; 0x5d8c <Error_TimeOut+0x110>
	else if (__tmp > 65535)
    5d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    5d10:	78 85       	ldd	r23, Y+8	; 0x08
    5d12:	89 85       	ldd	r24, Y+9	; 0x09
    5d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d16:	20 e0       	ldi	r18, 0x00	; 0
    5d18:	3f ef       	ldi	r19, 0xFF	; 255
    5d1a:	4f e7       	ldi	r20, 0x7F	; 127
    5d1c:	57 e4       	ldi	r21, 0x47	; 71
    5d1e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    5d22:	18 16       	cp	r1, r24
    5d24:	4c f5       	brge	.+82     	; 0x5d78 <Error_TimeOut+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d26:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d28:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5d2e:	20 e0       	ldi	r18, 0x00	; 0
    5d30:	30 e0       	ldi	r19, 0x00	; 0
    5d32:	40 e2       	ldi	r20, 0x20	; 32
    5d34:	51 e4       	ldi	r21, 0x41	; 65
    5d36:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    5d3a:	dc 01       	movw	r26, r24
    5d3c:	cb 01       	movw	r24, r22
    5d3e:	bc 01       	movw	r22, r24
    5d40:	cd 01       	movw	r24, r26
    5d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d46:	dc 01       	movw	r26, r24
    5d48:	cb 01       	movw	r24, r22
    5d4a:	9e 83       	std	Y+6, r25	; 0x06
    5d4c:	8d 83       	std	Y+5, r24	; 0x05
    5d4e:	0f c0       	rjmp	.+30     	; 0x5d6e <Error_TimeOut+0xf2>
    5d50:	88 ec       	ldi	r24, 0xC8	; 200
    5d52:	90 e0       	ldi	r25, 0x00	; 0
    5d54:	9c 83       	std	Y+4, r25	; 0x04
    5d56:	8b 83       	std	Y+3, r24	; 0x03
    5d58:	8b 81       	ldd	r24, Y+3	; 0x03
    5d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    5d5c:	01 97       	sbiw	r24, 0x01	; 1
    5d5e:	f1 f7       	brne	.-4      	; 0x5d5c <Error_TimeOut+0xe0>
    5d60:	9c 83       	std	Y+4, r25	; 0x04
    5d62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d64:	8d 81       	ldd	r24, Y+5	; 0x05
    5d66:	9e 81       	ldd	r25, Y+6	; 0x06
    5d68:	01 97       	sbiw	r24, 0x01	; 1
    5d6a:	9e 83       	std	Y+6, r25	; 0x06
    5d6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    5d70:	9e 81       	ldd	r25, Y+6	; 0x06
    5d72:	00 97       	sbiw	r24, 0x00	; 0
    5d74:	69 f7       	brne	.-38     	; 0x5d50 <Error_TimeOut+0xd4>
    5d76:	14 c0       	rjmp	.+40     	; 0x5da0 <Error_TimeOut+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d78:	6f 81       	ldd	r22, Y+7	; 0x07
    5d7a:	78 85       	ldd	r23, Y+8	; 0x08
    5d7c:	89 85       	ldd	r24, Y+9	; 0x09
    5d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d84:	dc 01       	movw	r26, r24
    5d86:	cb 01       	movw	r24, r22
    5d88:	9e 83       	std	Y+6, r25	; 0x06
    5d8a:	8d 83       	std	Y+5, r24	; 0x05
    5d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    5d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    5d90:	9a 83       	std	Y+2, r25	; 0x02
    5d92:	89 83       	std	Y+1, r24	; 0x01
    5d94:	89 81       	ldd	r24, Y+1	; 0x01
    5d96:	9a 81       	ldd	r25, Y+2	; 0x02
    5d98:	01 97       	sbiw	r24, 0x01	; 1
    5d9a:	f1 f7       	brne	.-4      	; 0x5d98 <Error_TimeOut+0x11c>
    5d9c:	9a 83       	std	Y+2, r25	; 0x02
    5d9e:	89 83       	std	Y+1, r24	; 0x01
void Error_TimeOut(void)
{
  CLCD_vClearScreen();
  CLCD_vSendString((u8 *)"Time out: ");

  for (u8 i = 5; i > 0; i--)
    5da0:	8f 85       	ldd	r24, Y+15	; 0x0f
    5da2:	81 50       	subi	r24, 0x01	; 1
    5da4:	8f 87       	std	Y+15, r24	; 0x0f
    5da6:	8f 85       	ldd	r24, Y+15	; 0x0f
    5da8:	88 23       	and	r24, r24
    5daa:	09 f0       	breq	.+2      	; 0x5dae <Error_TimeOut+0x132>
    5dac:	7a cf       	rjmp	.-268    	; 0x5ca2 <Error_TimeOut+0x26>
    CLCD_vSetPosition(1, 10);
    CLCD_vSendIntNumber(i);
    _delay_ms(1000);
  }

  EEPROM_vWrite(EEPROM_NoTries_Location, NOTPRESSED);
    5dae:	82 e1       	ldi	r24, 0x12	; 18
    5db0:	90 e0       	ldi	r25, 0x00	; 0
    5db2:	6f ef       	ldi	r22, 0xFF	; 255
    5db4:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
  Tries = Tries_Max;
    5db8:	83 e0       	ldi	r24, 0x03	; 3
    5dba:	80 93 55 05 	sts	0x0555, r24
}
    5dbe:	2f 96       	adiw	r28, 0x0f	; 15
    5dc0:	0f b6       	in	r0, 0x3f	; 63
    5dc2:	f8 94       	cli
    5dc4:	de bf       	out	0x3e, r29	; 62
    5dc6:	0f be       	out	0x3f, r0	; 63
    5dc8:	cd bf       	out	0x3d, r28	; 61
    5dca:	cf 91       	pop	r28
    5dcc:	df 91       	pop	r29
    5dce:	08 95       	ret

00005dd0 <Clear_Char>:

void Clear_Char(void)
{
    5dd0:	df 93       	push	r29
    5dd2:	cf 93       	push	r28
    5dd4:	cd b7       	in	r28, 0x3d	; 61
    5dd6:	de b7       	in	r29, 0x3e	; 62
  CLCD_vSendCommand(CLCD_SHIFT_CURSOR_LEFT);
    5dd8:	80 e1       	ldi	r24, 0x10	; 16
    5dda:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
  CLCD_vSendData(' ');
    5dde:	80 e2       	ldi	r24, 0x20	; 32
    5de0:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
  CLCD_vSendCommand(CLCD_SHIFT_CURSOR_LEFT);
    5de4:	80 e1       	ldi	r24, 0x10	; 16
    5de6:	0e 94 b5 18 	call	0x316a	; 0x316a <CLCD_vSendCommand>
}
    5dea:	cf 91       	pop	r28
    5dec:	df 91       	pop	r29
    5dee:	08 95       	ret

00005df0 <System_GetStatus>:

u8 System_GetStatus(void)
{
    5df0:	df 93       	push	r29
    5df2:	cf 93       	push	r28
    5df4:	cd b7       	in	r28, 0x3d	; 61
    5df6:	de b7       	in	r29, 0x3e	; 62
  return EEPROM_vRead(EEPROM_SYSTEM_STATUS);
    5df8:	80 e1       	ldi	r24, 0x10	; 16
    5dfa:	90 e0       	ldi	r25, 0x00	; 0
    5dfc:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
}
    5e00:	cf 91       	pop	r28
    5e02:	df 91       	pop	r29
    5e04:	08 95       	ret

00005e06 <System_SetStatus>:

void System_SetStatus(u8 status)
{
    5e06:	df 93       	push	r29
    5e08:	cf 93       	push	r28
    5e0a:	0f 92       	push	r0
    5e0c:	cd b7       	in	r28, 0x3d	; 61
    5e0e:	de b7       	in	r29, 0x3e	; 62
    5e10:	89 83       	std	Y+1, r24	; 0x01
  EEPROM_vWrite(EEPROM_SYSTEM_STATUS, status);
    5e12:	80 e1       	ldi	r24, 0x10	; 16
    5e14:	90 e0       	ldi	r25, 0x00	; 0
    5e16:	69 81       	ldd	r22, Y+1	; 0x01
    5e18:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
}
    5e1c:	0f 90       	pop	r0
    5e1e:	cf 91       	pop	r28
    5e20:	df 91       	pop	r29
    5e22:	08 95       	ret

00005e24 <System_GetSecurityLevel>:

u8 System_GetSecurityLevel(void)
{
    5e24:	df 93       	push	r29
    5e26:	cf 93       	push	r28
    5e28:	cd b7       	in	r28, 0x3d	; 61
    5e2a:	de b7       	in	r29, 0x3e	; 62
  return Security_Level;
    5e2c:	80 91 58 05 	lds	r24, 0x0558
}
    5e30:	cf 91       	pop	r28
    5e32:	df 91       	pop	r29
    5e34:	08 95       	ret

00005e36 <System_SetSecurityLevel>:

void System_SetSecurityLevel(u8 level)
{
    5e36:	df 93       	push	r29
    5e38:	cf 93       	push	r28
    5e3a:	0f 92       	push	r0
    5e3c:	cd b7       	in	r28, 0x3d	; 61
    5e3e:	de b7       	in	r29, 0x3e	; 62
    5e40:	89 83       	std	Y+1, r24	; 0x01
  if (level <= SECURITY_LEVEL_HIGH)
    5e42:	89 81       	ldd	r24, Y+1	; 0x01
    5e44:	83 30       	cpi	r24, 0x03	; 3
    5e46:	18 f4       	brcc	.+6      	; 0x5e4e <System_SetSecurityLevel+0x18>
  {
    Security_Level = level;
    5e48:	89 81       	ldd	r24, Y+1	; 0x01
    5e4a:	80 93 58 05 	sts	0x0558, r24
  }
}
    5e4e:	0f 90       	pop	r0
    5e50:	cf 91       	pop	r28
    5e52:	df 91       	pop	r29
    5e54:	08 95       	ret

00005e56 <Calculate_Checksum>:

u8 Calculate_Checksum(void)
{
    5e56:	df 93       	push	r29
    5e58:	cf 93       	push	r28
    5e5a:	00 d0       	rcall	.+0      	; 0x5e5c <Calculate_Checksum+0x6>
    5e5c:	0f 92       	push	r0
    5e5e:	cd b7       	in	r28, 0x3d	; 61
    5e60:	de b7       	in	r29, 0x3e	; 62
  u8 checksum = 0;
    5e62:	1b 82       	std	Y+3, r1	; 0x03
  for (u16 addr = EEPROM_START_ADDRESS; addr < EEPROM_CHECKSUM_Location; addr++)
    5e64:	1a 82       	std	Y+2, r1	; 0x02
    5e66:	19 82       	std	Y+1, r1	; 0x01
    5e68:	0d c0       	rjmp	.+26     	; 0x5e84 <Calculate_Checksum+0x2e>
  {
    checksum ^= EEPROM_vRead(addr);
    5e6a:	89 81       	ldd	r24, Y+1	; 0x01
    5e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    5e6e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    5e72:	98 2f       	mov	r25, r24
    5e74:	8b 81       	ldd	r24, Y+3	; 0x03
    5e76:	89 27       	eor	r24, r25
    5e78:	8b 83       	std	Y+3, r24	; 0x03
}

u8 Calculate_Checksum(void)
{
  u8 checksum = 0;
  for (u16 addr = EEPROM_START_ADDRESS; addr < EEPROM_CHECKSUM_Location; addr++)
    5e7a:	89 81       	ldd	r24, Y+1	; 0x01
    5e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    5e7e:	01 96       	adiw	r24, 0x01	; 1
    5e80:	9a 83       	std	Y+2, r25	; 0x02
    5e82:	89 83       	std	Y+1, r24	; 0x01
    5e84:	89 81       	ldd	r24, Y+1	; 0x01
    5e86:	9a 81       	ldd	r25, Y+2	; 0x02
    5e88:	85 31       	cpi	r24, 0x15	; 21
    5e8a:	91 05       	cpc	r25, r1
    5e8c:	70 f3       	brcs	.-36     	; 0x5e6a <Calculate_Checksum+0x14>
  {
    checksum ^= EEPROM_vRead(addr);
  }
  return checksum;
    5e8e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5e90:	0f 90       	pop	r0
    5e92:	0f 90       	pop	r0
    5e94:	0f 90       	pop	r0
    5e96:	cf 91       	pop	r28
    5e98:	df 91       	pop	r29
    5e9a:	08 95       	ret

00005e9c <Update_Checksum>:

void Update_Checksum(void)
{
    5e9c:	df 93       	push	r29
    5e9e:	cf 93       	push	r28
    5ea0:	0f 92       	push	r0
    5ea2:	cd b7       	in	r28, 0x3d	; 61
    5ea4:	de b7       	in	r29, 0x3e	; 62
  u8 checksum = Calculate_Checksum();
    5ea6:	0e 94 2b 2f 	call	0x5e56	; 0x5e56 <Calculate_Checksum>
    5eaa:	89 83       	std	Y+1, r24	; 0x01
  EEPROM_vWrite(EEPROM_CHECKSUM_Location, checksum);
    5eac:	85 e1       	ldi	r24, 0x15	; 21
    5eae:	90 e0       	ldi	r25, 0x00	; 0
    5eb0:	69 81       	ldd	r22, Y+1	; 0x01
    5eb2:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
}
    5eb6:	0f 90       	pop	r0
    5eb8:	cf 91       	pop	r28
    5eba:	df 91       	pop	r29
    5ebc:	08 95       	ret

00005ebe <Verify_System_Integrity>:

u8 Verify_System_Integrity(void)
{
    5ebe:	df 93       	push	r29
    5ec0:	cf 93       	push	r28
    5ec2:	00 d0       	rcall	.+0      	; 0x5ec4 <Verify_System_Integrity+0x6>
    5ec4:	0f 92       	push	r0
    5ec6:	cd b7       	in	r28, 0x3d	; 61
    5ec8:	de b7       	in	r29, 0x3e	; 62
  u8 stored_checksum = EEPROM_vRead(EEPROM_CHECKSUM_Location);
    5eca:	85 e1       	ldi	r24, 0x15	; 21
    5ecc:	90 e0       	ldi	r25, 0x00	; 0
    5ece:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    5ed2:	8a 83       	std	Y+2, r24	; 0x02
  u8 calculated_checksum = Calculate_Checksum();
    5ed4:	0e 94 2b 2f 	call	0x5e56	; 0x5e56 <Calculate_Checksum>
    5ed8:	89 83       	std	Y+1, r24	; 0x01
  return (stored_checksum == calculated_checksum);
    5eda:	1b 82       	std	Y+3, r1	; 0x03
    5edc:	9a 81       	ldd	r25, Y+2	; 0x02
    5ede:	89 81       	ldd	r24, Y+1	; 0x01
    5ee0:	98 17       	cp	r25, r24
    5ee2:	11 f4       	brne	.+4      	; 0x5ee8 <Verify_System_Integrity+0x2a>
    5ee4:	81 e0       	ldi	r24, 0x01	; 1
    5ee6:	8b 83       	std	Y+3, r24	; 0x03
    5ee8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5eea:	0f 90       	pop	r0
    5eec:	0f 90       	pop	r0
    5eee:	0f 90       	pop	r0
    5ef0:	cf 91       	pop	r28
    5ef2:	df 91       	pop	r29
    5ef4:	08 95       	ret

00005ef6 <Create_Backup>:

void Create_Backup(void)
{
    5ef6:	df 93       	push	r29
    5ef8:	cf 93       	push	r28
    5efa:	00 d0       	rcall	.+0      	; 0x5efc <Create_Backup+0x6>
    5efc:	0f 92       	push	r0
    5efe:	cd b7       	in	r28, 0x3d	; 61
    5f00:	de b7       	in	r29, 0x3e	; 62
  // Copy main data to backup section
  for (u16 addr = EEPROM_START_ADDRESS; addr < EEPROM_BACKUP_START; addr++)
    5f02:	1b 82       	std	Y+3, r1	; 0x03
    5f04:	1a 82       	std	Y+2, r1	; 0x02
    5f06:	11 c0       	rjmp	.+34     	; 0x5f2a <Create_Backup+0x34>
  {
    u8 data = EEPROM_vRead(addr);
    5f08:	8a 81       	ldd	r24, Y+2	; 0x02
    5f0a:	9b 81       	ldd	r25, Y+3	; 0x03
    5f0c:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    5f10:	89 83       	std	Y+1, r24	; 0x01
    EEPROM_vWrite(EEPROM_BACKUP_START + addr, data);
    5f12:	8a 81       	ldd	r24, Y+2	; 0x02
    5f14:	9b 81       	ldd	r25, Y+3	; 0x03
    5f16:	80 50       	subi	r24, 0x00	; 0
    5f18:	9e 4f       	sbci	r25, 0xFE	; 254
    5f1a:	69 81       	ldd	r22, Y+1	; 0x01
    5f1c:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
}

void Create_Backup(void)
{
  // Copy main data to backup section
  for (u16 addr = EEPROM_START_ADDRESS; addr < EEPROM_BACKUP_START; addr++)
    5f20:	8a 81       	ldd	r24, Y+2	; 0x02
    5f22:	9b 81       	ldd	r25, Y+3	; 0x03
    5f24:	01 96       	adiw	r24, 0x01	; 1
    5f26:	9b 83       	std	Y+3, r25	; 0x03
    5f28:	8a 83       	std	Y+2, r24	; 0x02
    5f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    5f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    5f2e:	22 e0       	ldi	r18, 0x02	; 2
    5f30:	80 30       	cpi	r24, 0x00	; 0
    5f32:	92 07       	cpc	r25, r18
    5f34:	48 f3       	brcs	.-46     	; 0x5f08 <Create_Backup+0x12>
    u8 data = EEPROM_vRead(addr);
    EEPROM_vWrite(EEPROM_BACKUP_START + addr, data);
  }

  // Set backup valid flag
  System_SetStatus(System_GetStatus() | SYSTEM_BACKUP_VALID);
    5f36:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <System_GetStatus>
    5f3a:	88 60       	ori	r24, 0x08	; 8
    5f3c:	0e 94 03 2f 	call	0x5e06	; 0x5e06 <System_SetStatus>
  Log_Event(EVENT_BACKUP_CREATE, Current_User);
    5f40:	90 91 65 05 	lds	r25, 0x0565
    5f44:	88 e0       	ldi	r24, 0x08	; 8
    5f46:	69 2f       	mov	r22, r25
    5f48:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <Log_Event>
}
    5f4c:	0f 90       	pop	r0
    5f4e:	0f 90       	pop	r0
    5f50:	0f 90       	pop	r0
    5f52:	cf 91       	pop	r28
    5f54:	df 91       	pop	r29
    5f56:	08 95       	ret

00005f58 <Restore_Backup>:

u8 Restore_Backup(void)
{
    5f58:	df 93       	push	r29
    5f5a:	cf 93       	push	r28
    5f5c:	00 d0       	rcall	.+0      	; 0x5f5e <Restore_Backup+0x6>
    5f5e:	00 d0       	rcall	.+0      	; 0x5f60 <Restore_Backup+0x8>
    5f60:	cd b7       	in	r28, 0x3d	; 61
    5f62:	de b7       	in	r29, 0x3e	; 62
  if (!(System_GetStatus() & SYSTEM_BACKUP_VALID))
    5f64:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <System_GetStatus>
    5f68:	88 2f       	mov	r24, r24
    5f6a:	90 e0       	ldi	r25, 0x00	; 0
    5f6c:	88 70       	andi	r24, 0x08	; 8
    5f6e:	90 70       	andi	r25, 0x00	; 0
    5f70:	00 97       	sbiw	r24, 0x00	; 0
    5f72:	11 f4       	brne	.+4      	; 0x5f78 <Restore_Backup+0x20>
  {
    return 0;
    5f74:	1c 82       	std	Y+4, r1	; 0x04
    5f76:	22 c0       	rjmp	.+68     	; 0x5fbc <Restore_Backup+0x64>
  }

  // Restore data from backup section
  for (u16 addr = EEPROM_START_ADDRESS; addr < EEPROM_BACKUP_START; addr++)
    5f78:	1b 82       	std	Y+3, r1	; 0x03
    5f7a:	1a 82       	std	Y+2, r1	; 0x02
    5f7c:	11 c0       	rjmp	.+34     	; 0x5fa0 <Restore_Backup+0x48>
  {
    u8 data = EEPROM_vRead(EEPROM_BACKUP_START + addr);
    5f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    5f80:	9b 81       	ldd	r25, Y+3	; 0x03
    5f82:	80 50       	subi	r24, 0x00	; 0
    5f84:	9e 4f       	sbci	r25, 0xFE	; 254
    5f86:	0e 94 cc 0c 	call	0x1998	; 0x1998 <EEPROM_vRead>
    5f8a:	89 83       	std	Y+1, r24	; 0x01
    EEPROM_vWrite(addr, data);
    5f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    5f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    5f90:	69 81       	ldd	r22, Y+1	; 0x01
    5f92:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
  {
    return 0;
  }

  // Restore data from backup section
  for (u16 addr = EEPROM_START_ADDRESS; addr < EEPROM_BACKUP_START; addr++)
    5f96:	8a 81       	ldd	r24, Y+2	; 0x02
    5f98:	9b 81       	ldd	r25, Y+3	; 0x03
    5f9a:	01 96       	adiw	r24, 0x01	; 1
    5f9c:	9b 83       	std	Y+3, r25	; 0x03
    5f9e:	8a 83       	std	Y+2, r24	; 0x02
    5fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    5fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    5fa4:	22 e0       	ldi	r18, 0x02	; 2
    5fa6:	80 30       	cpi	r24, 0x00	; 0
    5fa8:	92 07       	cpc	r25, r18
    5faa:	48 f3       	brcs	.-46     	; 0x5f7e <Restore_Backup+0x26>
  {
    u8 data = EEPROM_vRead(EEPROM_BACKUP_START + addr);
    EEPROM_vWrite(addr, data);
  }

  Log_Event(EVENT_BACKUP_RESTORE, Current_User);
    5fac:	90 91 65 05 	lds	r25, 0x0565
    5fb0:	89 e0       	ldi	r24, 0x09	; 9
    5fb2:	69 2f       	mov	r22, r25
    5fb4:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <Log_Event>
  return 1;
    5fb8:	81 e0       	ldi	r24, 0x01	; 1
    5fba:	8c 83       	std	Y+4, r24	; 0x04
    5fbc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    5fbe:	0f 90       	pop	r0
    5fc0:	0f 90       	pop	r0
    5fc2:	0f 90       	pop	r0
    5fc4:	0f 90       	pop	r0
    5fc6:	cf 91       	pop	r28
    5fc8:	df 91       	pop	r29
    5fca:	08 95       	ret

00005fcc <Factory_Reset>:

void Factory_Reset(void)
{
    5fcc:	df 93       	push	r29
    5fce:	cf 93       	push	r28
    5fd0:	00 d0       	rcall	.+0      	; 0x5fd2 <Factory_Reset+0x6>
    5fd2:	cd b7       	in	r28, 0x3d	; 61
    5fd4:	de b7       	in	r29, 0x3e	; 62
  // Clear all user data
  for (u16 addr = EEPROM_START_ADDRESS; addr <= EEPROM_END_ADDRESS; addr++)
    5fd6:	1a 82       	std	Y+2, r1	; 0x02
    5fd8:	19 82       	std	Y+1, r1	; 0x01
    5fda:	0a c0       	rjmp	.+20     	; 0x5ff0 <Factory_Reset+0x24>
  {
    EEPROM_vWrite(addr, 0xFF);
    5fdc:	89 81       	ldd	r24, Y+1	; 0x01
    5fde:	9a 81       	ldd	r25, Y+2	; 0x02
    5fe0:	6f ef       	ldi	r22, 0xFF	; 255
    5fe2:	0e 94 99 0c 	call	0x1932	; 0x1932 <EEPROM_vWrite>
}

void Factory_Reset(void)
{
  // Clear all user data
  for (u16 addr = EEPROM_START_ADDRESS; addr <= EEPROM_END_ADDRESS; addr++)
    5fe6:	89 81       	ldd	r24, Y+1	; 0x01
    5fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    5fea:	01 96       	adiw	r24, 0x01	; 1
    5fec:	9a 83       	std	Y+2, r25	; 0x02
    5fee:	89 83       	std	Y+1, r24	; 0x01
    5ff0:	89 81       	ldd	r24, Y+1	; 0x01
    5ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ff4:	24 e0       	ldi	r18, 0x04	; 4
    5ff6:	80 30       	cpi	r24, 0x00	; 0
    5ff8:	92 07       	cpc	r25, r18
    5ffa:	80 f3       	brcs	.-32     	; 0x5fdc <Factory_Reset+0x10>
  {
    EEPROM_vWrite(addr, 0xFF);
  }

  // Reset system status
  System_SetStatus(SYSTEM_INITIALIZED);
    5ffc:	81 e0       	ldi	r24, 0x01	; 1
    5ffe:	0e 94 03 2f 	call	0x5e06	; 0x5e06 <System_SetStatus>
  User_Count = 0;
    6002:	10 92 66 05 	sts	0x0566, r1
  Tries = Tries_Max;
    6006:	83 e0       	ldi	r24, 0x03	; 3
    6008:	80 93 55 05 	sts	0x0555, r24

  Log_Event(EVENT_SYSTEM_RESET, 0);
    600c:	87 e0       	ldi	r24, 0x07	; 7
    600e:	60 e0       	ldi	r22, 0x00	; 0
    6010:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <Log_Event>
}
    6014:	0f 90       	pop	r0
    6016:	0f 90       	pop	r0
    6018:	cf 91       	pop	r28
    601a:	df 91       	pop	r29
    601c:	08 95       	ret

0000601e <System_Lock>:

void System_Lock(void)
{
    601e:	df 93       	push	r29
    6020:	cf 93       	push	r28
    6022:	cd b7       	in	r28, 0x3d	; 61
    6024:	de b7       	in	r29, 0x3e	; 62
  System_SetStatus(System_GetStatus() | SYSTEM_LOCKED);
    6026:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <System_GetStatus>
    602a:	82 60       	ori	r24, 0x02	; 2
    602c:	0e 94 03 2f 	call	0x5e06	; 0x5e06 <System_SetStatus>
  Log_Event(EVENT_SYSTEM_LOCK, Current_User);
    6030:	90 91 65 05 	lds	r25, 0x0565
    6034:	8a e0       	ldi	r24, 0x0A	; 10
    6036:	69 2f       	mov	r22, r25
    6038:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <Log_Event>
}
    603c:	cf 91       	pop	r28
    603e:	df 91       	pop	r29
    6040:	08 95       	ret

00006042 <System_Unlock>:

void System_Unlock(void)
{
    6042:	df 93       	push	r29
    6044:	cf 93       	push	r28
    6046:	cd b7       	in	r28, 0x3d	; 61
    6048:	de b7       	in	r29, 0x3e	; 62
  System_SetStatus(System_GetStatus() & ~SYSTEM_LOCKED);
    604a:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <System_GetStatus>
    604e:	8d 7f       	andi	r24, 0xFD	; 253
    6050:	0e 94 03 2f 	call	0x5e06	; 0x5e06 <System_SetStatus>
  Log_Event(EVENT_SYSTEM_UNLOCK, Current_User);
    6054:	90 91 65 05 	lds	r25, 0x0565
    6058:	8b e0       	ldi	r24, 0x0B	; 11
    605a:	69 2f       	mov	r22, r25
    605c:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <Log_Event>
}
    6060:	cf 91       	pop	r28
    6062:	df 91       	pop	r29
    6064:	08 95       	ret

00006066 <Is_System_Locked>:

u8 Is_System_Locked(void)
{
    6066:	df 93       	push	r29
    6068:	cf 93       	push	r28
    606a:	0f 92       	push	r0
    606c:	cd b7       	in	r28, 0x3d	; 61
    606e:	de b7       	in	r29, 0x3e	; 62
  return (System_GetStatus() & SYSTEM_LOCKED) != 0;
    6070:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <System_GetStatus>
    6074:	88 2f       	mov	r24, r24
    6076:	90 e0       	ldi	r25, 0x00	; 0
    6078:	82 70       	andi	r24, 0x02	; 2
    607a:	90 70       	andi	r25, 0x00	; 0
    607c:	19 82       	std	Y+1, r1	; 0x01
    607e:	00 97       	sbiw	r24, 0x00	; 0
    6080:	11 f0       	breq	.+4      	; 0x6086 <Is_System_Locked+0x20>
    6082:	81 e0       	ldi	r24, 0x01	; 1
    6084:	89 83       	std	Y+1, r24	; 0x01
    6086:	89 81       	ldd	r24, Y+1	; 0x01
}
    6088:	0f 90       	pop	r0
    608a:	cf 91       	pop	r28
    608c:	df 91       	pop	r29
    608e:	08 95       	ret

00006090 <Get_User_Type>:

u8 Get_User_Type(u8 user_index)
{
    6090:	df 93       	push	r29
    6092:	cf 93       	push	r28
    6094:	00 d0       	rcall	.+0      	; 0x6096 <Get_User_Type+0x6>
    6096:	cd b7       	in	r28, 0x3d	; 61
    6098:	de b7       	in	r29, 0x3e	; 62
    609a:	89 83       	std	Y+1, r24	; 0x01
  if (user_index == 0)
    609c:	89 81       	ldd	r24, Y+1	; 0x01
    609e:	88 23       	and	r24, r24
    60a0:	19 f4       	brne	.+6      	; 0x60a8 <Get_User_Type+0x18>
    return USER_TYPE_ADMIN;
    60a2:	82 e0       	ldi	r24, 0x02	; 2
    60a4:	8a 83       	std	Y+2, r24	; 0x02
    60a6:	09 c0       	rjmp	.+18     	; 0x60ba <Get_User_Type+0x2a>
  if (user_index >= User_Count)
    60a8:	90 91 66 05 	lds	r25, 0x0566
    60ac:	89 81       	ldd	r24, Y+1	; 0x01
    60ae:	89 17       	cp	r24, r25
    60b0:	10 f0       	brcs	.+4      	; 0x60b6 <Get_User_Type+0x26>
    return USER_TYPE_GUEST;
    60b2:	1a 82       	std	Y+2, r1	; 0x02
    60b4:	02 c0       	rjmp	.+4      	; 0x60ba <Get_User_Type+0x2a>
  return USER_TYPE_NORMAL;
    60b6:	81 e0       	ldi	r24, 0x01	; 1
    60b8:	8a 83       	std	Y+2, r24	; 0x02
    60ba:	8a 81       	ldd	r24, Y+2	; 0x02
}
    60bc:	0f 90       	pop	r0
    60be:	0f 90       	pop	r0
    60c0:	cf 91       	pop	r28
    60c2:	df 91       	pop	r29
    60c4:	08 95       	ret

000060c6 <Set_User_Type>:

u8 Set_User_Type(u8 user_index, u8 type)
{
    60c6:	df 93       	push	r29
    60c8:	cf 93       	push	r28
    60ca:	00 d0       	rcall	.+0      	; 0x60cc <Set_User_Type+0x6>
    60cc:	0f 92       	push	r0
    60ce:	cd b7       	in	r28, 0x3d	; 61
    60d0:	de b7       	in	r29, 0x3e	; 62
    60d2:	89 83       	std	Y+1, r24	; 0x01
    60d4:	6a 83       	std	Y+2, r22	; 0x02
  if (user_index == 0 || user_index >= User_Count)
    60d6:	89 81       	ldd	r24, Y+1	; 0x01
    60d8:	88 23       	and	r24, r24
    60da:	29 f0       	breq	.+10     	; 0x60e6 <Set_User_Type+0x20>
    60dc:	90 91 66 05 	lds	r25, 0x0566
    60e0:	89 81       	ldd	r24, Y+1	; 0x01
    60e2:	89 17       	cp	r24, r25
    60e4:	10 f0       	brcs	.+4      	; 0x60ea <Set_User_Type+0x24>
    return 0;
    60e6:	1b 82       	std	Y+3, r1	; 0x03
    60e8:	07 c0       	rjmp	.+14     	; 0x60f8 <Set_User_Type+0x32>
  if (type > USER_TYPE_SUPER)
    60ea:	8a 81       	ldd	r24, Y+2	; 0x02
    60ec:	84 30       	cpi	r24, 0x04	; 4
    60ee:	10 f0       	brcs	.+4      	; 0x60f4 <Set_User_Type+0x2e>
    return 0;
    60f0:	1b 82       	std	Y+3, r1	; 0x03
    60f2:	02 c0       	rjmp	.+4      	; 0x60f8 <Set_User_Type+0x32>
  // Store user type in EEPROM (implementation needed)
  return 1;
    60f4:	81 e0       	ldi	r24, 0x01	; 1
    60f6:	8b 83       	std	Y+3, r24	; 0x03
    60f8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    60fa:	0f 90       	pop	r0
    60fc:	0f 90       	pop	r0
    60fe:	0f 90       	pop	r0
    6100:	cf 91       	pop	r28
    6102:	df 91       	pop	r29
    6104:	08 95       	ret

00006106 <Sign_Out>:

void Sign_Out(void)
{
    6106:	df 93       	push	r29
    6108:	cf 93       	push	r28
    610a:	cd b7       	in	r28, 0x3d	; 61
    610c:	de b7       	in	r29, 0x3e	; 62
  Current_User = 0xFF;
    610e:	8f ef       	ldi	r24, 0xFF	; 255
    6110:	80 93 65 05 	sts	0x0565, r24
  Is_Admin = 0;
    6114:	10 92 67 05 	sts	0x0567, r1
}
    6118:	cf 91       	pop	r28
    611a:	df 91       	pop	r29
    611c:	08 95       	ret

0000611e <Verify_Password>:

u8 Verify_Password(u8 *password, u8 length)
{
    611e:	df 93       	push	r29
    6120:	cf 93       	push	r28
    6122:	cd b7       	in	r28, 0x3d	; 61
    6124:	de b7       	in	r29, 0x3e	; 62
    6126:	6b 97       	sbiw	r28, 0x1b	; 27
    6128:	0f b6       	in	r0, 0x3f	; 63
    612a:	f8 94       	cli
    612c:	de bf       	out	0x3e, r29	; 62
    612e:	0f be       	out	0x3f, r0	; 63
    6130:	cd bf       	out	0x3d, r28	; 61
    6132:	99 8f       	std	Y+25, r25	; 0x19
    6134:	88 8f       	std	Y+24, r24	; 0x18
    6136:	6a 8f       	std	Y+26, r22	; 0x1a
  if (!Is_Password_Valid(password, length))
    6138:	88 8d       	ldd	r24, Y+24	; 0x18
    613a:	99 8d       	ldd	r25, Y+25	; 0x19
    613c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    613e:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <Is_Password_Valid>
    6142:	88 23       	and	r24, r24
    6144:	11 f4       	brne	.+4      	; 0x614a <Verify_Password+0x2c>
    return 0;
    6146:	1b 8e       	std	Y+27, r1	; 0x1b
    6148:	32 c0       	rjmp	.+100    	; 0x61ae <Verify_Password+0x90>

  u8 stored_pass[21];
  u8 stored_length;
  Read_Password(Current_User, stored_pass, &stored_length);
    614a:	80 91 65 05 	lds	r24, 0x0565
    614e:	9e 01       	movw	r18, r28
    6150:	2e 5f       	subi	r18, 0xFE	; 254
    6152:	3f 4f       	sbci	r19, 0xFF	; 255
    6154:	ae 01       	movw	r20, r28
    6156:	49 5e       	subi	r20, 0xE9	; 233
    6158:	5f 4f       	sbci	r21, 0xFF	; 255
    615a:	b9 01       	movw	r22, r18
    615c:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <Read_Password>

  if (length != stored_length)
    6160:	9f 89       	ldd	r25, Y+23	; 0x17
    6162:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6164:	89 17       	cp	r24, r25
    6166:	11 f0       	breq	.+4      	; 0x616c <Verify_Password+0x4e>
    return 0;
    6168:	1b 8e       	std	Y+27, r1	; 0x1b
    616a:	21 c0       	rjmp	.+66     	; 0x61ae <Verify_Password+0x90>

  for (u8 i = 0; i < length; i++)
    616c:	19 82       	std	Y+1, r1	; 0x01
    616e:	19 c0       	rjmp	.+50     	; 0x61a2 <Verify_Password+0x84>
  {
    if (password[i] != stored_pass[i])
    6170:	89 81       	ldd	r24, Y+1	; 0x01
    6172:	28 2f       	mov	r18, r24
    6174:	30 e0       	ldi	r19, 0x00	; 0
    6176:	88 8d       	ldd	r24, Y+24	; 0x18
    6178:	99 8d       	ldd	r25, Y+25	; 0x19
    617a:	fc 01       	movw	r30, r24
    617c:	e2 0f       	add	r30, r18
    617e:	f3 1f       	adc	r31, r19
    6180:	40 81       	ld	r20, Z
    6182:	89 81       	ldd	r24, Y+1	; 0x01
    6184:	28 2f       	mov	r18, r24
    6186:	30 e0       	ldi	r19, 0x00	; 0
    6188:	ce 01       	movw	r24, r28
    618a:	02 96       	adiw	r24, 0x02	; 2
    618c:	fc 01       	movw	r30, r24
    618e:	e2 0f       	add	r30, r18
    6190:	f3 1f       	adc	r31, r19
    6192:	80 81       	ld	r24, Z
    6194:	48 17       	cp	r20, r24
    6196:	11 f0       	breq	.+4      	; 0x619c <Verify_Password+0x7e>
      return 0;
    6198:	1b 8e       	std	Y+27, r1	; 0x1b
    619a:	09 c0       	rjmp	.+18     	; 0x61ae <Verify_Password+0x90>
  Read_Password(Current_User, stored_pass, &stored_length);

  if (length != stored_length)
    return 0;

  for (u8 i = 0; i < length; i++)
    619c:	89 81       	ldd	r24, Y+1	; 0x01
    619e:	8f 5f       	subi	r24, 0xFF	; 255
    61a0:	89 83       	std	Y+1, r24	; 0x01
    61a2:	99 81       	ldd	r25, Y+1	; 0x01
    61a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    61a6:	98 17       	cp	r25, r24
    61a8:	18 f3       	brcs	.-58     	; 0x6170 <Verify_Password+0x52>
  {
    if (password[i] != stored_pass[i])
      return 0;
  }

  return 1;
    61aa:	81 e0       	ldi	r24, 0x01	; 1
    61ac:	8b 8f       	std	Y+27, r24	; 0x1b
    61ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
}
    61b0:	6b 96       	adiw	r28, 0x1b	; 27
    61b2:	0f b6       	in	r0, 0x3f	; 63
    61b4:	f8 94       	cli
    61b6:	de bf       	out	0x3e, r29	; 62
    61b8:	0f be       	out	0x3f, r0	; 63
    61ba:	cd bf       	out	0x3d, r28	; 61
    61bc:	cf 91       	pop	r28
    61be:	df 91       	pop	r29
    61c0:	08 95       	ret

000061c2 <Super_Admin_Menu>:

void Super_Admin_Menu(void)
{
    61c2:	df 93       	push	r29
    61c4:	cf 93       	push	r28
    61c6:	cd b7       	in	r28, 0x3d	; 61
    61c8:	de b7       	in	r29, 0x3e	; 62
    61ca:	61 97       	sbiw	r28, 0x11	; 17
    61cc:	0f b6       	in	r0, 0x3f	; 63
    61ce:	f8 94       	cli
    61d0:	de bf       	out	0x3e, r29	; 62
    61d2:	0f be       	out	0x3f, r0	; 63
    61d4:	cd bf       	out	0x3d, r28	; 61
  while (1)
  {
    CLCD_vClearScreen();
    61d6:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
    CLCD_vSendString((u8 *)"1:Backup");
    61da:	89 e5       	ldi	r24, 0x59	; 89
    61dc:	92 e0       	ldi	r25, 0x02	; 2
    61de:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    CLCD_vSetPosition(2, 1);
    61e2:	82 e0       	ldi	r24, 0x02	; 2
    61e4:	61 e0       	ldi	r22, 0x01	; 1
    61e6:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
    CLCD_vSendString((u8 *)"2:Restore");
    61ea:	82 e6       	ldi	r24, 0x62	; 98
    61ec:	92 e0       	ldi	r25, 0x02	; 2
    61ee:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    CLCD_vSetPosition(3, 1);
    61f2:	83 e0       	ldi	r24, 0x03	; 3
    61f4:	61 e0       	ldi	r22, 0x01	; 1
    61f6:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
    CLCD_vSendString((u8 *)"3:Factory Reset");
    61fa:	8c e6       	ldi	r24, 0x6C	; 108
    61fc:	92 e0       	ldi	r25, 0x02	; 2
    61fe:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    CLCD_vSetPosition(4, 1);
    6202:	84 e0       	ldi	r24, 0x04	; 4
    6204:	61 e0       	ldi	r22, 0x01	; 1
    6206:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
    CLCD_vSendString((u8 *)"4:Back");
    620a:	8c e7       	ldi	r24, 0x7C	; 124
    620c:	92 e0       	ldi	r25, 0x02	; 2
    620e:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>

    u8 choice;
    while (1)
    {
      Error_State = USART_u8ReceiveData(&choice);
    6212:	ce 01       	movw	r24, r28
    6214:	0f 96       	adiw	r24, 0x0f	; 15
    6216:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    621a:	80 93 93 05 	sts	0x0593, r24
      if (Error_State == OK)
    621e:	80 91 93 05 	lds	r24, 0x0593
    6222:	88 23       	and	r24, r24
    6224:	b1 f7       	brne	.-20     	; 0x6212 <Super_Admin_Menu+0x50>
      {
        if (choice >= '1' && choice <= '4')
    6226:	8f 85       	ldd	r24, Y+15	; 0x0f
    6228:	81 33       	cpi	r24, 0x31	; 49
    622a:	98 f3       	brcs	.-26     	; 0x6212 <Super_Admin_Menu+0x50>
    622c:	8f 85       	ldd	r24, Y+15	; 0x0f
    622e:	85 33       	cpi	r24, 0x35	; 53
    6230:	80 f7       	brcc	.-32     	; 0x6212 <Super_Admin_Menu+0x50>
          break;
      }
    }

    switch (choice)
    6232:	8f 85       	ldd	r24, Y+15	; 0x0f
    6234:	28 2f       	mov	r18, r24
    6236:	30 e0       	ldi	r19, 0x00	; 0
    6238:	39 8b       	std	Y+17, r19	; 0x11
    623a:	28 8b       	std	Y+16, r18	; 0x10
    623c:	88 89       	ldd	r24, Y+16	; 0x10
    623e:	99 89       	ldd	r25, Y+17	; 0x11
    6240:	82 33       	cpi	r24, 0x32	; 50
    6242:	91 05       	cpc	r25, r1
    6244:	d9 f0       	breq	.+54     	; 0x627c <Super_Admin_Menu+0xba>
    6246:	28 89       	ldd	r18, Y+16	; 0x10
    6248:	39 89       	ldd	r19, Y+17	; 0x11
    624a:	23 33       	cpi	r18, 0x33	; 51
    624c:	31 05       	cpc	r19, r1
    624e:	34 f4       	brge	.+12     	; 0x625c <Super_Admin_Menu+0x9a>
    6250:	88 89       	ldd	r24, Y+16	; 0x10
    6252:	99 89       	ldd	r25, Y+17	; 0x11
    6254:	81 33       	cpi	r24, 0x31	; 49
    6256:	91 05       	cpc	r25, r1
    6258:	71 f0       	breq	.+28     	; 0x6276 <Super_Admin_Menu+0xb4>
    625a:	bd cf       	rjmp	.-134    	; 0x61d6 <Super_Admin_Menu+0x14>
    625c:	28 89       	ldd	r18, Y+16	; 0x10
    625e:	39 89       	ldd	r19, Y+17	; 0x11
    6260:	23 33       	cpi	r18, 0x33	; 51
    6262:	31 05       	cpc	r19, r1
    6264:	09 f4       	brne	.+2      	; 0x6268 <Super_Admin_Menu+0xa6>
    6266:	88 c0       	rjmp	.+272    	; 0x6378 <Super_Admin_Menu+0x1b6>
    6268:	88 89       	ldd	r24, Y+16	; 0x10
    626a:	99 89       	ldd	r25, Y+17	; 0x11
    626c:	84 33       	cpi	r24, 0x34	; 52
    626e:	91 05       	cpc	r25, r1
    6270:	09 f4       	brne	.+2      	; 0x6274 <Super_Admin_Menu+0xb2>
    6272:	a5 c0       	rjmp	.+330    	; 0x63be <Super_Admin_Menu+0x1fc>
    6274:	b0 cf       	rjmp	.-160    	; 0x61d6 <Super_Admin_Menu+0x14>
    {
    case '1':
      Create_Backup();
    6276:	0e 94 7b 2f 	call	0x5ef6	; 0x5ef6 <Create_Backup>
    627a:	ad cf       	rjmp	.-166    	; 0x61d6 <Super_Admin_Menu+0x14>
      break;
    case '2':
      if (!Restore_Backup())
    627c:	0e 94 ac 2f 	call	0x5f58	; 0x5f58 <Restore_Backup>
    6280:	88 23       	and	r24, r24
    6282:	09 f0       	breq	.+2      	; 0x6286 <Super_Admin_Menu+0xc4>
    6284:	a8 cf       	rjmp	.-176    	; 0x61d6 <Super_Admin_Menu+0x14>
      {
        CLCD_vClearScreen();
    6286:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
        CLCD_vSendString((u8 *)"No Valid Backup!");
    628a:	83 e8       	ldi	r24, 0x83	; 131
    628c:	92 e0       	ldi	r25, 0x02	; 2
    628e:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    6292:	80 e0       	ldi	r24, 0x00	; 0
    6294:	90 e0       	ldi	r25, 0x00	; 0
    6296:	aa ef       	ldi	r26, 0xFA	; 250
    6298:	b4 e4       	ldi	r27, 0x44	; 68
    629a:	8b 87       	std	Y+11, r24	; 0x0b
    629c:	9c 87       	std	Y+12, r25	; 0x0c
    629e:	ad 87       	std	Y+13, r26	; 0x0d
    62a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    62a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    62a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    62a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    62aa:	20 e0       	ldi	r18, 0x00	; 0
    62ac:	30 e0       	ldi	r19, 0x00	; 0
    62ae:	4a ef       	ldi	r20, 0xFA	; 250
    62b0:	54 e4       	ldi	r21, 0x44	; 68
    62b2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    62b6:	dc 01       	movw	r26, r24
    62b8:	cb 01       	movw	r24, r22
    62ba:	8f 83       	std	Y+7, r24	; 0x07
    62bc:	98 87       	std	Y+8, r25	; 0x08
    62be:	a9 87       	std	Y+9, r26	; 0x09
    62c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    62c2:	6f 81       	ldd	r22, Y+7	; 0x07
    62c4:	78 85       	ldd	r23, Y+8	; 0x08
    62c6:	89 85       	ldd	r24, Y+9	; 0x09
    62c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    62ca:	20 e0       	ldi	r18, 0x00	; 0
    62cc:	30 e0       	ldi	r19, 0x00	; 0
    62ce:	40 e8       	ldi	r20, 0x80	; 128
    62d0:	5f e3       	ldi	r21, 0x3F	; 63
    62d2:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    62d6:	88 23       	and	r24, r24
    62d8:	2c f4       	brge	.+10     	; 0x62e4 <Super_Admin_Menu+0x122>
		__ticks = 1;
    62da:	81 e0       	ldi	r24, 0x01	; 1
    62dc:	90 e0       	ldi	r25, 0x00	; 0
    62de:	9e 83       	std	Y+6, r25	; 0x06
    62e0:	8d 83       	std	Y+5, r24	; 0x05
    62e2:	3f c0       	rjmp	.+126    	; 0x6362 <Super_Admin_Menu+0x1a0>
	else if (__tmp > 65535)
    62e4:	6f 81       	ldd	r22, Y+7	; 0x07
    62e6:	78 85       	ldd	r23, Y+8	; 0x08
    62e8:	89 85       	ldd	r24, Y+9	; 0x09
    62ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    62ec:	20 e0       	ldi	r18, 0x00	; 0
    62ee:	3f ef       	ldi	r19, 0xFF	; 255
    62f0:	4f e7       	ldi	r20, 0x7F	; 127
    62f2:	57 e4       	ldi	r21, 0x47	; 71
    62f4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    62f8:	18 16       	cp	r1, r24
    62fa:	4c f5       	brge	.+82     	; 0x634e <Super_Admin_Menu+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    62fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    6300:	8d 85       	ldd	r24, Y+13	; 0x0d
    6302:	9e 85       	ldd	r25, Y+14	; 0x0e
    6304:	20 e0       	ldi	r18, 0x00	; 0
    6306:	30 e0       	ldi	r19, 0x00	; 0
    6308:	40 e2       	ldi	r20, 0x20	; 32
    630a:	51 e4       	ldi	r21, 0x41	; 65
    630c:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6310:	dc 01       	movw	r26, r24
    6312:	cb 01       	movw	r24, r22
    6314:	bc 01       	movw	r22, r24
    6316:	cd 01       	movw	r24, r26
    6318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    631c:	dc 01       	movw	r26, r24
    631e:	cb 01       	movw	r24, r22
    6320:	9e 83       	std	Y+6, r25	; 0x06
    6322:	8d 83       	std	Y+5, r24	; 0x05
    6324:	0f c0       	rjmp	.+30     	; 0x6344 <Super_Admin_Menu+0x182>
    6326:	88 ec       	ldi	r24, 0xC8	; 200
    6328:	90 e0       	ldi	r25, 0x00	; 0
    632a:	9c 83       	std	Y+4, r25	; 0x04
    632c:	8b 83       	std	Y+3, r24	; 0x03
    632e:	8b 81       	ldd	r24, Y+3	; 0x03
    6330:	9c 81       	ldd	r25, Y+4	; 0x04
    6332:	01 97       	sbiw	r24, 0x01	; 1
    6334:	f1 f7       	brne	.-4      	; 0x6332 <Super_Admin_Menu+0x170>
    6336:	9c 83       	std	Y+4, r25	; 0x04
    6338:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    633a:	8d 81       	ldd	r24, Y+5	; 0x05
    633c:	9e 81       	ldd	r25, Y+6	; 0x06
    633e:	01 97       	sbiw	r24, 0x01	; 1
    6340:	9e 83       	std	Y+6, r25	; 0x06
    6342:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6344:	8d 81       	ldd	r24, Y+5	; 0x05
    6346:	9e 81       	ldd	r25, Y+6	; 0x06
    6348:	00 97       	sbiw	r24, 0x00	; 0
    634a:	69 f7       	brne	.-38     	; 0x6326 <Super_Admin_Menu+0x164>
    634c:	44 cf       	rjmp	.-376    	; 0x61d6 <Super_Admin_Menu+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    634e:	6f 81       	ldd	r22, Y+7	; 0x07
    6350:	78 85       	ldd	r23, Y+8	; 0x08
    6352:	89 85       	ldd	r24, Y+9	; 0x09
    6354:	9a 85       	ldd	r25, Y+10	; 0x0a
    6356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    635a:	dc 01       	movw	r26, r24
    635c:	cb 01       	movw	r24, r22
    635e:	9e 83       	std	Y+6, r25	; 0x06
    6360:	8d 83       	std	Y+5, r24	; 0x05
    6362:	8d 81       	ldd	r24, Y+5	; 0x05
    6364:	9e 81       	ldd	r25, Y+6	; 0x06
    6366:	9a 83       	std	Y+2, r25	; 0x02
    6368:	89 83       	std	Y+1, r24	; 0x01
    636a:	89 81       	ldd	r24, Y+1	; 0x01
    636c:	9a 81       	ldd	r25, Y+2	; 0x02
    636e:	01 97       	sbiw	r24, 0x01	; 1
    6370:	f1 f7       	brne	.-4      	; 0x636e <Super_Admin_Menu+0x1ac>
    6372:	9a 83       	std	Y+2, r25	; 0x02
    6374:	89 83       	std	Y+1, r24	; 0x01
    6376:	2f cf       	rjmp	.-418    	; 0x61d6 <Super_Admin_Menu+0x14>
        _delay_ms(2000);
      }
      break;
    case '3':
      CLCD_vClearScreen();
    6378:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
      CLCD_vSendString((u8 *)"Are you sure?");
    637c:	84 e9       	ldi	r24, 0x94	; 148
    637e:	92 e0       	ldi	r25, 0x02	; 2
    6380:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
      CLCD_vSetPosition(2, 1);
    6384:	82 e0       	ldi	r24, 0x02	; 2
    6386:	61 e0       	ldi	r22, 0x01	; 1
    6388:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
      CLCD_vSendString((u8 *)"1:Yes 2:No");
    638c:	82 ea       	ldi	r24, 0xA2	; 162
    638e:	92 e0       	ldi	r25, 0x02	; 2
    6390:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>

      while (1)
      {
        Error_State = USART_u8ReceiveData(&choice);
    6394:	ce 01       	movw	r24, r28
    6396:	0f 96       	adiw	r24, 0x0f	; 15
    6398:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    639c:	80 93 93 05 	sts	0x0593, r24
        if (Error_State == OK)
    63a0:	80 91 93 05 	lds	r24, 0x0593
    63a4:	88 23       	and	r24, r24
    63a6:	b1 f7       	brne	.-20     	; 0x6394 <Super_Admin_Menu+0x1d2>
        {
          if (choice == '1')
    63a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    63aa:	81 33       	cpi	r24, 0x31	; 49
    63ac:	19 f4       	brne	.+6      	; 0x63b4 <Super_Admin_Menu+0x1f2>
          {
            Factory_Reset();
    63ae:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <Factory_Reset>
    63b2:	05 c0       	rjmp	.+10     	; 0x63be <Super_Admin_Menu+0x1fc>
            return;
          }
          else if (choice == '2')
    63b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    63b6:	82 33       	cpi	r24, 0x32	; 50
    63b8:	09 f4       	brne	.+2      	; 0x63bc <Super_Admin_Menu+0x1fa>
    63ba:	0d cf       	rjmp	.-486    	; 0x61d6 <Super_Admin_Menu+0x14>
    63bc:	eb cf       	rjmp	.-42     	; 0x6394 <Super_Admin_Menu+0x1d2>
      break;
    case '4':
      return;
    }
  }
}
    63be:	61 96       	adiw	r28, 0x11	; 17
    63c0:	0f b6       	in	r0, 0x3f	; 63
    63c2:	f8 94       	cli
    63c4:	de bf       	out	0x3e, r29	; 62
    63c6:	0f be       	out	0x3f, r0	; 63
    63c8:	cd bf       	out	0x3d, r28	; 61
    63ca:	cf 91       	pop	r28
    63cc:	df 91       	pop	r29
    63ce:	08 95       	ret

000063d0 <Maintenance_Menu>:

void Maintenance_Menu(void)
{
    63d0:	df 93       	push	r29
    63d2:	cf 93       	push	r28
    63d4:	cd b7       	in	r28, 0x3d	; 61
    63d6:	de b7       	in	r29, 0x3e	; 62
    63d8:	6f 97       	sbiw	r28, 0x1f	; 31
    63da:	0f b6       	in	r0, 0x3f	; 63
    63dc:	f8 94       	cli
    63de:	de bf       	out	0x3e, r29	; 62
    63e0:	0f be       	out	0x3f, r0	; 63
    63e2:	cd bf       	out	0x3d, r28	; 61
  if (!Is_Admin)
    63e4:	80 91 67 05 	lds	r24, 0x0567
    63e8:	88 23       	and	r24, r24
    63ea:	09 f4       	brne	.+2      	; 0x63ee <Maintenance_Menu+0x1e>
    63ec:	84 c1       	rjmp	.+776    	; 0x66f6 <Maintenance_Menu+0x326>
    return;

  while (1)
  {
    CLCD_vClearScreen();
    63ee:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
    CLCD_vSendString((u8 *)"1:System Status");
    63f2:	8d ea       	ldi	r24, 0xAD	; 173
    63f4:	92 e0       	ldi	r25, 0x02	; 2
    63f6:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    CLCD_vSetPosition(2, 1);
    63fa:	82 e0       	ldi	r24, 0x02	; 2
    63fc:	61 e0       	ldi	r22, 0x01	; 1
    63fe:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
    CLCD_vSendString((u8 *)"2:Security Level");
    6402:	8d eb       	ldi	r24, 0xBD	; 189
    6404:	92 e0       	ldi	r25, 0x02	; 2
    6406:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    CLCD_vSetPosition(3, 1);
    640a:	83 e0       	ldi	r24, 0x03	; 3
    640c:	61 e0       	ldi	r22, 0x01	; 1
    640e:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
    CLCD_vSendString((u8 *)"3:Verify System");
    6412:	8e ec       	ldi	r24, 0xCE	; 206
    6414:	92 e0       	ldi	r25, 0x02	; 2
    6416:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    CLCD_vSetPosition(4, 1);
    641a:	84 e0       	ldi	r24, 0x04	; 4
    641c:	61 e0       	ldi	r22, 0x01	; 1
    641e:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
    CLCD_vSendString((u8 *)"4:Back");
    6422:	8c e7       	ldi	r24, 0x7C	; 124
    6424:	92 e0       	ldi	r25, 0x02	; 2
    6426:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>

    u8 choice;
    while (1)
    {
      Error_State = USART_u8ReceiveData(&choice);
    642a:	ce 01       	movw	r24, r28
    642c:	4d 96       	adiw	r24, 0x1d	; 29
    642e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    6432:	80 93 93 05 	sts	0x0593, r24
      if (Error_State == OK)
    6436:	80 91 93 05 	lds	r24, 0x0593
    643a:	88 23       	and	r24, r24
    643c:	b1 f7       	brne	.-20     	; 0x642a <Maintenance_Menu+0x5a>
      {
        if (choice >= '1' && choice <= '4')
    643e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6440:	81 33       	cpi	r24, 0x31	; 49
    6442:	98 f3       	brcs	.-26     	; 0x642a <Maintenance_Menu+0x5a>
    6444:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6446:	85 33       	cpi	r24, 0x35	; 53
    6448:	80 f7       	brcc	.-32     	; 0x642a <Maintenance_Menu+0x5a>
          break;
      }
    }

    switch (choice)
    644a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    644c:	28 2f       	mov	r18, r24
    644e:	30 e0       	ldi	r19, 0x00	; 0
    6450:	3f 8f       	std	Y+31, r19	; 0x1f
    6452:	2e 8f       	std	Y+30, r18	; 0x1e
    6454:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6456:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6458:	82 33       	cpi	r24, 0x32	; 50
    645a:	91 05       	cpc	r25, r1
    645c:	09 f4       	brne	.+2      	; 0x6460 <Maintenance_Menu+0x90>
    645e:	a2 c0       	rjmp	.+324    	; 0x65a4 <Maintenance_Menu+0x1d4>
    6460:	2e 8d       	ldd	r18, Y+30	; 0x1e
    6462:	3f 8d       	ldd	r19, Y+31	; 0x1f
    6464:	23 33       	cpi	r18, 0x33	; 51
    6466:	31 05       	cpc	r19, r1
    6468:	34 f4       	brge	.+12     	; 0x6476 <Maintenance_Menu+0xa6>
    646a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    646c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    646e:	81 33       	cpi	r24, 0x31	; 49
    6470:	91 05       	cpc	r25, r1
    6472:	71 f0       	breq	.+28     	; 0x6490 <Maintenance_Menu+0xc0>
    6474:	bc cf       	rjmp	.-136    	; 0x63ee <Maintenance_Menu+0x1e>
    6476:	2e 8d       	ldd	r18, Y+30	; 0x1e
    6478:	3f 8d       	ldd	r19, Y+31	; 0x1f
    647a:	23 33       	cpi	r18, 0x33	; 51
    647c:	31 05       	cpc	r19, r1
    647e:	09 f4       	brne	.+2      	; 0x6482 <Maintenance_Menu+0xb2>
    6480:	b4 c0       	rjmp	.+360    	; 0x65ea <Maintenance_Menu+0x21a>
    6482:	8e 8d       	ldd	r24, Y+30	; 0x1e
    6484:	9f 8d       	ldd	r25, Y+31	; 0x1f
    6486:	84 33       	cpi	r24, 0x34	; 52
    6488:	91 05       	cpc	r25, r1
    648a:	09 f4       	brne	.+2      	; 0x648e <Maintenance_Menu+0xbe>
    648c:	34 c1       	rjmp	.+616    	; 0x66f6 <Maintenance_Menu+0x326>
    648e:	af cf       	rjmp	.-162    	; 0x63ee <Maintenance_Menu+0x1e>
    {
    case '1':
      CLCD_vClearScreen();
    6490:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
      CLCD_vSendString((u8 *)"Status: ");
    6494:	8e ed       	ldi	r24, 0xDE	; 222
    6496:	92 e0       	ldi	r25, 0x02	; 2
    6498:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
      if (System_GetStatus() & SYSTEM_LOCKED)
    649c:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <System_GetStatus>
    64a0:	88 2f       	mov	r24, r24
    64a2:	90 e0       	ldi	r25, 0x00	; 0
    64a4:	82 70       	andi	r24, 0x02	; 2
    64a6:	90 70       	andi	r25, 0x00	; 0
    64a8:	00 97       	sbiw	r24, 0x00	; 0
    64aa:	29 f0       	breq	.+10     	; 0x64b6 <Maintenance_Menu+0xe6>
        CLCD_vSendString((u8 *)"Locked");
    64ac:	87 ee       	ldi	r24, 0xE7	; 231
    64ae:	92 e0       	ldi	r25, 0x02	; 2
    64b0:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    64b4:	04 c0       	rjmp	.+8      	; 0x64be <Maintenance_Menu+0xee>
      else
        CLCD_vSendString((u8 *)"Unlocked");
    64b6:	8e ee       	ldi	r24, 0xEE	; 238
    64b8:	92 e0       	ldi	r25, 0x02	; 2
    64ba:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    64be:	80 e0       	ldi	r24, 0x00	; 0
    64c0:	90 e0       	ldi	r25, 0x00	; 0
    64c2:	aa ef       	ldi	r26, 0xFA	; 250
    64c4:	b4 e4       	ldi	r27, 0x44	; 68
    64c6:	89 8f       	std	Y+25, r24	; 0x19
    64c8:	9a 8f       	std	Y+26, r25	; 0x1a
    64ca:	ab 8f       	std	Y+27, r26	; 0x1b
    64cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64ce:	69 8d       	ldd	r22, Y+25	; 0x19
    64d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    64d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    64d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    64d6:	20 e0       	ldi	r18, 0x00	; 0
    64d8:	30 e0       	ldi	r19, 0x00	; 0
    64da:	4a ef       	ldi	r20, 0xFA	; 250
    64dc:	54 e4       	ldi	r21, 0x44	; 68
    64de:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    64e2:	dc 01       	movw	r26, r24
    64e4:	cb 01       	movw	r24, r22
    64e6:	8d 8b       	std	Y+21, r24	; 0x15
    64e8:	9e 8b       	std	Y+22, r25	; 0x16
    64ea:	af 8b       	std	Y+23, r26	; 0x17
    64ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    64ee:	6d 89       	ldd	r22, Y+21	; 0x15
    64f0:	7e 89       	ldd	r23, Y+22	; 0x16
    64f2:	8f 89       	ldd	r24, Y+23	; 0x17
    64f4:	98 8d       	ldd	r25, Y+24	; 0x18
    64f6:	20 e0       	ldi	r18, 0x00	; 0
    64f8:	30 e0       	ldi	r19, 0x00	; 0
    64fa:	40 e8       	ldi	r20, 0x80	; 128
    64fc:	5f e3       	ldi	r21, 0x3F	; 63
    64fe:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6502:	88 23       	and	r24, r24
    6504:	2c f4       	brge	.+10     	; 0x6510 <Maintenance_Menu+0x140>
		__ticks = 1;
    6506:	81 e0       	ldi	r24, 0x01	; 1
    6508:	90 e0       	ldi	r25, 0x00	; 0
    650a:	9c 8b       	std	Y+20, r25	; 0x14
    650c:	8b 8b       	std	Y+19, r24	; 0x13
    650e:	3f c0       	rjmp	.+126    	; 0x658e <Maintenance_Menu+0x1be>
	else if (__tmp > 65535)
    6510:	6d 89       	ldd	r22, Y+21	; 0x15
    6512:	7e 89       	ldd	r23, Y+22	; 0x16
    6514:	8f 89       	ldd	r24, Y+23	; 0x17
    6516:	98 8d       	ldd	r25, Y+24	; 0x18
    6518:	20 e0       	ldi	r18, 0x00	; 0
    651a:	3f ef       	ldi	r19, 0xFF	; 255
    651c:	4f e7       	ldi	r20, 0x7F	; 127
    651e:	57 e4       	ldi	r21, 0x47	; 71
    6520:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6524:	18 16       	cp	r1, r24
    6526:	4c f5       	brge	.+82     	; 0x657a <Maintenance_Menu+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6528:	69 8d       	ldd	r22, Y+25	; 0x19
    652a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    652c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    652e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6530:	20 e0       	ldi	r18, 0x00	; 0
    6532:	30 e0       	ldi	r19, 0x00	; 0
    6534:	40 e2       	ldi	r20, 0x20	; 32
    6536:	51 e4       	ldi	r21, 0x41	; 65
    6538:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    653c:	dc 01       	movw	r26, r24
    653e:	cb 01       	movw	r24, r22
    6540:	bc 01       	movw	r22, r24
    6542:	cd 01       	movw	r24, r26
    6544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6548:	dc 01       	movw	r26, r24
    654a:	cb 01       	movw	r24, r22
    654c:	9c 8b       	std	Y+20, r25	; 0x14
    654e:	8b 8b       	std	Y+19, r24	; 0x13
    6550:	0f c0       	rjmp	.+30     	; 0x6570 <Maintenance_Menu+0x1a0>
    6552:	88 ec       	ldi	r24, 0xC8	; 200
    6554:	90 e0       	ldi	r25, 0x00	; 0
    6556:	9a 8b       	std	Y+18, r25	; 0x12
    6558:	89 8b       	std	Y+17, r24	; 0x11
    655a:	89 89       	ldd	r24, Y+17	; 0x11
    655c:	9a 89       	ldd	r25, Y+18	; 0x12
    655e:	01 97       	sbiw	r24, 0x01	; 1
    6560:	f1 f7       	brne	.-4      	; 0x655e <Maintenance_Menu+0x18e>
    6562:	9a 8b       	std	Y+18, r25	; 0x12
    6564:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6566:	8b 89       	ldd	r24, Y+19	; 0x13
    6568:	9c 89       	ldd	r25, Y+20	; 0x14
    656a:	01 97       	sbiw	r24, 0x01	; 1
    656c:	9c 8b       	std	Y+20, r25	; 0x14
    656e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6570:	8b 89       	ldd	r24, Y+19	; 0x13
    6572:	9c 89       	ldd	r25, Y+20	; 0x14
    6574:	00 97       	sbiw	r24, 0x00	; 0
    6576:	69 f7       	brne	.-38     	; 0x6552 <Maintenance_Menu+0x182>
    6578:	3a cf       	rjmp	.-396    	; 0x63ee <Maintenance_Menu+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    657a:	6d 89       	ldd	r22, Y+21	; 0x15
    657c:	7e 89       	ldd	r23, Y+22	; 0x16
    657e:	8f 89       	ldd	r24, Y+23	; 0x17
    6580:	98 8d       	ldd	r25, Y+24	; 0x18
    6582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6586:	dc 01       	movw	r26, r24
    6588:	cb 01       	movw	r24, r22
    658a:	9c 8b       	std	Y+20, r25	; 0x14
    658c:	8b 8b       	std	Y+19, r24	; 0x13
    658e:	8b 89       	ldd	r24, Y+19	; 0x13
    6590:	9c 89       	ldd	r25, Y+20	; 0x14
    6592:	98 8b       	std	Y+16, r25	; 0x10
    6594:	8f 87       	std	Y+15, r24	; 0x0f
    6596:	8f 85       	ldd	r24, Y+15	; 0x0f
    6598:	98 89       	ldd	r25, Y+16	; 0x10
    659a:	01 97       	sbiw	r24, 0x01	; 1
    659c:	f1 f7       	brne	.-4      	; 0x659a <Maintenance_Menu+0x1ca>
    659e:	98 8b       	std	Y+16, r25	; 0x10
    65a0:	8f 87       	std	Y+15, r24	; 0x0f
    65a2:	25 cf       	rjmp	.-438    	; 0x63ee <Maintenance_Menu+0x1e>
      _delay_ms(2000);
      break;

    case '2':
      CLCD_vClearScreen();
    65a4:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
      CLCD_vSendString((u8 *)"Security Level:");
    65a8:	87 ef       	ldi	r24, 0xF7	; 247
    65aa:	92 e0       	ldi	r25, 0x02	; 2
    65ac:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
      CLCD_vSetPosition(2, 1);
    65b0:	82 e0       	ldi	r24, 0x02	; 2
    65b2:	61 e0       	ldi	r22, 0x01	; 1
    65b4:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
      CLCD_vSendString((u8 *)"1:Low 2:Med 3:High");
    65b8:	87 e0       	ldi	r24, 0x07	; 7
    65ba:	93 e0       	ldi	r25, 0x03	; 3
    65bc:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>

      while (1)
      {
        Error_State = USART_u8ReceiveData(&choice);
    65c0:	ce 01       	movw	r24, r28
    65c2:	4d 96       	adiw	r24, 0x1d	; 29
    65c4:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    65c8:	80 93 93 05 	sts	0x0593, r24
        if (Error_State == OK)
    65cc:	80 91 93 05 	lds	r24, 0x0593
    65d0:	88 23       	and	r24, r24
    65d2:	b1 f7       	brne	.-20     	; 0x65c0 <Maintenance_Menu+0x1f0>
        {
          if (choice >= '1' && choice <= '3')
    65d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    65d6:	81 33       	cpi	r24, 0x31	; 49
    65d8:	98 f3       	brcs	.-26     	; 0x65c0 <Maintenance_Menu+0x1f0>
    65da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    65dc:	84 33       	cpi	r24, 0x34	; 52
    65de:	80 f7       	brcc	.-32     	; 0x65c0 <Maintenance_Menu+0x1f0>
          {
            System_SetSecurityLevel(choice - '1');
    65e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    65e2:	81 53       	subi	r24, 0x31	; 49
    65e4:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <System_SetSecurityLevel>
    65e8:	02 cf       	rjmp	.-508    	; 0x63ee <Maintenance_Menu+0x1e>
        }
      }
      break;

    case '3':
      CLCD_vClearScreen();
    65ea:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
      CLCD_vSendString((u8 *)"Verifying...");
    65ee:	8a e1       	ldi	r24, 0x1A	; 26
    65f0:	93 e0       	ldi	r25, 0x03	; 3
    65f2:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
      if (Verify_System_Integrity())
    65f6:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <Verify_System_Integrity>
    65fa:	88 23       	and	r24, r24
    65fc:	29 f0       	breq	.+10     	; 0x6608 <Maintenance_Menu+0x238>
        CLCD_vSendString((u8 *)"OK");
    65fe:	87 e2       	ldi	r24, 0x27	; 39
    6600:	93 e0       	ldi	r25, 0x03	; 3
    6602:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    6606:	04 c0       	rjmp	.+8      	; 0x6610 <Maintenance_Menu+0x240>
      else
        CLCD_vSendString((u8 *)"FAIL");
    6608:	8a e2       	ldi	r24, 0x2A	; 42
    660a:	93 e0       	ldi	r25, 0x03	; 3
    660c:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    6610:	80 e0       	ldi	r24, 0x00	; 0
    6612:	90 e0       	ldi	r25, 0x00	; 0
    6614:	aa ef       	ldi	r26, 0xFA	; 250
    6616:	b4 e4       	ldi	r27, 0x44	; 68
    6618:	8b 87       	std	Y+11, r24	; 0x0b
    661a:	9c 87       	std	Y+12, r25	; 0x0c
    661c:	ad 87       	std	Y+13, r26	; 0x0d
    661e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6620:	6b 85       	ldd	r22, Y+11	; 0x0b
    6622:	7c 85       	ldd	r23, Y+12	; 0x0c
    6624:	8d 85       	ldd	r24, Y+13	; 0x0d
    6626:	9e 85       	ldd	r25, Y+14	; 0x0e
    6628:	20 e0       	ldi	r18, 0x00	; 0
    662a:	30 e0       	ldi	r19, 0x00	; 0
    662c:	4a ef       	ldi	r20, 0xFA	; 250
    662e:	54 e4       	ldi	r21, 0x44	; 68
    6630:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6634:	dc 01       	movw	r26, r24
    6636:	cb 01       	movw	r24, r22
    6638:	8f 83       	std	Y+7, r24	; 0x07
    663a:	98 87       	std	Y+8, r25	; 0x08
    663c:	a9 87       	std	Y+9, r26	; 0x09
    663e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6640:	6f 81       	ldd	r22, Y+7	; 0x07
    6642:	78 85       	ldd	r23, Y+8	; 0x08
    6644:	89 85       	ldd	r24, Y+9	; 0x09
    6646:	9a 85       	ldd	r25, Y+10	; 0x0a
    6648:	20 e0       	ldi	r18, 0x00	; 0
    664a:	30 e0       	ldi	r19, 0x00	; 0
    664c:	40 e8       	ldi	r20, 0x80	; 128
    664e:	5f e3       	ldi	r21, 0x3F	; 63
    6650:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6654:	88 23       	and	r24, r24
    6656:	2c f4       	brge	.+10     	; 0x6662 <Maintenance_Menu+0x292>
		__ticks = 1;
    6658:	81 e0       	ldi	r24, 0x01	; 1
    665a:	90 e0       	ldi	r25, 0x00	; 0
    665c:	9e 83       	std	Y+6, r25	; 0x06
    665e:	8d 83       	std	Y+5, r24	; 0x05
    6660:	3f c0       	rjmp	.+126    	; 0x66e0 <Maintenance_Menu+0x310>
	else if (__tmp > 65535)
    6662:	6f 81       	ldd	r22, Y+7	; 0x07
    6664:	78 85       	ldd	r23, Y+8	; 0x08
    6666:	89 85       	ldd	r24, Y+9	; 0x09
    6668:	9a 85       	ldd	r25, Y+10	; 0x0a
    666a:	20 e0       	ldi	r18, 0x00	; 0
    666c:	3f ef       	ldi	r19, 0xFF	; 255
    666e:	4f e7       	ldi	r20, 0x7F	; 127
    6670:	57 e4       	ldi	r21, 0x47	; 71
    6672:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6676:	18 16       	cp	r1, r24
    6678:	4c f5       	brge	.+82     	; 0x66cc <Maintenance_Menu+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    667a:	6b 85       	ldd	r22, Y+11	; 0x0b
    667c:	7c 85       	ldd	r23, Y+12	; 0x0c
    667e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6680:	9e 85       	ldd	r25, Y+14	; 0x0e
    6682:	20 e0       	ldi	r18, 0x00	; 0
    6684:	30 e0       	ldi	r19, 0x00	; 0
    6686:	40 e2       	ldi	r20, 0x20	; 32
    6688:	51 e4       	ldi	r21, 0x41	; 65
    668a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    668e:	dc 01       	movw	r26, r24
    6690:	cb 01       	movw	r24, r22
    6692:	bc 01       	movw	r22, r24
    6694:	cd 01       	movw	r24, r26
    6696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    669a:	dc 01       	movw	r26, r24
    669c:	cb 01       	movw	r24, r22
    669e:	9e 83       	std	Y+6, r25	; 0x06
    66a0:	8d 83       	std	Y+5, r24	; 0x05
    66a2:	0f c0       	rjmp	.+30     	; 0x66c2 <Maintenance_Menu+0x2f2>
    66a4:	88 ec       	ldi	r24, 0xC8	; 200
    66a6:	90 e0       	ldi	r25, 0x00	; 0
    66a8:	9c 83       	std	Y+4, r25	; 0x04
    66aa:	8b 83       	std	Y+3, r24	; 0x03
    66ac:	8b 81       	ldd	r24, Y+3	; 0x03
    66ae:	9c 81       	ldd	r25, Y+4	; 0x04
    66b0:	01 97       	sbiw	r24, 0x01	; 1
    66b2:	f1 f7       	brne	.-4      	; 0x66b0 <Maintenance_Menu+0x2e0>
    66b4:	9c 83       	std	Y+4, r25	; 0x04
    66b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    66b8:	8d 81       	ldd	r24, Y+5	; 0x05
    66ba:	9e 81       	ldd	r25, Y+6	; 0x06
    66bc:	01 97       	sbiw	r24, 0x01	; 1
    66be:	9e 83       	std	Y+6, r25	; 0x06
    66c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    66c2:	8d 81       	ldd	r24, Y+5	; 0x05
    66c4:	9e 81       	ldd	r25, Y+6	; 0x06
    66c6:	00 97       	sbiw	r24, 0x00	; 0
    66c8:	69 f7       	brne	.-38     	; 0x66a4 <Maintenance_Menu+0x2d4>
    66ca:	91 ce       	rjmp	.-734    	; 0x63ee <Maintenance_Menu+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    66cc:	6f 81       	ldd	r22, Y+7	; 0x07
    66ce:	78 85       	ldd	r23, Y+8	; 0x08
    66d0:	89 85       	ldd	r24, Y+9	; 0x09
    66d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    66d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66d8:	dc 01       	movw	r26, r24
    66da:	cb 01       	movw	r24, r22
    66dc:	9e 83       	std	Y+6, r25	; 0x06
    66de:	8d 83       	std	Y+5, r24	; 0x05
    66e0:	8d 81       	ldd	r24, Y+5	; 0x05
    66e2:	9e 81       	ldd	r25, Y+6	; 0x06
    66e4:	9a 83       	std	Y+2, r25	; 0x02
    66e6:	89 83       	std	Y+1, r24	; 0x01
    66e8:	89 81       	ldd	r24, Y+1	; 0x01
    66ea:	9a 81       	ldd	r25, Y+2	; 0x02
    66ec:	01 97       	sbiw	r24, 0x01	; 1
    66ee:	f1 f7       	brne	.-4      	; 0x66ec <Maintenance_Menu+0x31c>
    66f0:	9a 83       	std	Y+2, r25	; 0x02
    66f2:	89 83       	std	Y+1, r24	; 0x01
    66f4:	7c ce       	rjmp	.-776    	; 0x63ee <Maintenance_Menu+0x1e>

    case '4':
      return;
    }
  }
}
    66f6:	6f 96       	adiw	r28, 0x1f	; 31
    66f8:	0f b6       	in	r0, 0x3f	; 63
    66fa:	f8 94       	cli
    66fc:	de bf       	out	0x3e, r29	; 62
    66fe:	0f be       	out	0x3f, r0	; 63
    6700:	cd bf       	out	0x3d, r28	; 61
    6702:	cf 91       	pop	r28
    6704:	df 91       	pop	r29
    6706:	08 95       	ret

00006708 <Display_Welcome>:
u8 Wait_For_Input(u8 *input, u16 timeout_ms);
void Display_Error(const u8 *message);
void Scroll_Text(const u8 *text, u8 row);

void Display_Welcome(void)
{
    6708:	df 93       	push	r29
    670a:	cf 93       	push	r28
    670c:	cd b7       	in	r28, 0x3d	; 61
    670e:	de b7       	in	r29, 0x3e	; 62
    6710:	6c 97       	sbiw	r28, 0x1c	; 28
    6712:	0f b6       	in	r0, 0x3f	; 63
    6714:	f8 94       	cli
    6716:	de bf       	out	0x3e, r29	; 62
    6718:	0f be       	out	0x3f, r0	; 63
    671a:	cd bf       	out	0x3d, r28	; 61
	CLCD_vClearScreen();
    671c:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
	CLCD_vSendString((u8 *)"   Welcome to");
    6720:	8f e2       	ldi	r24, 0x2F	; 47
    6722:	93 e0       	ldi	r25, 0x03	; 3
    6724:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    6728:	82 e0       	ldi	r24, 0x02	; 2
    672a:	61 e0       	ldi	r22, 0x01	; 1
    672c:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
	CLCD_vSendString((u8 *)" Advanced Safe");
    6730:	8d e3       	ldi	r24, 0x3D	; 61
    6732:	93 e0       	ldi	r25, 0x03	; 3
    6734:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    6738:	80 e0       	ldi	r24, 0x00	; 0
    673a:	90 e0       	ldi	r25, 0x00	; 0
    673c:	aa ef       	ldi	r26, 0xFA	; 250
    673e:	b4 e4       	ldi	r27, 0x44	; 68
    6740:	89 8f       	std	Y+25, r24	; 0x19
    6742:	9a 8f       	std	Y+26, r25	; 0x1a
    6744:	ab 8f       	std	Y+27, r26	; 0x1b
    6746:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6748:	69 8d       	ldd	r22, Y+25	; 0x19
    674a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    674c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    674e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6750:	20 e0       	ldi	r18, 0x00	; 0
    6752:	30 e0       	ldi	r19, 0x00	; 0
    6754:	4a ef       	ldi	r20, 0xFA	; 250
    6756:	54 e4       	ldi	r21, 0x44	; 68
    6758:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    675c:	dc 01       	movw	r26, r24
    675e:	cb 01       	movw	r24, r22
    6760:	8d 8b       	std	Y+21, r24	; 0x15
    6762:	9e 8b       	std	Y+22, r25	; 0x16
    6764:	af 8b       	std	Y+23, r26	; 0x17
    6766:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6768:	6d 89       	ldd	r22, Y+21	; 0x15
    676a:	7e 89       	ldd	r23, Y+22	; 0x16
    676c:	8f 89       	ldd	r24, Y+23	; 0x17
    676e:	98 8d       	ldd	r25, Y+24	; 0x18
    6770:	20 e0       	ldi	r18, 0x00	; 0
    6772:	30 e0       	ldi	r19, 0x00	; 0
    6774:	40 e8       	ldi	r20, 0x80	; 128
    6776:	5f e3       	ldi	r21, 0x3F	; 63
    6778:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    677c:	88 23       	and	r24, r24
    677e:	2c f4       	brge	.+10     	; 0x678a <Display_Welcome+0x82>
		__ticks = 1;
    6780:	81 e0       	ldi	r24, 0x01	; 1
    6782:	90 e0       	ldi	r25, 0x00	; 0
    6784:	9c 8b       	std	Y+20, r25	; 0x14
    6786:	8b 8b       	std	Y+19, r24	; 0x13
    6788:	3f c0       	rjmp	.+126    	; 0x6808 <Display_Welcome+0x100>
	else if (__tmp > 65535)
    678a:	6d 89       	ldd	r22, Y+21	; 0x15
    678c:	7e 89       	ldd	r23, Y+22	; 0x16
    678e:	8f 89       	ldd	r24, Y+23	; 0x17
    6790:	98 8d       	ldd	r25, Y+24	; 0x18
    6792:	20 e0       	ldi	r18, 0x00	; 0
    6794:	3f ef       	ldi	r19, 0xFF	; 255
    6796:	4f e7       	ldi	r20, 0x7F	; 127
    6798:	57 e4       	ldi	r21, 0x47	; 71
    679a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    679e:	18 16       	cp	r1, r24
    67a0:	4c f5       	brge	.+82     	; 0x67f4 <Display_Welcome+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    67a2:	69 8d       	ldd	r22, Y+25	; 0x19
    67a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    67a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    67a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    67aa:	20 e0       	ldi	r18, 0x00	; 0
    67ac:	30 e0       	ldi	r19, 0x00	; 0
    67ae:	40 e2       	ldi	r20, 0x20	; 32
    67b0:	51 e4       	ldi	r21, 0x41	; 65
    67b2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    67b6:	dc 01       	movw	r26, r24
    67b8:	cb 01       	movw	r24, r22
    67ba:	bc 01       	movw	r22, r24
    67bc:	cd 01       	movw	r24, r26
    67be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67c2:	dc 01       	movw	r26, r24
    67c4:	cb 01       	movw	r24, r22
    67c6:	9c 8b       	std	Y+20, r25	; 0x14
    67c8:	8b 8b       	std	Y+19, r24	; 0x13
    67ca:	0f c0       	rjmp	.+30     	; 0x67ea <Display_Welcome+0xe2>
    67cc:	88 ec       	ldi	r24, 0xC8	; 200
    67ce:	90 e0       	ldi	r25, 0x00	; 0
    67d0:	9a 8b       	std	Y+18, r25	; 0x12
    67d2:	89 8b       	std	Y+17, r24	; 0x11
    67d4:	89 89       	ldd	r24, Y+17	; 0x11
    67d6:	9a 89       	ldd	r25, Y+18	; 0x12
    67d8:	01 97       	sbiw	r24, 0x01	; 1
    67da:	f1 f7       	brne	.-4      	; 0x67d8 <Display_Welcome+0xd0>
    67dc:	9a 8b       	std	Y+18, r25	; 0x12
    67de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67e0:	8b 89       	ldd	r24, Y+19	; 0x13
    67e2:	9c 89       	ldd	r25, Y+20	; 0x14
    67e4:	01 97       	sbiw	r24, 0x01	; 1
    67e6:	9c 8b       	std	Y+20, r25	; 0x14
    67e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67ea:	8b 89       	ldd	r24, Y+19	; 0x13
    67ec:	9c 89       	ldd	r25, Y+20	; 0x14
    67ee:	00 97       	sbiw	r24, 0x00	; 0
    67f0:	69 f7       	brne	.-38     	; 0x67cc <Display_Welcome+0xc4>
    67f2:	14 c0       	rjmp	.+40     	; 0x681c <Display_Welcome+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67f4:	6d 89       	ldd	r22, Y+21	; 0x15
    67f6:	7e 89       	ldd	r23, Y+22	; 0x16
    67f8:	8f 89       	ldd	r24, Y+23	; 0x17
    67fa:	98 8d       	ldd	r25, Y+24	; 0x18
    67fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6800:	dc 01       	movw	r26, r24
    6802:	cb 01       	movw	r24, r22
    6804:	9c 8b       	std	Y+20, r25	; 0x14
    6806:	8b 8b       	std	Y+19, r24	; 0x13
    6808:	8b 89       	ldd	r24, Y+19	; 0x13
    680a:	9c 89       	ldd	r25, Y+20	; 0x14
    680c:	98 8b       	std	Y+16, r25	; 0x10
    680e:	8f 87       	std	Y+15, r24	; 0x0f
    6810:	8f 85       	ldd	r24, Y+15	; 0x0f
    6812:	98 89       	ldd	r25, Y+16	; 0x10
    6814:	01 97       	sbiw	r24, 0x01	; 1
    6816:	f1 f7       	brne	.-4      	; 0x6814 <Display_Welcome+0x10c>
    6818:	98 8b       	std	Y+16, r25	; 0x10
    681a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(DISPLAY_DELAY_MS);

	CLCD_vClearScreen();
    681c:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
	CLCD_vSendString((u8 *)"Developed by:");
    6820:	8c e4       	ldi	r24, 0x4C	; 76
    6822:	93 e0       	ldi	r25, 0x03	; 3
    6824:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    6828:	82 e0       	ldi	r24, 0x02	; 2
    682a:	61 e0       	ldi	r22, 0x01	; 1
    682c:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
	CLCD_vSendString((u8 *)"Abdallah Shehawey");
    6830:	8a e5       	ldi	r24, 0x5A	; 90
    6832:	93 e0       	ldi	r25, 0x03	; 3
    6834:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    6838:	80 e0       	ldi	r24, 0x00	; 0
    683a:	90 e0       	ldi	r25, 0x00	; 0
    683c:	aa ef       	ldi	r26, 0xFA	; 250
    683e:	b4 e4       	ldi	r27, 0x44	; 68
    6840:	8b 87       	std	Y+11, r24	; 0x0b
    6842:	9c 87       	std	Y+12, r25	; 0x0c
    6844:	ad 87       	std	Y+13, r26	; 0x0d
    6846:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6848:	6b 85       	ldd	r22, Y+11	; 0x0b
    684a:	7c 85       	ldd	r23, Y+12	; 0x0c
    684c:	8d 85       	ldd	r24, Y+13	; 0x0d
    684e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6850:	20 e0       	ldi	r18, 0x00	; 0
    6852:	30 e0       	ldi	r19, 0x00	; 0
    6854:	4a ef       	ldi	r20, 0xFA	; 250
    6856:	54 e4       	ldi	r21, 0x44	; 68
    6858:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    685c:	dc 01       	movw	r26, r24
    685e:	cb 01       	movw	r24, r22
    6860:	8f 83       	std	Y+7, r24	; 0x07
    6862:	98 87       	std	Y+8, r25	; 0x08
    6864:	a9 87       	std	Y+9, r26	; 0x09
    6866:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6868:	6f 81       	ldd	r22, Y+7	; 0x07
    686a:	78 85       	ldd	r23, Y+8	; 0x08
    686c:	89 85       	ldd	r24, Y+9	; 0x09
    686e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6870:	20 e0       	ldi	r18, 0x00	; 0
    6872:	30 e0       	ldi	r19, 0x00	; 0
    6874:	40 e8       	ldi	r20, 0x80	; 128
    6876:	5f e3       	ldi	r21, 0x3F	; 63
    6878:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    687c:	88 23       	and	r24, r24
    687e:	2c f4       	brge	.+10     	; 0x688a <Display_Welcome+0x182>
		__ticks = 1;
    6880:	81 e0       	ldi	r24, 0x01	; 1
    6882:	90 e0       	ldi	r25, 0x00	; 0
    6884:	9e 83       	std	Y+6, r25	; 0x06
    6886:	8d 83       	std	Y+5, r24	; 0x05
    6888:	3f c0       	rjmp	.+126    	; 0x6908 <Display_Welcome+0x200>
	else if (__tmp > 65535)
    688a:	6f 81       	ldd	r22, Y+7	; 0x07
    688c:	78 85       	ldd	r23, Y+8	; 0x08
    688e:	89 85       	ldd	r24, Y+9	; 0x09
    6890:	9a 85       	ldd	r25, Y+10	; 0x0a
    6892:	20 e0       	ldi	r18, 0x00	; 0
    6894:	3f ef       	ldi	r19, 0xFF	; 255
    6896:	4f e7       	ldi	r20, 0x7F	; 127
    6898:	57 e4       	ldi	r21, 0x47	; 71
    689a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    689e:	18 16       	cp	r1, r24
    68a0:	4c f5       	brge	.+82     	; 0x68f4 <Display_Welcome+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    68a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    68a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    68a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    68a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    68aa:	20 e0       	ldi	r18, 0x00	; 0
    68ac:	30 e0       	ldi	r19, 0x00	; 0
    68ae:	40 e2       	ldi	r20, 0x20	; 32
    68b0:	51 e4       	ldi	r21, 0x41	; 65
    68b2:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    68b6:	dc 01       	movw	r26, r24
    68b8:	cb 01       	movw	r24, r22
    68ba:	bc 01       	movw	r22, r24
    68bc:	cd 01       	movw	r24, r26
    68be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68c2:	dc 01       	movw	r26, r24
    68c4:	cb 01       	movw	r24, r22
    68c6:	9e 83       	std	Y+6, r25	; 0x06
    68c8:	8d 83       	std	Y+5, r24	; 0x05
    68ca:	0f c0       	rjmp	.+30     	; 0x68ea <Display_Welcome+0x1e2>
    68cc:	88 ec       	ldi	r24, 0xC8	; 200
    68ce:	90 e0       	ldi	r25, 0x00	; 0
    68d0:	9c 83       	std	Y+4, r25	; 0x04
    68d2:	8b 83       	std	Y+3, r24	; 0x03
    68d4:	8b 81       	ldd	r24, Y+3	; 0x03
    68d6:	9c 81       	ldd	r25, Y+4	; 0x04
    68d8:	01 97       	sbiw	r24, 0x01	; 1
    68da:	f1 f7       	brne	.-4      	; 0x68d8 <Display_Welcome+0x1d0>
    68dc:	9c 83       	std	Y+4, r25	; 0x04
    68de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68e0:	8d 81       	ldd	r24, Y+5	; 0x05
    68e2:	9e 81       	ldd	r25, Y+6	; 0x06
    68e4:	01 97       	sbiw	r24, 0x01	; 1
    68e6:	9e 83       	std	Y+6, r25	; 0x06
    68e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68ea:	8d 81       	ldd	r24, Y+5	; 0x05
    68ec:	9e 81       	ldd	r25, Y+6	; 0x06
    68ee:	00 97       	sbiw	r24, 0x00	; 0
    68f0:	69 f7       	brne	.-38     	; 0x68cc <Display_Welcome+0x1c4>
    68f2:	14 c0       	rjmp	.+40     	; 0x691c <Display_Welcome+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68f4:	6f 81       	ldd	r22, Y+7	; 0x07
    68f6:	78 85       	ldd	r23, Y+8	; 0x08
    68f8:	89 85       	ldd	r24, Y+9	; 0x09
    68fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    68fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6900:	dc 01       	movw	r26, r24
    6902:	cb 01       	movw	r24, r22
    6904:	9e 83       	std	Y+6, r25	; 0x06
    6906:	8d 83       	std	Y+5, r24	; 0x05
    6908:	8d 81       	ldd	r24, Y+5	; 0x05
    690a:	9e 81       	ldd	r25, Y+6	; 0x06
    690c:	9a 83       	std	Y+2, r25	; 0x02
    690e:	89 83       	std	Y+1, r24	; 0x01
    6910:	89 81       	ldd	r24, Y+1	; 0x01
    6912:	9a 81       	ldd	r25, Y+2	; 0x02
    6914:	01 97       	sbiw	r24, 0x01	; 1
    6916:	f1 f7       	brne	.-4      	; 0x6914 <Display_Welcome+0x20c>
    6918:	9a 83       	std	Y+2, r25	; 0x02
    691a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DISPLAY_DELAY_MS);
}
    691c:	6c 96       	adiw	r28, 0x1c	; 28
    691e:	0f b6       	in	r0, 0x3f	; 63
    6920:	f8 94       	cli
    6922:	de bf       	out	0x3e, r29	; 62
    6924:	0f be       	out	0x3f, r0	; 63
    6926:	cd bf       	out	0x3d, r28	; 61
    6928:	cf 91       	pop	r28
    692a:	df 91       	pop	r29
    692c:	08 95       	ret

0000692e <Display_Init_Status>:

void Display_Init_Status(void)
{
    692e:	df 93       	push	r29
    6930:	cf 93       	push	r28
    6932:	cd b7       	in	r28, 0x3d	; 61
    6934:	de b7       	in	r29, 0x3e	; 62
    6936:	aa 97       	sbiw	r28, 0x2a	; 42
    6938:	0f b6       	in	r0, 0x3f	; 63
    693a:	f8 94       	cli
    693c:	de bf       	out	0x3e, r29	; 62
    693e:	0f be       	out	0x3f, r0	; 63
    6940:	cd bf       	out	0x3d, r28	; 61
	CLCD_vClearScreen();
    6942:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
	CLCD_vSendString((u8 *)"Initializing");
    6946:	8c e6       	ldi	r24, 0x6C	; 108
    6948:	93 e0       	ldi	r25, 0x03	; 3
    694a:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    694e:	82 e0       	ldi	r24, 0x02	; 2
    6950:	61 e0       	ldi	r22, 0x01	; 1
    6952:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>

	// Initialize LCD
	CLCD_vSendString((u8 *)"LCD...");
    6956:	89 e7       	ldi	r24, 0x79	; 121
    6958:	93 e0       	ldi	r25, 0x03	; 3
    695a:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
	CLCD_vSendString((u8 *)"OK");
    695e:	80 e8       	ldi	r24, 0x80	; 128
    6960:	93 e0       	ldi	r25, 0x03	; 3
    6962:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    6966:	80 e0       	ldi	r24, 0x00	; 0
    6968:	90 e0       	ldi	r25, 0x00	; 0
    696a:	aa ef       	ldi	r26, 0xFA	; 250
    696c:	b3 e4       	ldi	r27, 0x43	; 67
    696e:	8f a3       	std	Y+39, r24	; 0x27
    6970:	98 a7       	std	Y+40, r25	; 0x28
    6972:	a9 a7       	std	Y+41, r26	; 0x29
    6974:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6976:	6f a1       	ldd	r22, Y+39	; 0x27
    6978:	78 a5       	ldd	r23, Y+40	; 0x28
    697a:	89 a5       	ldd	r24, Y+41	; 0x29
    697c:	9a a5       	ldd	r25, Y+42	; 0x2a
    697e:	20 e0       	ldi	r18, 0x00	; 0
    6980:	30 e0       	ldi	r19, 0x00	; 0
    6982:	4a ef       	ldi	r20, 0xFA	; 250
    6984:	54 e4       	ldi	r21, 0x44	; 68
    6986:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    698a:	dc 01       	movw	r26, r24
    698c:	cb 01       	movw	r24, r22
    698e:	8b a3       	std	Y+35, r24	; 0x23
    6990:	9c a3       	std	Y+36, r25	; 0x24
    6992:	ad a3       	std	Y+37, r26	; 0x25
    6994:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6996:	6b a1       	ldd	r22, Y+35	; 0x23
    6998:	7c a1       	ldd	r23, Y+36	; 0x24
    699a:	8d a1       	ldd	r24, Y+37	; 0x25
    699c:	9e a1       	ldd	r25, Y+38	; 0x26
    699e:	20 e0       	ldi	r18, 0x00	; 0
    69a0:	30 e0       	ldi	r19, 0x00	; 0
    69a2:	40 e8       	ldi	r20, 0x80	; 128
    69a4:	5f e3       	ldi	r21, 0x3F	; 63
    69a6:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    69aa:	88 23       	and	r24, r24
    69ac:	2c f4       	brge	.+10     	; 0x69b8 <Display_Init_Status+0x8a>
		__ticks = 1;
    69ae:	81 e0       	ldi	r24, 0x01	; 1
    69b0:	90 e0       	ldi	r25, 0x00	; 0
    69b2:	9a a3       	std	Y+34, r25	; 0x22
    69b4:	89 a3       	std	Y+33, r24	; 0x21
    69b6:	3f c0       	rjmp	.+126    	; 0x6a36 <Display_Init_Status+0x108>
	else if (__tmp > 65535)
    69b8:	6b a1       	ldd	r22, Y+35	; 0x23
    69ba:	7c a1       	ldd	r23, Y+36	; 0x24
    69bc:	8d a1       	ldd	r24, Y+37	; 0x25
    69be:	9e a1       	ldd	r25, Y+38	; 0x26
    69c0:	20 e0       	ldi	r18, 0x00	; 0
    69c2:	3f ef       	ldi	r19, 0xFF	; 255
    69c4:	4f e7       	ldi	r20, 0x7F	; 127
    69c6:	57 e4       	ldi	r21, 0x47	; 71
    69c8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    69cc:	18 16       	cp	r1, r24
    69ce:	4c f5       	brge	.+82     	; 0x6a22 <Display_Init_Status+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    69d0:	6f a1       	ldd	r22, Y+39	; 0x27
    69d2:	78 a5       	ldd	r23, Y+40	; 0x28
    69d4:	89 a5       	ldd	r24, Y+41	; 0x29
    69d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    69d8:	20 e0       	ldi	r18, 0x00	; 0
    69da:	30 e0       	ldi	r19, 0x00	; 0
    69dc:	40 e2       	ldi	r20, 0x20	; 32
    69de:	51 e4       	ldi	r21, 0x41	; 65
    69e0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    69e4:	dc 01       	movw	r26, r24
    69e6:	cb 01       	movw	r24, r22
    69e8:	bc 01       	movw	r22, r24
    69ea:	cd 01       	movw	r24, r26
    69ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69f0:	dc 01       	movw	r26, r24
    69f2:	cb 01       	movw	r24, r22
    69f4:	9a a3       	std	Y+34, r25	; 0x22
    69f6:	89 a3       	std	Y+33, r24	; 0x21
    69f8:	0f c0       	rjmp	.+30     	; 0x6a18 <Display_Init_Status+0xea>
    69fa:	88 ec       	ldi	r24, 0xC8	; 200
    69fc:	90 e0       	ldi	r25, 0x00	; 0
    69fe:	98 a3       	std	Y+32, r25	; 0x20
    6a00:	8f 8f       	std	Y+31, r24	; 0x1f
    6a02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6a04:	98 a1       	ldd	r25, Y+32	; 0x20
    6a06:	01 97       	sbiw	r24, 0x01	; 1
    6a08:	f1 f7       	brne	.-4      	; 0x6a06 <Display_Init_Status+0xd8>
    6a0a:	98 a3       	std	Y+32, r25	; 0x20
    6a0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a0e:	89 a1       	ldd	r24, Y+33	; 0x21
    6a10:	9a a1       	ldd	r25, Y+34	; 0x22
    6a12:	01 97       	sbiw	r24, 0x01	; 1
    6a14:	9a a3       	std	Y+34, r25	; 0x22
    6a16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a18:	89 a1       	ldd	r24, Y+33	; 0x21
    6a1a:	9a a1       	ldd	r25, Y+34	; 0x22
    6a1c:	00 97       	sbiw	r24, 0x00	; 0
    6a1e:	69 f7       	brne	.-38     	; 0x69fa <Display_Init_Status+0xcc>
    6a20:	14 c0       	rjmp	.+40     	; 0x6a4a <Display_Init_Status+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a22:	6b a1       	ldd	r22, Y+35	; 0x23
    6a24:	7c a1       	ldd	r23, Y+36	; 0x24
    6a26:	8d a1       	ldd	r24, Y+37	; 0x25
    6a28:	9e a1       	ldd	r25, Y+38	; 0x26
    6a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a2e:	dc 01       	movw	r26, r24
    6a30:	cb 01       	movw	r24, r22
    6a32:	9a a3       	std	Y+34, r25	; 0x22
    6a34:	89 a3       	std	Y+33, r24	; 0x21
    6a36:	89 a1       	ldd	r24, Y+33	; 0x21
    6a38:	9a a1       	ldd	r25, Y+34	; 0x22
    6a3a:	9e 8f       	std	Y+30, r25	; 0x1e
    6a3c:	8d 8f       	std	Y+29, r24	; 0x1d
    6a3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6a40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6a42:	01 97       	sbiw	r24, 0x01	; 1
    6a44:	f1 f7       	brne	.-4      	; 0x6a42 <Display_Init_Status+0x114>
    6a46:	9e 8f       	std	Y+30, r25	; 0x1e
    6a48:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);

	// Initialize USART
	CLCD_vSetPosition(2, 1);
    6a4a:	82 e0       	ldi	r24, 0x02	; 2
    6a4c:	61 e0       	ldi	r22, 0x01	; 1
    6a4e:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
	CLCD_vSendString((u8 *)"USART...");
    6a52:	83 e8       	ldi	r24, 0x83	; 131
    6a54:	93 e0       	ldi	r25, 0x03	; 3
    6a56:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
	USART_vInit();
    6a5a:	0e 94 10 09 	call	0x1220	; 0x1220 <USART_vInit>
	CLCD_vSendString((u8 *)"OK");
    6a5e:	80 e8       	ldi	r24, 0x80	; 128
    6a60:	93 e0       	ldi	r25, 0x03	; 3
    6a62:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    6a66:	80 e0       	ldi	r24, 0x00	; 0
    6a68:	90 e0       	ldi	r25, 0x00	; 0
    6a6a:	aa ef       	ldi	r26, 0xFA	; 250
    6a6c:	b3 e4       	ldi	r27, 0x43	; 67
    6a6e:	89 8f       	std	Y+25, r24	; 0x19
    6a70:	9a 8f       	std	Y+26, r25	; 0x1a
    6a72:	ab 8f       	std	Y+27, r26	; 0x1b
    6a74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a76:	69 8d       	ldd	r22, Y+25	; 0x19
    6a78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6a7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6a7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6a7e:	20 e0       	ldi	r18, 0x00	; 0
    6a80:	30 e0       	ldi	r19, 0x00	; 0
    6a82:	4a ef       	ldi	r20, 0xFA	; 250
    6a84:	54 e4       	ldi	r21, 0x44	; 68
    6a86:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6a8a:	dc 01       	movw	r26, r24
    6a8c:	cb 01       	movw	r24, r22
    6a8e:	8d 8b       	std	Y+21, r24	; 0x15
    6a90:	9e 8b       	std	Y+22, r25	; 0x16
    6a92:	af 8b       	std	Y+23, r26	; 0x17
    6a94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6a96:	6d 89       	ldd	r22, Y+21	; 0x15
    6a98:	7e 89       	ldd	r23, Y+22	; 0x16
    6a9a:	8f 89       	ldd	r24, Y+23	; 0x17
    6a9c:	98 8d       	ldd	r25, Y+24	; 0x18
    6a9e:	20 e0       	ldi	r18, 0x00	; 0
    6aa0:	30 e0       	ldi	r19, 0x00	; 0
    6aa2:	40 e8       	ldi	r20, 0x80	; 128
    6aa4:	5f e3       	ldi	r21, 0x3F	; 63
    6aa6:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6aaa:	88 23       	and	r24, r24
    6aac:	2c f4       	brge	.+10     	; 0x6ab8 <Display_Init_Status+0x18a>
		__ticks = 1;
    6aae:	81 e0       	ldi	r24, 0x01	; 1
    6ab0:	90 e0       	ldi	r25, 0x00	; 0
    6ab2:	9c 8b       	std	Y+20, r25	; 0x14
    6ab4:	8b 8b       	std	Y+19, r24	; 0x13
    6ab6:	3f c0       	rjmp	.+126    	; 0x6b36 <Display_Init_Status+0x208>
	else if (__tmp > 65535)
    6ab8:	6d 89       	ldd	r22, Y+21	; 0x15
    6aba:	7e 89       	ldd	r23, Y+22	; 0x16
    6abc:	8f 89       	ldd	r24, Y+23	; 0x17
    6abe:	98 8d       	ldd	r25, Y+24	; 0x18
    6ac0:	20 e0       	ldi	r18, 0x00	; 0
    6ac2:	3f ef       	ldi	r19, 0xFF	; 255
    6ac4:	4f e7       	ldi	r20, 0x7F	; 127
    6ac6:	57 e4       	ldi	r21, 0x47	; 71
    6ac8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6acc:	18 16       	cp	r1, r24
    6ace:	4c f5       	brge	.+82     	; 0x6b22 <Display_Init_Status+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ad0:	69 8d       	ldd	r22, Y+25	; 0x19
    6ad2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6ad4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6ad6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6ad8:	20 e0       	ldi	r18, 0x00	; 0
    6ada:	30 e0       	ldi	r19, 0x00	; 0
    6adc:	40 e2       	ldi	r20, 0x20	; 32
    6ade:	51 e4       	ldi	r21, 0x41	; 65
    6ae0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6ae4:	dc 01       	movw	r26, r24
    6ae6:	cb 01       	movw	r24, r22
    6ae8:	bc 01       	movw	r22, r24
    6aea:	cd 01       	movw	r24, r26
    6aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6af0:	dc 01       	movw	r26, r24
    6af2:	cb 01       	movw	r24, r22
    6af4:	9c 8b       	std	Y+20, r25	; 0x14
    6af6:	8b 8b       	std	Y+19, r24	; 0x13
    6af8:	0f c0       	rjmp	.+30     	; 0x6b18 <Display_Init_Status+0x1ea>
    6afa:	88 ec       	ldi	r24, 0xC8	; 200
    6afc:	90 e0       	ldi	r25, 0x00	; 0
    6afe:	9a 8b       	std	Y+18, r25	; 0x12
    6b00:	89 8b       	std	Y+17, r24	; 0x11
    6b02:	89 89       	ldd	r24, Y+17	; 0x11
    6b04:	9a 89       	ldd	r25, Y+18	; 0x12
    6b06:	01 97       	sbiw	r24, 0x01	; 1
    6b08:	f1 f7       	brne	.-4      	; 0x6b06 <Display_Init_Status+0x1d8>
    6b0a:	9a 8b       	std	Y+18, r25	; 0x12
    6b0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b0e:	8b 89       	ldd	r24, Y+19	; 0x13
    6b10:	9c 89       	ldd	r25, Y+20	; 0x14
    6b12:	01 97       	sbiw	r24, 0x01	; 1
    6b14:	9c 8b       	std	Y+20, r25	; 0x14
    6b16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b18:	8b 89       	ldd	r24, Y+19	; 0x13
    6b1a:	9c 89       	ldd	r25, Y+20	; 0x14
    6b1c:	00 97       	sbiw	r24, 0x00	; 0
    6b1e:	69 f7       	brne	.-38     	; 0x6afa <Display_Init_Status+0x1cc>
    6b20:	14 c0       	rjmp	.+40     	; 0x6b4a <Display_Init_Status+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b22:	6d 89       	ldd	r22, Y+21	; 0x15
    6b24:	7e 89       	ldd	r23, Y+22	; 0x16
    6b26:	8f 89       	ldd	r24, Y+23	; 0x17
    6b28:	98 8d       	ldd	r25, Y+24	; 0x18
    6b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b2e:	dc 01       	movw	r26, r24
    6b30:	cb 01       	movw	r24, r22
    6b32:	9c 8b       	std	Y+20, r25	; 0x14
    6b34:	8b 8b       	std	Y+19, r24	; 0x13
    6b36:	8b 89       	ldd	r24, Y+19	; 0x13
    6b38:	9c 89       	ldd	r25, Y+20	; 0x14
    6b3a:	98 8b       	std	Y+16, r25	; 0x10
    6b3c:	8f 87       	std	Y+15, r24	; 0x0f
    6b3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b40:	98 89       	ldd	r25, Y+16	; 0x10
    6b42:	01 97       	sbiw	r24, 0x01	; 1
    6b44:	f1 f7       	brne	.-4      	; 0x6b42 <Display_Init_Status+0x214>
    6b46:	98 8b       	std	Y+16, r25	; 0x10
    6b48:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);

	// Initialize EEPROM
	CLCD_vSetPosition(2, 1);
    6b4a:	82 e0       	ldi	r24, 0x02	; 2
    6b4c:	61 e0       	ldi	r22, 0x01	; 1
    6b4e:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
	CLCD_vSendString((u8 *)"EEPROM...");
    6b52:	8c e8       	ldi	r24, 0x8C	; 140
    6b54:	93 e0       	ldi	r25, 0x03	; 3
    6b56:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
	EEPROM_vInit();
    6b5a:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <EEPROM_vInit>
	CLCD_vSendString((u8 *)"OK");
    6b5e:	80 e8       	ldi	r24, 0x80	; 128
    6b60:	93 e0       	ldi	r25, 0x03	; 3
    6b62:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    6b66:	80 e0       	ldi	r24, 0x00	; 0
    6b68:	90 e0       	ldi	r25, 0x00	; 0
    6b6a:	aa ef       	ldi	r26, 0xFA	; 250
    6b6c:	b3 e4       	ldi	r27, 0x43	; 67
    6b6e:	8b 87       	std	Y+11, r24	; 0x0b
    6b70:	9c 87       	std	Y+12, r25	; 0x0c
    6b72:	ad 87       	std	Y+13, r26	; 0x0d
    6b74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b76:	6b 85       	ldd	r22, Y+11	; 0x0b
    6b78:	7c 85       	ldd	r23, Y+12	; 0x0c
    6b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b7e:	20 e0       	ldi	r18, 0x00	; 0
    6b80:	30 e0       	ldi	r19, 0x00	; 0
    6b82:	4a ef       	ldi	r20, 0xFA	; 250
    6b84:	54 e4       	ldi	r21, 0x44	; 68
    6b86:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6b8a:	dc 01       	movw	r26, r24
    6b8c:	cb 01       	movw	r24, r22
    6b8e:	8f 83       	std	Y+7, r24	; 0x07
    6b90:	98 87       	std	Y+8, r25	; 0x08
    6b92:	a9 87       	std	Y+9, r26	; 0x09
    6b94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6b96:	6f 81       	ldd	r22, Y+7	; 0x07
    6b98:	78 85       	ldd	r23, Y+8	; 0x08
    6b9a:	89 85       	ldd	r24, Y+9	; 0x09
    6b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b9e:	20 e0       	ldi	r18, 0x00	; 0
    6ba0:	30 e0       	ldi	r19, 0x00	; 0
    6ba2:	40 e8       	ldi	r20, 0x80	; 128
    6ba4:	5f e3       	ldi	r21, 0x3F	; 63
    6ba6:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6baa:	88 23       	and	r24, r24
    6bac:	2c f4       	brge	.+10     	; 0x6bb8 <Display_Init_Status+0x28a>
		__ticks = 1;
    6bae:	81 e0       	ldi	r24, 0x01	; 1
    6bb0:	90 e0       	ldi	r25, 0x00	; 0
    6bb2:	9e 83       	std	Y+6, r25	; 0x06
    6bb4:	8d 83       	std	Y+5, r24	; 0x05
    6bb6:	3f c0       	rjmp	.+126    	; 0x6c36 <Display_Init_Status+0x308>
	else if (__tmp > 65535)
    6bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    6bba:	78 85       	ldd	r23, Y+8	; 0x08
    6bbc:	89 85       	ldd	r24, Y+9	; 0x09
    6bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bc0:	20 e0       	ldi	r18, 0x00	; 0
    6bc2:	3f ef       	ldi	r19, 0xFF	; 255
    6bc4:	4f e7       	ldi	r20, 0x7F	; 127
    6bc6:	57 e4       	ldi	r21, 0x47	; 71
    6bc8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6bcc:	18 16       	cp	r1, r24
    6bce:	4c f5       	brge	.+82     	; 0x6c22 <Display_Init_Status+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    6bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    6bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    6bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    6bd8:	20 e0       	ldi	r18, 0x00	; 0
    6bda:	30 e0       	ldi	r19, 0x00	; 0
    6bdc:	40 e2       	ldi	r20, 0x20	; 32
    6bde:	51 e4       	ldi	r21, 0x41	; 65
    6be0:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6be4:	dc 01       	movw	r26, r24
    6be6:	cb 01       	movw	r24, r22
    6be8:	bc 01       	movw	r22, r24
    6bea:	cd 01       	movw	r24, r26
    6bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6bf0:	dc 01       	movw	r26, r24
    6bf2:	cb 01       	movw	r24, r22
    6bf4:	9e 83       	std	Y+6, r25	; 0x06
    6bf6:	8d 83       	std	Y+5, r24	; 0x05
    6bf8:	0f c0       	rjmp	.+30     	; 0x6c18 <Display_Init_Status+0x2ea>
    6bfa:	88 ec       	ldi	r24, 0xC8	; 200
    6bfc:	90 e0       	ldi	r25, 0x00	; 0
    6bfe:	9c 83       	std	Y+4, r25	; 0x04
    6c00:	8b 83       	std	Y+3, r24	; 0x03
    6c02:	8b 81       	ldd	r24, Y+3	; 0x03
    6c04:	9c 81       	ldd	r25, Y+4	; 0x04
    6c06:	01 97       	sbiw	r24, 0x01	; 1
    6c08:	f1 f7       	brne	.-4      	; 0x6c06 <Display_Init_Status+0x2d8>
    6c0a:	9c 83       	std	Y+4, r25	; 0x04
    6c0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    6c10:	9e 81       	ldd	r25, Y+6	; 0x06
    6c12:	01 97       	sbiw	r24, 0x01	; 1
    6c14:	9e 83       	std	Y+6, r25	; 0x06
    6c16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c18:	8d 81       	ldd	r24, Y+5	; 0x05
    6c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    6c1c:	00 97       	sbiw	r24, 0x00	; 0
    6c1e:	69 f7       	brne	.-38     	; 0x6bfa <Display_Init_Status+0x2cc>
    6c20:	14 c0       	rjmp	.+40     	; 0x6c4a <Display_Init_Status+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c22:	6f 81       	ldd	r22, Y+7	; 0x07
    6c24:	78 85       	ldd	r23, Y+8	; 0x08
    6c26:	89 85       	ldd	r24, Y+9	; 0x09
    6c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c2e:	dc 01       	movw	r26, r24
    6c30:	cb 01       	movw	r24, r22
    6c32:	9e 83       	std	Y+6, r25	; 0x06
    6c34:	8d 83       	std	Y+5, r24	; 0x05
    6c36:	8d 81       	ldd	r24, Y+5	; 0x05
    6c38:	9e 81       	ldd	r25, Y+6	; 0x06
    6c3a:	9a 83       	std	Y+2, r25	; 0x02
    6c3c:	89 83       	std	Y+1, r24	; 0x01
    6c3e:	89 81       	ldd	r24, Y+1	; 0x01
    6c40:	9a 81       	ldd	r25, Y+2	; 0x02
    6c42:	01 97       	sbiw	r24, 0x01	; 1
    6c44:	f1 f7       	brne	.-4      	; 0x6c42 <Display_Init_Status+0x314>
    6c46:	9a 83       	std	Y+2, r25	; 0x02
    6c48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    6c4a:	aa 96       	adiw	r28, 0x2a	; 42
    6c4c:	0f b6       	in	r0, 0x3f	; 63
    6c4e:	f8 94       	cli
    6c50:	de bf       	out	0x3e, r29	; 62
    6c52:	0f be       	out	0x3f, r0	; 63
    6c54:	cd bf       	out	0x3d, r28	; 61
    6c56:	cf 91       	pop	r28
    6c58:	df 91       	pop	r29
    6c5a:	08 95       	ret

00006c5c <Wait_For_Input>:

u8 Wait_For_Input(u8 *input, u16 timeout_ms)
{
    6c5c:	df 93       	push	r29
    6c5e:	cf 93       	push	r28
    6c60:	cd b7       	in	r28, 0x3d	; 61
    6c62:	de b7       	in	r29, 0x3e	; 62
    6c64:	65 97       	sbiw	r28, 0x15	; 21
    6c66:	0f b6       	in	r0, 0x3f	; 63
    6c68:	f8 94       	cli
    6c6a:	de bf       	out	0x3e, r29	; 62
    6c6c:	0f be       	out	0x3f, r0	; 63
    6c6e:	cd bf       	out	0x3d, r28	; 61
    6c70:	9a 8b       	std	Y+18, r25	; 0x12
    6c72:	89 8b       	std	Y+17, r24	; 0x11
    6c74:	7c 8b       	std	Y+20, r23	; 0x14
    6c76:	6b 8b       	std	Y+19, r22	; 0x13
	u16 elapsed = 0;
    6c78:	18 8a       	std	Y+16, r1	; 0x10
    6c7a:	1f 86       	std	Y+15, r1	; 0x0f
    6c7c:	84 c0       	rjmp	.+264    	; 0x6d86 <Wait_For_Input+0x12a>
	while (elapsed < timeout_ms)
	{
		Error_State = USART_u8ReceiveData(input);
    6c7e:	89 89       	ldd	r24, Y+17	; 0x11
    6c80:	9a 89       	ldd	r25, Y+18	; 0x12
    6c82:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USART_u8ReceiveData>
    6c86:	80 93 93 05 	sts	0x0593, r24
		if (Error_State == OK)
    6c8a:	80 91 93 05 	lds	r24, 0x0593
    6c8e:	88 23       	and	r24, r24
    6c90:	19 f4       	brne	.+6      	; 0x6c98 <Wait_For_Input+0x3c>
		{
			return 1; // Input received
    6c92:	81 e0       	ldi	r24, 0x01	; 1
    6c94:	8d 8b       	std	Y+21, r24	; 0x15
    6c96:	80 c0       	rjmp	.+256    	; 0x6d98 <Wait_For_Input+0x13c>
    6c98:	80 e0       	ldi	r24, 0x00	; 0
    6c9a:	90 e0       	ldi	r25, 0x00	; 0
    6c9c:	a0 e8       	ldi	r26, 0x80	; 128
    6c9e:	bf e3       	ldi	r27, 0x3F	; 63
    6ca0:	8b 87       	std	Y+11, r24	; 0x0b
    6ca2:	9c 87       	std	Y+12, r25	; 0x0c
    6ca4:	ad 87       	std	Y+13, r26	; 0x0d
    6ca6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
    6caa:	7c 85       	ldd	r23, Y+12	; 0x0c
    6cac:	8d 85       	ldd	r24, Y+13	; 0x0d
    6cae:	9e 85       	ldd	r25, Y+14	; 0x0e
    6cb0:	20 e0       	ldi	r18, 0x00	; 0
    6cb2:	30 e0       	ldi	r19, 0x00	; 0
    6cb4:	4a ef       	ldi	r20, 0xFA	; 250
    6cb6:	54 e4       	ldi	r21, 0x44	; 68
    6cb8:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6cbc:	dc 01       	movw	r26, r24
    6cbe:	cb 01       	movw	r24, r22
    6cc0:	8f 83       	std	Y+7, r24	; 0x07
    6cc2:	98 87       	std	Y+8, r25	; 0x08
    6cc4:	a9 87       	std	Y+9, r26	; 0x09
    6cc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    6cca:	78 85       	ldd	r23, Y+8	; 0x08
    6ccc:	89 85       	ldd	r24, Y+9	; 0x09
    6cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cd0:	20 e0       	ldi	r18, 0x00	; 0
    6cd2:	30 e0       	ldi	r19, 0x00	; 0
    6cd4:	40 e8       	ldi	r20, 0x80	; 128
    6cd6:	5f e3       	ldi	r21, 0x3F	; 63
    6cd8:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6cdc:	88 23       	and	r24, r24
    6cde:	2c f4       	brge	.+10     	; 0x6cea <Wait_For_Input+0x8e>
		__ticks = 1;
    6ce0:	81 e0       	ldi	r24, 0x01	; 1
    6ce2:	90 e0       	ldi	r25, 0x00	; 0
    6ce4:	9e 83       	std	Y+6, r25	; 0x06
    6ce6:	8d 83       	std	Y+5, r24	; 0x05
    6ce8:	3f c0       	rjmp	.+126    	; 0x6d68 <Wait_For_Input+0x10c>
	else if (__tmp > 65535)
    6cea:	6f 81       	ldd	r22, Y+7	; 0x07
    6cec:	78 85       	ldd	r23, Y+8	; 0x08
    6cee:	89 85       	ldd	r24, Y+9	; 0x09
    6cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    6cf2:	20 e0       	ldi	r18, 0x00	; 0
    6cf4:	3f ef       	ldi	r19, 0xFF	; 255
    6cf6:	4f e7       	ldi	r20, 0x7F	; 127
    6cf8:	57 e4       	ldi	r21, 0x47	; 71
    6cfa:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6cfe:	18 16       	cp	r1, r24
    6d00:	4c f5       	brge	.+82     	; 0x6d54 <Wait_For_Input+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d02:	6b 85       	ldd	r22, Y+11	; 0x0b
    6d04:	7c 85       	ldd	r23, Y+12	; 0x0c
    6d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d08:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d0a:	20 e0       	ldi	r18, 0x00	; 0
    6d0c:	30 e0       	ldi	r19, 0x00	; 0
    6d0e:	40 e2       	ldi	r20, 0x20	; 32
    6d10:	51 e4       	ldi	r21, 0x41	; 65
    6d12:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6d16:	dc 01       	movw	r26, r24
    6d18:	cb 01       	movw	r24, r22
    6d1a:	bc 01       	movw	r22, r24
    6d1c:	cd 01       	movw	r24, r26
    6d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d22:	dc 01       	movw	r26, r24
    6d24:	cb 01       	movw	r24, r22
    6d26:	9e 83       	std	Y+6, r25	; 0x06
    6d28:	8d 83       	std	Y+5, r24	; 0x05
    6d2a:	0f c0       	rjmp	.+30     	; 0x6d4a <Wait_For_Input+0xee>
    6d2c:	88 ec       	ldi	r24, 0xC8	; 200
    6d2e:	90 e0       	ldi	r25, 0x00	; 0
    6d30:	9c 83       	std	Y+4, r25	; 0x04
    6d32:	8b 83       	std	Y+3, r24	; 0x03
    6d34:	8b 81       	ldd	r24, Y+3	; 0x03
    6d36:	9c 81       	ldd	r25, Y+4	; 0x04
    6d38:	01 97       	sbiw	r24, 0x01	; 1
    6d3a:	f1 f7       	brne	.-4      	; 0x6d38 <Wait_For_Input+0xdc>
    6d3c:	9c 83       	std	Y+4, r25	; 0x04
    6d3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d40:	8d 81       	ldd	r24, Y+5	; 0x05
    6d42:	9e 81       	ldd	r25, Y+6	; 0x06
    6d44:	01 97       	sbiw	r24, 0x01	; 1
    6d46:	9e 83       	std	Y+6, r25	; 0x06
    6d48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    6d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    6d4e:	00 97       	sbiw	r24, 0x00	; 0
    6d50:	69 f7       	brne	.-38     	; 0x6d2c <Wait_For_Input+0xd0>
    6d52:	14 c0       	rjmp	.+40     	; 0x6d7c <Wait_For_Input+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d54:	6f 81       	ldd	r22, Y+7	; 0x07
    6d56:	78 85       	ldd	r23, Y+8	; 0x08
    6d58:	89 85       	ldd	r24, Y+9	; 0x09
    6d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d60:	dc 01       	movw	r26, r24
    6d62:	cb 01       	movw	r24, r22
    6d64:	9e 83       	std	Y+6, r25	; 0x06
    6d66:	8d 83       	std	Y+5, r24	; 0x05
    6d68:	8d 81       	ldd	r24, Y+5	; 0x05
    6d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    6d6c:	9a 83       	std	Y+2, r25	; 0x02
    6d6e:	89 83       	std	Y+1, r24	; 0x01
    6d70:	89 81       	ldd	r24, Y+1	; 0x01
    6d72:	9a 81       	ldd	r25, Y+2	; 0x02
    6d74:	01 97       	sbiw	r24, 0x01	; 1
    6d76:	f1 f7       	brne	.-4      	; 0x6d74 <Wait_For_Input+0x118>
    6d78:	9a 83       	std	Y+2, r25	; 0x02
    6d7a:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(1);
		elapsed++;
    6d7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d7e:	98 89       	ldd	r25, Y+16	; 0x10
    6d80:	01 96       	adiw	r24, 0x01	; 1
    6d82:	98 8b       	std	Y+16, r25	; 0x10
    6d84:	8f 87       	std	Y+15, r24	; 0x0f
}

u8 Wait_For_Input(u8 *input, u16 timeout_ms)
{
	u16 elapsed = 0;
	while (elapsed < timeout_ms)
    6d86:	2f 85       	ldd	r18, Y+15	; 0x0f
    6d88:	38 89       	ldd	r19, Y+16	; 0x10
    6d8a:	8b 89       	ldd	r24, Y+19	; 0x13
    6d8c:	9c 89       	ldd	r25, Y+20	; 0x14
    6d8e:	28 17       	cp	r18, r24
    6d90:	39 07       	cpc	r19, r25
    6d92:	08 f4       	brcc	.+2      	; 0x6d96 <Wait_For_Input+0x13a>
    6d94:	74 cf       	rjmp	.-280    	; 0x6c7e <Wait_For_Input+0x22>
			return 1; // Input received
		}
		_delay_ms(1);
		elapsed++;
	}
	return 0; // Timeout
    6d96:	1d 8a       	std	Y+21, r1	; 0x15
    6d98:	8d 89       	ldd	r24, Y+21	; 0x15
}
    6d9a:	65 96       	adiw	r28, 0x15	; 21
    6d9c:	0f b6       	in	r0, 0x3f	; 63
    6d9e:	f8 94       	cli
    6da0:	de bf       	out	0x3e, r29	; 62
    6da2:	0f be       	out	0x3f, r0	; 63
    6da4:	cd bf       	out	0x3d, r28	; 61
    6da6:	cf 91       	pop	r28
    6da8:	df 91       	pop	r29
    6daa:	08 95       	ret

00006dac <Display_Error>:

void Display_Error(const u8 *message)
{
    6dac:	df 93       	push	r29
    6dae:	cf 93       	push	r28
    6db0:	cd b7       	in	r28, 0x3d	; 61
    6db2:	de b7       	in	r29, 0x3e	; 62
    6db4:	60 97       	sbiw	r28, 0x10	; 16
    6db6:	0f b6       	in	r0, 0x3f	; 63
    6db8:	f8 94       	cli
    6dba:	de bf       	out	0x3e, r29	; 62
    6dbc:	0f be       	out	0x3f, r0	; 63
    6dbe:	cd bf       	out	0x3d, r28	; 61
    6dc0:	98 8b       	std	Y+16, r25	; 0x10
    6dc2:	8f 87       	std	Y+15, r24	; 0x0f
	CLCD_vClearScreen();
    6dc4:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
	CLCD_vSendString((u8 *)"Error:");
    6dc8:	86 e9       	ldi	r24, 0x96	; 150
    6dca:	93 e0       	ldi	r25, 0x03	; 3
    6dcc:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    6dd0:	82 e0       	ldi	r24, 0x02	; 2
    6dd2:	61 e0       	ldi	r22, 0x01	; 1
    6dd4:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
	CLCD_vSendString((u8 *)message);
    6dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    6dda:	98 89       	ldd	r25, Y+16	; 0x10
    6ddc:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    6de0:	80 e0       	ldi	r24, 0x00	; 0
    6de2:	90 e0       	ldi	r25, 0x00	; 0
    6de4:	aa ef       	ldi	r26, 0xFA	; 250
    6de6:	b4 e4       	ldi	r27, 0x44	; 68
    6de8:	8b 87       	std	Y+11, r24	; 0x0b
    6dea:	9c 87       	std	Y+12, r25	; 0x0c
    6dec:	ad 87       	std	Y+13, r26	; 0x0d
    6dee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    6df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    6df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    6df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    6df8:	20 e0       	ldi	r18, 0x00	; 0
    6dfa:	30 e0       	ldi	r19, 0x00	; 0
    6dfc:	4a ef       	ldi	r20, 0xFA	; 250
    6dfe:	54 e4       	ldi	r21, 0x44	; 68
    6e00:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6e04:	dc 01       	movw	r26, r24
    6e06:	cb 01       	movw	r24, r22
    6e08:	8f 83       	std	Y+7, r24	; 0x07
    6e0a:	98 87       	std	Y+8, r25	; 0x08
    6e0c:	a9 87       	std	Y+9, r26	; 0x09
    6e0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6e10:	6f 81       	ldd	r22, Y+7	; 0x07
    6e12:	78 85       	ldd	r23, Y+8	; 0x08
    6e14:	89 85       	ldd	r24, Y+9	; 0x09
    6e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e18:	20 e0       	ldi	r18, 0x00	; 0
    6e1a:	30 e0       	ldi	r19, 0x00	; 0
    6e1c:	40 e8       	ldi	r20, 0x80	; 128
    6e1e:	5f e3       	ldi	r21, 0x3F	; 63
    6e20:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6e24:	88 23       	and	r24, r24
    6e26:	2c f4       	brge	.+10     	; 0x6e32 <Display_Error+0x86>
		__ticks = 1;
    6e28:	81 e0       	ldi	r24, 0x01	; 1
    6e2a:	90 e0       	ldi	r25, 0x00	; 0
    6e2c:	9e 83       	std	Y+6, r25	; 0x06
    6e2e:	8d 83       	std	Y+5, r24	; 0x05
    6e30:	3f c0       	rjmp	.+126    	; 0x6eb0 <Display_Error+0x104>
	else if (__tmp > 65535)
    6e32:	6f 81       	ldd	r22, Y+7	; 0x07
    6e34:	78 85       	ldd	r23, Y+8	; 0x08
    6e36:	89 85       	ldd	r24, Y+9	; 0x09
    6e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e3a:	20 e0       	ldi	r18, 0x00	; 0
    6e3c:	3f ef       	ldi	r19, 0xFF	; 255
    6e3e:	4f e7       	ldi	r20, 0x7F	; 127
    6e40:	57 e4       	ldi	r21, 0x47	; 71
    6e42:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6e46:	18 16       	cp	r1, r24
    6e48:	4c f5       	brge	.+82     	; 0x6e9c <Display_Error+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e52:	20 e0       	ldi	r18, 0x00	; 0
    6e54:	30 e0       	ldi	r19, 0x00	; 0
    6e56:	40 e2       	ldi	r20, 0x20	; 32
    6e58:	51 e4       	ldi	r21, 0x41	; 65
    6e5a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6e5e:	dc 01       	movw	r26, r24
    6e60:	cb 01       	movw	r24, r22
    6e62:	bc 01       	movw	r22, r24
    6e64:	cd 01       	movw	r24, r26
    6e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e6a:	dc 01       	movw	r26, r24
    6e6c:	cb 01       	movw	r24, r22
    6e6e:	9e 83       	std	Y+6, r25	; 0x06
    6e70:	8d 83       	std	Y+5, r24	; 0x05
    6e72:	0f c0       	rjmp	.+30     	; 0x6e92 <Display_Error+0xe6>
    6e74:	88 ec       	ldi	r24, 0xC8	; 200
    6e76:	90 e0       	ldi	r25, 0x00	; 0
    6e78:	9c 83       	std	Y+4, r25	; 0x04
    6e7a:	8b 83       	std	Y+3, r24	; 0x03
    6e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    6e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    6e80:	01 97       	sbiw	r24, 0x01	; 1
    6e82:	f1 f7       	brne	.-4      	; 0x6e80 <Display_Error+0xd4>
    6e84:	9c 83       	std	Y+4, r25	; 0x04
    6e86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e88:	8d 81       	ldd	r24, Y+5	; 0x05
    6e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    6e8c:	01 97       	sbiw	r24, 0x01	; 1
    6e8e:	9e 83       	std	Y+6, r25	; 0x06
    6e90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6e92:	8d 81       	ldd	r24, Y+5	; 0x05
    6e94:	9e 81       	ldd	r25, Y+6	; 0x06
    6e96:	00 97       	sbiw	r24, 0x00	; 0
    6e98:	69 f7       	brne	.-38     	; 0x6e74 <Display_Error+0xc8>
    6e9a:	14 c0       	rjmp	.+40     	; 0x6ec4 <Display_Error+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    6e9e:	78 85       	ldd	r23, Y+8	; 0x08
    6ea0:	89 85       	ldd	r24, Y+9	; 0x09
    6ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ea8:	dc 01       	movw	r26, r24
    6eaa:	cb 01       	movw	r24, r22
    6eac:	9e 83       	std	Y+6, r25	; 0x06
    6eae:	8d 83       	std	Y+5, r24	; 0x05
    6eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    6eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    6eb4:	9a 83       	std	Y+2, r25	; 0x02
    6eb6:	89 83       	std	Y+1, r24	; 0x01
    6eb8:	89 81       	ldd	r24, Y+1	; 0x01
    6eba:	9a 81       	ldd	r25, Y+2	; 0x02
    6ebc:	01 97       	sbiw	r24, 0x01	; 1
    6ebe:	f1 f7       	brne	.-4      	; 0x6ebc <Display_Error+0x110>
    6ec0:	9a 83       	std	Y+2, r25	; 0x02
    6ec2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(DISPLAY_DELAY_MS);
}
    6ec4:	60 96       	adiw	r28, 0x10	; 16
    6ec6:	0f b6       	in	r0, 0x3f	; 63
    6ec8:	f8 94       	cli
    6eca:	de bf       	out	0x3e, r29	; 62
    6ecc:	0f be       	out	0x3f, r0	; 63
    6ece:	cd bf       	out	0x3d, r28	; 61
    6ed0:	cf 91       	pop	r28
    6ed2:	df 91       	pop	r29
    6ed4:	08 95       	ret

00006ed6 <Scroll_Text>:

void Scroll_Text(const u8 *text, u8 row)
{
    6ed6:	df 93       	push	r29
    6ed8:	cf 93       	push	r28
    6eda:	cd b7       	in	r28, 0x3d	; 61
    6edc:	de b7       	in	r29, 0x3e	; 62
    6ede:	64 97       	sbiw	r28, 0x14	; 20
    6ee0:	0f b6       	in	r0, 0x3f	; 63
    6ee2:	f8 94       	cli
    6ee4:	de bf       	out	0x3e, r29	; 62
    6ee6:	0f be       	out	0x3f, r0	; 63
    6ee8:	cd bf       	out	0x3d, r28	; 61
    6eea:	9b 8b       	std	Y+19, r25	; 0x13
    6eec:	8a 8b       	std	Y+18, r24	; 0x12
    6eee:	6c 8b       	std	Y+20, r22	; 0x14
	u8 length = 0;
    6ef0:	19 8a       	std	Y+17, r1	; 0x11
    6ef2:	03 c0       	rjmp	.+6      	; 0x6efa <Scroll_Text+0x24>
	while (text[length] != '\0')
		length++;
    6ef4:	89 89       	ldd	r24, Y+17	; 0x11
    6ef6:	8f 5f       	subi	r24, 0xFF	; 255
    6ef8:	89 8b       	std	Y+17, r24	; 0x11
}

void Scroll_Text(const u8 *text, u8 row)
{
	u8 length = 0;
	while (text[length] != '\0')
    6efa:	89 89       	ldd	r24, Y+17	; 0x11
    6efc:	28 2f       	mov	r18, r24
    6efe:	30 e0       	ldi	r19, 0x00	; 0
    6f00:	8a 89       	ldd	r24, Y+18	; 0x12
    6f02:	9b 89       	ldd	r25, Y+19	; 0x13
    6f04:	fc 01       	movw	r30, r24
    6f06:	e2 0f       	add	r30, r18
    6f08:	f3 1f       	adc	r31, r19
    6f0a:	80 81       	ld	r24, Z
    6f0c:	88 23       	and	r24, r24
    6f0e:	91 f7       	brne	.-28     	; 0x6ef4 <Scroll_Text+0x1e>
		length++;

	if (length <= 16)
    6f10:	89 89       	ldd	r24, Y+17	; 0x11
    6f12:	81 31       	cpi	r24, 0x11	; 17
    6f14:	48 f4       	brcc	.+18     	; 0x6f28 <Scroll_Text+0x52>
	{
		CLCD_vSetPosition(row, 1);
    6f16:	8c 89       	ldd	r24, Y+20	; 0x14
    6f18:	61 e0       	ldi	r22, 0x01	; 1
    6f1a:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
		CLCD_vSendString((u8 *)text);
    6f1e:	8a 89       	ldd	r24, Y+18	; 0x12
    6f20:	9b 89       	ldd	r25, Y+19	; 0x13
    6f22:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
    6f26:	b1 c0       	rjmp	.+354    	; 0x708a <Scroll_Text+0x1b4>
		return;
	}

	for (u8 i = 0; i <= length - 16; i++)
    6f28:	18 8a       	std	Y+16, r1	; 0x10
    6f2a:	a4 c0       	rjmp	.+328    	; 0x7074 <Scroll_Text+0x19e>
	{
		CLCD_vSetPosition(row, 1);
    6f2c:	8c 89       	ldd	r24, Y+20	; 0x14
    6f2e:	61 e0       	ldi	r22, 0x01	; 1
    6f30:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
		for (u8 j = 0; j < 16; j++)
    6f34:	1f 86       	std	Y+15, r1	; 0x0f
    6f36:	26 c0       	rjmp	.+76     	; 0x6f84 <Scroll_Text+0xae>
		{
			if (i + j < length)
    6f38:	88 89       	ldd	r24, Y+16	; 0x10
    6f3a:	28 2f       	mov	r18, r24
    6f3c:	30 e0       	ldi	r19, 0x00	; 0
    6f3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f40:	88 2f       	mov	r24, r24
    6f42:	90 e0       	ldi	r25, 0x00	; 0
    6f44:	28 0f       	add	r18, r24
    6f46:	39 1f       	adc	r19, r25
    6f48:	89 89       	ldd	r24, Y+17	; 0x11
    6f4a:	88 2f       	mov	r24, r24
    6f4c:	90 e0       	ldi	r25, 0x00	; 0
    6f4e:	28 17       	cp	r18, r24
    6f50:	39 07       	cpc	r19, r25
    6f52:	94 f4       	brge	.+36     	; 0x6f78 <Scroll_Text+0xa2>
			{
				CLCD_vSendData(text[i + j]);
    6f54:	88 89       	ldd	r24, Y+16	; 0x10
    6f56:	28 2f       	mov	r18, r24
    6f58:	30 e0       	ldi	r19, 0x00	; 0
    6f5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f5c:	88 2f       	mov	r24, r24
    6f5e:	90 e0       	ldi	r25, 0x00	; 0
    6f60:	82 0f       	add	r24, r18
    6f62:	93 1f       	adc	r25, r19
    6f64:	9c 01       	movw	r18, r24
    6f66:	8a 89       	ldd	r24, Y+18	; 0x12
    6f68:	9b 89       	ldd	r25, Y+19	; 0x13
    6f6a:	fc 01       	movw	r30, r24
    6f6c:	e2 0f       	add	r30, r18
    6f6e:	f3 1f       	adc	r31, r19
    6f70:	80 81       	ld	r24, Z
    6f72:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
    6f76:	03 c0       	rjmp	.+6      	; 0x6f7e <Scroll_Text+0xa8>
			}
			else
			{
				CLCD_vSendData(' ');
    6f78:	80 e2       	ldi	r24, 0x20	; 32
    6f7a:	0e 94 91 18 	call	0x3122	; 0x3122 <CLCD_vSendData>
	}

	for (u8 i = 0; i <= length - 16; i++)
	{
		CLCD_vSetPosition(row, 1);
		for (u8 j = 0; j < 16; j++)
    6f7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f80:	8f 5f       	subi	r24, 0xFF	; 255
    6f82:	8f 87       	std	Y+15, r24	; 0x0f
    6f84:	8f 85       	ldd	r24, Y+15	; 0x0f
    6f86:	80 31       	cpi	r24, 0x10	; 16
    6f88:	b8 f2       	brcs	.-82     	; 0x6f38 <Scroll_Text+0x62>
    6f8a:	80 e0       	ldi	r24, 0x00	; 0
    6f8c:	90 e0       	ldi	r25, 0x00	; 0
    6f8e:	a6 e9       	ldi	r26, 0x96	; 150
    6f90:	b3 e4       	ldi	r27, 0x43	; 67
    6f92:	8b 87       	std	Y+11, r24	; 0x0b
    6f94:	9c 87       	std	Y+12, r25	; 0x0c
    6f96:	ad 87       	std	Y+13, r26	; 0x0d
    6f98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    6fa2:	20 e0       	ldi	r18, 0x00	; 0
    6fa4:	30 e0       	ldi	r19, 0x00	; 0
    6fa6:	4a ef       	ldi	r20, 0xFA	; 250
    6fa8:	54 e4       	ldi	r21, 0x44	; 68
    6faa:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    6fae:	dc 01       	movw	r26, r24
    6fb0:	cb 01       	movw	r24, r22
    6fb2:	8f 83       	std	Y+7, r24	; 0x07
    6fb4:	98 87       	std	Y+8, r25	; 0x08
    6fb6:	a9 87       	std	Y+9, r26	; 0x09
    6fb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6fba:	6f 81       	ldd	r22, Y+7	; 0x07
    6fbc:	78 85       	ldd	r23, Y+8	; 0x08
    6fbe:	89 85       	ldd	r24, Y+9	; 0x09
    6fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fc2:	20 e0       	ldi	r18, 0x00	; 0
    6fc4:	30 e0       	ldi	r19, 0x00	; 0
    6fc6:	40 e8       	ldi	r20, 0x80	; 128
    6fc8:	5f e3       	ldi	r21, 0x3F	; 63
    6fca:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    6fce:	88 23       	and	r24, r24
    6fd0:	2c f4       	brge	.+10     	; 0x6fdc <Scroll_Text+0x106>
		__ticks = 1;
    6fd2:	81 e0       	ldi	r24, 0x01	; 1
    6fd4:	90 e0       	ldi	r25, 0x00	; 0
    6fd6:	9e 83       	std	Y+6, r25	; 0x06
    6fd8:	8d 83       	std	Y+5, r24	; 0x05
    6fda:	3f c0       	rjmp	.+126    	; 0x705a <Scroll_Text+0x184>
	else if (__tmp > 65535)
    6fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    6fde:	78 85       	ldd	r23, Y+8	; 0x08
    6fe0:	89 85       	ldd	r24, Y+9	; 0x09
    6fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fe4:	20 e0       	ldi	r18, 0x00	; 0
    6fe6:	3f ef       	ldi	r19, 0xFF	; 255
    6fe8:	4f e7       	ldi	r20, 0x7F	; 127
    6fea:	57 e4       	ldi	r21, 0x47	; 71
    6fec:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    6ff0:	18 16       	cp	r1, r24
    6ff2:	4c f5       	brge	.+82     	; 0x7046 <Scroll_Text+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ffc:	20 e0       	ldi	r18, 0x00	; 0
    6ffe:	30 e0       	ldi	r19, 0x00	; 0
    7000:	40 e2       	ldi	r20, 0x20	; 32
    7002:	51 e4       	ldi	r21, 0x41	; 65
    7004:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    7008:	dc 01       	movw	r26, r24
    700a:	cb 01       	movw	r24, r22
    700c:	bc 01       	movw	r22, r24
    700e:	cd 01       	movw	r24, r26
    7010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7014:	dc 01       	movw	r26, r24
    7016:	cb 01       	movw	r24, r22
    7018:	9e 83       	std	Y+6, r25	; 0x06
    701a:	8d 83       	std	Y+5, r24	; 0x05
    701c:	0f c0       	rjmp	.+30     	; 0x703c <Scroll_Text+0x166>
    701e:	88 ec       	ldi	r24, 0xC8	; 200
    7020:	90 e0       	ldi	r25, 0x00	; 0
    7022:	9c 83       	std	Y+4, r25	; 0x04
    7024:	8b 83       	std	Y+3, r24	; 0x03
    7026:	8b 81       	ldd	r24, Y+3	; 0x03
    7028:	9c 81       	ldd	r25, Y+4	; 0x04
    702a:	01 97       	sbiw	r24, 0x01	; 1
    702c:	f1 f7       	brne	.-4      	; 0x702a <Scroll_Text+0x154>
    702e:	9c 83       	std	Y+4, r25	; 0x04
    7030:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7032:	8d 81       	ldd	r24, Y+5	; 0x05
    7034:	9e 81       	ldd	r25, Y+6	; 0x06
    7036:	01 97       	sbiw	r24, 0x01	; 1
    7038:	9e 83       	std	Y+6, r25	; 0x06
    703a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    703c:	8d 81       	ldd	r24, Y+5	; 0x05
    703e:	9e 81       	ldd	r25, Y+6	; 0x06
    7040:	00 97       	sbiw	r24, 0x00	; 0
    7042:	69 f7       	brne	.-38     	; 0x701e <Scroll_Text+0x148>
    7044:	14 c0       	rjmp	.+40     	; 0x706e <Scroll_Text+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7046:	6f 81       	ldd	r22, Y+7	; 0x07
    7048:	78 85       	ldd	r23, Y+8	; 0x08
    704a:	89 85       	ldd	r24, Y+9	; 0x09
    704c:	9a 85       	ldd	r25, Y+10	; 0x0a
    704e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7052:	dc 01       	movw	r26, r24
    7054:	cb 01       	movw	r24, r22
    7056:	9e 83       	std	Y+6, r25	; 0x06
    7058:	8d 83       	std	Y+5, r24	; 0x05
    705a:	8d 81       	ldd	r24, Y+5	; 0x05
    705c:	9e 81       	ldd	r25, Y+6	; 0x06
    705e:	9a 83       	std	Y+2, r25	; 0x02
    7060:	89 83       	std	Y+1, r24	; 0x01
    7062:	89 81       	ldd	r24, Y+1	; 0x01
    7064:	9a 81       	ldd	r25, Y+2	; 0x02
    7066:	01 97       	sbiw	r24, 0x01	; 1
    7068:	f1 f7       	brne	.-4      	; 0x7066 <Scroll_Text+0x190>
    706a:	9a 83       	std	Y+2, r25	; 0x02
    706c:	89 83       	std	Y+1, r24	; 0x01
		CLCD_vSetPosition(row, 1);
		CLCD_vSendString((u8 *)text);
		return;
	}

	for (u8 i = 0; i <= length - 16; i++)
    706e:	88 89       	ldd	r24, Y+16	; 0x10
    7070:	8f 5f       	subi	r24, 0xFF	; 255
    7072:	88 8b       	std	Y+16, r24	; 0x10
    7074:	88 89       	ldd	r24, Y+16	; 0x10
    7076:	28 2f       	mov	r18, r24
    7078:	30 e0       	ldi	r19, 0x00	; 0
    707a:	89 89       	ldd	r24, Y+17	; 0x11
    707c:	88 2f       	mov	r24, r24
    707e:	90 e0       	ldi	r25, 0x00	; 0
    7080:	40 97       	sbiw	r24, 0x10	; 16
    7082:	82 17       	cp	r24, r18
    7084:	93 07       	cpc	r25, r19
    7086:	0c f0       	brlt	.+2      	; 0x708a <Scroll_Text+0x1b4>
    7088:	51 cf       	rjmp	.-350    	; 0x6f2c <Scroll_Text+0x56>
				CLCD_vSendData(' ');
			}
		}
		_delay_ms(SCROLL_DELAY_MS);
	}
}
    708a:	64 96       	adiw	r28, 0x14	; 20
    708c:	0f b6       	in	r0, 0x3f	; 63
    708e:	f8 94       	cli
    7090:	de bf       	out	0x3e, r29	; 62
    7092:	0f be       	out	0x3f, r0	; 63
    7094:	cd bf       	out	0x3d, r28	; 61
    7096:	cf 91       	pop	r28
    7098:	df 91       	pop	r29
    709a:	08 95       	ret

0000709c <Display_Menu>:

void Display_Menu(void)
{
    709c:	df 93       	push	r29
    709e:	cf 93       	push	r28
    70a0:	cd b7       	in	r28, 0x3d	; 61
    70a2:	de b7       	in	r29, 0x3e	; 62
	CLCD_vClearScreen();
    70a4:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
	CLCD_vSendString((u8 *)"1:Sign In");
    70a8:	8d e9       	ldi	r24, 0x9D	; 157
    70aa:	93 e0       	ldi	r25, 0x03	; 3
    70ac:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
	CLCD_vSetPosition(2, 1);
    70b0:	82 e0       	ldi	r24, 0x02	; 2
    70b2:	61 e0       	ldi	r22, 0x01	; 1
    70b4:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
	CLCD_vSendString((u8 *)"2:New User");
    70b8:	87 ea       	ldi	r24, 0xA7	; 167
    70ba:	93 e0       	ldi	r25, 0x03	; 3
    70bc:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
	CLCD_vSetPosition(3, 1);
    70c0:	83 e0       	ldi	r24, 0x03	; 3
    70c2:	61 e0       	ldi	r22, 0x01	; 1
    70c4:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
	CLCD_vSendString((u8 *)"Users:");
    70c8:	82 eb       	ldi	r24, 0xB2	; 178
    70ca:	93 e0       	ldi	r25, 0x03	; 3
    70cc:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
	CLCD_vSendIntNumber(User_Count);
    70d0:	80 91 66 05 	lds	r24, 0x0566
    70d4:	88 2f       	mov	r24, r24
    70d6:	90 e0       	ldi	r25, 0x00	; 0
    70d8:	a0 e0       	ldi	r26, 0x00	; 0
    70da:	b0 e0       	ldi	r27, 0x00	; 0
    70dc:	bc 01       	movw	r22, r24
    70de:	cd 01       	movw	r24, r26
    70e0:	0e 94 8b 1a 	call	0x3516	; 0x3516 <CLCD_vSendIntNumber>
	CLCD_vSendString((u8 *)"/");
    70e4:	89 eb       	ldi	r24, 0xB9	; 185
    70e6:	93 e0       	ldi	r25, 0x03	; 3
    70e8:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
	CLCD_vSendIntNumber(MAX_USERS);
    70ec:	67 e1       	ldi	r22, 0x17	; 23
    70ee:	70 e0       	ldi	r23, 0x00	; 0
    70f0:	80 e0       	ldi	r24, 0x00	; 0
    70f2:	90 e0       	ldi	r25, 0x00	; 0
    70f4:	0e 94 8b 1a 	call	0x3516	; 0x3516 <CLCD_vSendIntNumber>

	// Show system status
	CLCD_vSetPosition(4, 1);
    70f8:	84 e0       	ldi	r24, 0x04	; 4
    70fa:	61 e0       	ldi	r22, 0x01	; 1
    70fc:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
	if (Tries < Tries_Max)
    7100:	80 91 55 05 	lds	r24, 0x0555
    7104:	83 30       	cpi	r24, 0x03	; 3
    7106:	78 f4       	brcc	.+30     	; 0x7126 <Display_Menu+0x8a>
	{
		CLCD_vSendString((u8 *)"Tries Left: ");
    7108:	8b eb       	ldi	r24, 0xBB	; 187
    710a:	93 e0       	ldi	r25, 0x03	; 3
    710c:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
		CLCD_vSendIntNumber(Tries);
    7110:	80 91 55 05 	lds	r24, 0x0555
    7114:	88 2f       	mov	r24, r24
    7116:	90 e0       	ldi	r25, 0x00	; 0
    7118:	a0 e0       	ldi	r26, 0x00	; 0
    711a:	b0 e0       	ldi	r27, 0x00	; 0
    711c:	bc 01       	movw	r22, r24
    711e:	cd 01       	movw	r24, r26
    7120:	0e 94 8b 1a 	call	0x3516	; 0x3516 <CLCD_vSendIntNumber>
    7124:	04 c0       	rjmp	.+8      	; 0x712e <Display_Menu+0x92>
	}
	else
	{
		CLCD_vSendString((u8 *)"System Ready");
    7126:	88 ec       	ldi	r24, 0xC8	; 200
    7128:	93 e0       	ldi	r25, 0x03	; 3
    712a:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
	}
}
    712e:	cf 91       	pop	r28
    7130:	df 91       	pop	r29
    7132:	08 95       	ret

00007134 <main>:

int main(void)
{
    7134:	df 93       	push	r29
    7136:	cf 93       	push	r28
    7138:	cd b7       	in	r28, 0x3d	; 61
    713a:	de b7       	in	r29, 0x3e	; 62
    713c:	6e 97       	sbiw	r28, 0x1e	; 30
    713e:	0f b6       	in	r0, 0x3f	; 63
    7140:	f8 94       	cli
    7142:	de bf       	out	0x3e, r29	; 62
    7144:	0f be       	out	0x3f, r0	; 63
    7146:	cd bf       	out	0x3d, r28	; 61
  CLCD_vInit();
    7148:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <CLCD_vInit>
	// Show welcome screen
	Display_Welcome();
    714c:	0e 94 84 33 	call	0x6708	; 0x6708 <Display_Welcome>

	// Initialize and show status
	Display_Init_Status();
    7150:	0e 94 97 34 	call	0x692e	; 0x692e <Display_Init_Status>

	u8 choice;

	while (1)
	{
		Display_Menu();
    7154:	0e 94 4e 38 	call	0x709c	; 0x709c <Display_Menu>

		// Wait for input with timeout
		if (!Wait_For_Input(&choice, INPUT_TIMEOUT_MS))
    7158:	ce 01       	movw	r24, r28
    715a:	4d 96       	adiw	r24, 0x1d	; 29
    715c:	60 e3       	ldi	r22, 0x30	; 48
    715e:	75 e7       	ldi	r23, 0x75	; 117
    7160:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <Wait_For_Input>
    7164:	88 23       	and	r24, r24
    7166:	29 f4       	brne	.+10     	; 0x7172 <main+0x3e>
		{
			Display_Error((u8 *)"Input Timeout!");
    7168:	85 ed       	ldi	r24, 0xD5	; 213
    716a:	93 e0       	ldi	r25, 0x03	; 3
    716c:	0e 94 d6 36 	call	0x6dac	; 0x6dac <Display_Error>
    7170:	f1 cf       	rjmp	.-30     	; 0x7154 <main+0x20>
			continue;
		}

		if (choice == '1')
    7172:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7174:	81 33       	cpi	r24, 0x31	; 49
    7176:	b1 f4       	brne	.+44     	; 0x71a4 <main+0x70>
		{
			Sign_In();
    7178:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <Sign_In>

			// Check if this is the admin user (first user)
			Is_Admin = (Current_User == 0);
    717c:	80 91 65 05 	lds	r24, 0x0565
    7180:	1e 8e       	std	Y+30, r1	; 0x1e
    7182:	88 23       	and	r24, r24
    7184:	11 f4       	brne	.+4      	; 0x718a <main+0x56>
    7186:	81 e0       	ldi	r24, 0x01	; 1
    7188:	8e 8f       	std	Y+30, r24	; 0x1e
    718a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    718c:	80 93 67 05 	sts	0x0567, r24

			// Show appropriate menu based on user type
			if (Is_Admin)
    7190:	80 91 67 05 	lds	r24, 0x0567
    7194:	88 23       	and	r24, r24
    7196:	19 f0       	breq	.+6      	; 0x719e <main+0x6a>
			{
				Admin_Menu();
    7198:	0e 94 47 28 	call	0x508e	; 0x508e <Admin_Menu>
    719c:	db cf       	rjmp	.-74     	; 0x7154 <main+0x20>
			}
			else
			{
				User_Menu();
    719e:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <User_Menu>
    71a2:	d8 cf       	rjmp	.-80     	; 0x7154 <main+0x20>
			}
		}
		else if (choice == '2')
    71a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    71a6:	82 33       	cpi	r24, 0x32	; 50
    71a8:	09 f0       	breq	.+2      	; 0x71ac <main+0x78>
    71aa:	2a c1       	rjmp	.+596    	; 0x7400 <main+0x2cc>
		{
			if (User_Count >= MAX_USERS)
    71ac:	80 91 66 05 	lds	r24, 0x0566
    71b0:	87 31       	cpi	r24, 0x17	; 23
    71b2:	08 f4       	brcc	.+2      	; 0x71b6 <main+0x82>
    71b4:	87 c0       	rjmp	.+270    	; 0x72c4 <main+0x190>
			{
				CLCD_vClearScreen();
    71b6:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
				CLCD_vSendString((u8 *)"EEPROM Full!");
    71ba:	84 ee       	ldi	r24, 0xE4	; 228
    71bc:	93 e0       	ldi	r25, 0x03	; 3
    71be:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
				CLCD_vSetPosition(2, 1);
    71c2:	82 e0       	ldi	r24, 0x02	; 2
    71c4:	61 e0       	ldi	r22, 0x01	; 1
    71c6:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
				CLCD_vSendString((u8 *)"Max Users: ");
    71ca:	81 ef       	ldi	r24, 0xF1	; 241
    71cc:	93 e0       	ldi	r25, 0x03	; 3
    71ce:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
				CLCD_vSendIntNumber(MAX_USERS);
    71d2:	67 e1       	ldi	r22, 0x17	; 23
    71d4:	70 e0       	ldi	r23, 0x00	; 0
    71d6:	80 e0       	ldi	r24, 0x00	; 0
    71d8:	90 e0       	ldi	r25, 0x00	; 0
    71da:	0e 94 8b 1a 	call	0x3516	; 0x3516 <CLCD_vSendIntNumber>
    71de:	80 e0       	ldi	r24, 0x00	; 0
    71e0:	90 e0       	ldi	r25, 0x00	; 0
    71e2:	aa ef       	ldi	r26, 0xFA	; 250
    71e4:	b4 e4       	ldi	r27, 0x44	; 68
    71e6:	89 8f       	std	Y+25, r24	; 0x19
    71e8:	9a 8f       	std	Y+26, r25	; 0x1a
    71ea:	ab 8f       	std	Y+27, r26	; 0x1b
    71ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    71ee:	69 8d       	ldd	r22, Y+25	; 0x19
    71f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    71f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    71f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    71f6:	20 e0       	ldi	r18, 0x00	; 0
    71f8:	30 e0       	ldi	r19, 0x00	; 0
    71fa:	4a ef       	ldi	r20, 0xFA	; 250
    71fc:	54 e4       	ldi	r21, 0x44	; 68
    71fe:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    7202:	dc 01       	movw	r26, r24
    7204:	cb 01       	movw	r24, r22
    7206:	8d 8b       	std	Y+21, r24	; 0x15
    7208:	9e 8b       	std	Y+22, r25	; 0x16
    720a:	af 8b       	std	Y+23, r26	; 0x17
    720c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    720e:	6d 89       	ldd	r22, Y+21	; 0x15
    7210:	7e 89       	ldd	r23, Y+22	; 0x16
    7212:	8f 89       	ldd	r24, Y+23	; 0x17
    7214:	98 8d       	ldd	r25, Y+24	; 0x18
    7216:	20 e0       	ldi	r18, 0x00	; 0
    7218:	30 e0       	ldi	r19, 0x00	; 0
    721a:	40 e8       	ldi	r20, 0x80	; 128
    721c:	5f e3       	ldi	r21, 0x3F	; 63
    721e:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    7222:	88 23       	and	r24, r24
    7224:	2c f4       	brge	.+10     	; 0x7230 <main+0xfc>
		__ticks = 1;
    7226:	81 e0       	ldi	r24, 0x01	; 1
    7228:	90 e0       	ldi	r25, 0x00	; 0
    722a:	9c 8b       	std	Y+20, r25	; 0x14
    722c:	8b 8b       	std	Y+19, r24	; 0x13
    722e:	3f c0       	rjmp	.+126    	; 0x72ae <main+0x17a>
	else if (__tmp > 65535)
    7230:	6d 89       	ldd	r22, Y+21	; 0x15
    7232:	7e 89       	ldd	r23, Y+22	; 0x16
    7234:	8f 89       	ldd	r24, Y+23	; 0x17
    7236:	98 8d       	ldd	r25, Y+24	; 0x18
    7238:	20 e0       	ldi	r18, 0x00	; 0
    723a:	3f ef       	ldi	r19, 0xFF	; 255
    723c:	4f e7       	ldi	r20, 0x7F	; 127
    723e:	57 e4       	ldi	r21, 0x47	; 71
    7240:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    7244:	18 16       	cp	r1, r24
    7246:	4c f5       	brge	.+82     	; 0x729a <main+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7248:	69 8d       	ldd	r22, Y+25	; 0x19
    724a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    724c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    724e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7250:	20 e0       	ldi	r18, 0x00	; 0
    7252:	30 e0       	ldi	r19, 0x00	; 0
    7254:	40 e2       	ldi	r20, 0x20	; 32
    7256:	51 e4       	ldi	r21, 0x41	; 65
    7258:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    725c:	dc 01       	movw	r26, r24
    725e:	cb 01       	movw	r24, r22
    7260:	bc 01       	movw	r22, r24
    7262:	cd 01       	movw	r24, r26
    7264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7268:	dc 01       	movw	r26, r24
    726a:	cb 01       	movw	r24, r22
    726c:	9c 8b       	std	Y+20, r25	; 0x14
    726e:	8b 8b       	std	Y+19, r24	; 0x13
    7270:	0f c0       	rjmp	.+30     	; 0x7290 <main+0x15c>
    7272:	88 ec       	ldi	r24, 0xC8	; 200
    7274:	90 e0       	ldi	r25, 0x00	; 0
    7276:	9a 8b       	std	Y+18, r25	; 0x12
    7278:	89 8b       	std	Y+17, r24	; 0x11
    727a:	89 89       	ldd	r24, Y+17	; 0x11
    727c:	9a 89       	ldd	r25, Y+18	; 0x12
    727e:	01 97       	sbiw	r24, 0x01	; 1
    7280:	f1 f7       	brne	.-4      	; 0x727e <main+0x14a>
    7282:	9a 8b       	std	Y+18, r25	; 0x12
    7284:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7286:	8b 89       	ldd	r24, Y+19	; 0x13
    7288:	9c 89       	ldd	r25, Y+20	; 0x14
    728a:	01 97       	sbiw	r24, 0x01	; 1
    728c:	9c 8b       	std	Y+20, r25	; 0x14
    728e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7290:	8b 89       	ldd	r24, Y+19	; 0x13
    7292:	9c 89       	ldd	r25, Y+20	; 0x14
    7294:	00 97       	sbiw	r24, 0x00	; 0
    7296:	69 f7       	brne	.-38     	; 0x7272 <main+0x13e>
    7298:	5d cf       	rjmp	.-326    	; 0x7154 <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    729a:	6d 89       	ldd	r22, Y+21	; 0x15
    729c:	7e 89       	ldd	r23, Y+22	; 0x16
    729e:	8f 89       	ldd	r24, Y+23	; 0x17
    72a0:	98 8d       	ldd	r25, Y+24	; 0x18
    72a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72a6:	dc 01       	movw	r26, r24
    72a8:	cb 01       	movw	r24, r22
    72aa:	9c 8b       	std	Y+20, r25	; 0x14
    72ac:	8b 8b       	std	Y+19, r24	; 0x13
    72ae:	8b 89       	ldd	r24, Y+19	; 0x13
    72b0:	9c 89       	ldd	r25, Y+20	; 0x14
    72b2:	98 8b       	std	Y+16, r25	; 0x10
    72b4:	8f 87       	std	Y+15, r24	; 0x0f
    72b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    72b8:	98 89       	ldd	r25, Y+16	; 0x10
    72ba:	01 97       	sbiw	r24, 0x01	; 1
    72bc:	f1 f7       	brne	.-4      	; 0x72ba <main+0x186>
    72be:	98 8b       	std	Y+16, r25	; 0x10
    72c0:	8f 87       	std	Y+15, r24	; 0x0f
    72c2:	48 cf       	rjmp	.-368    	; 0x7154 <main+0x20>
				_delay_ms(DISPLAY_DELAY_MS);
				continue;
			}

			// Check if username exists
			UserName_Set();
    72c4:	0e 94 1e 29 	call	0x523c	; 0x523c <UserName_Set>

			// Set password with complexity requirements
			PassWord_Set();
    72c8:	0e 94 d7 2a 	call	0x55ae	; 0x55ae <PassWord_Set>

			// Log the event
			Log_Event(EVENT_USER_CREATE, User_Count - 1);
    72cc:	80 91 66 05 	lds	r24, 0x0566
    72d0:	98 2f       	mov	r25, r24
    72d2:	91 50       	subi	r25, 0x01	; 1
    72d4:	86 e0       	ldi	r24, 0x06	; 6
    72d6:	69 2f       	mov	r22, r25
    72d8:	0e 94 fd 1f 	call	0x3ffa	; 0x3ffa <Log_Event>

			CLCD_vClearScreen();
    72dc:	0e 94 da 19 	call	0x33b4	; 0x33b4 <CLCD_vClearScreen>
			Scroll_Text((u8 *)"User Created Successfully!", 1);
    72e0:	8d ef       	ldi	r24, 0xFD	; 253
    72e2:	93 e0       	ldi	r25, 0x03	; 3
    72e4:	61 e0       	ldi	r22, 0x01	; 1
    72e6:	0e 94 6b 37 	call	0x6ed6	; 0x6ed6 <Scroll_Text>
			CLCD_vSetPosition(2, 1);
    72ea:	82 e0       	ldi	r24, 0x02	; 2
    72ec:	61 e0       	ldi	r22, 0x01	; 1
    72ee:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <CLCD_vSetPosition>
			CLCD_vSendString((u8 *)"Space Left: ");
    72f2:	88 e1       	ldi	r24, 0x18	; 24
    72f4:	94 e0       	ldi	r25, 0x04	; 4
    72f6:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CLCD_vSendString>
			CLCD_vSendIntNumber(MAX_USERS - User_Count);
    72fa:	80 91 66 05 	lds	r24, 0x0566
    72fe:	28 2f       	mov	r18, r24
    7300:	30 e0       	ldi	r19, 0x00	; 0
    7302:	87 e1       	ldi	r24, 0x17	; 23
    7304:	90 e0       	ldi	r25, 0x00	; 0
    7306:	82 1b       	sub	r24, r18
    7308:	93 0b       	sbc	r25, r19
    730a:	aa 27       	eor	r26, r26
    730c:	97 fd       	sbrc	r25, 7
    730e:	a0 95       	com	r26
    7310:	ba 2f       	mov	r27, r26
    7312:	bc 01       	movw	r22, r24
    7314:	cd 01       	movw	r24, r26
    7316:	0e 94 8b 1a 	call	0x3516	; 0x3516 <CLCD_vSendIntNumber>
    731a:	80 e0       	ldi	r24, 0x00	; 0
    731c:	90 e0       	ldi	r25, 0x00	; 0
    731e:	aa ef       	ldi	r26, 0xFA	; 250
    7320:	b4 e4       	ldi	r27, 0x44	; 68
    7322:	8b 87       	std	Y+11, r24	; 0x0b
    7324:	9c 87       	std	Y+12, r25	; 0x0c
    7326:	ad 87       	std	Y+13, r26	; 0x0d
    7328:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    732a:	6b 85       	ldd	r22, Y+11	; 0x0b
    732c:	7c 85       	ldd	r23, Y+12	; 0x0c
    732e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7330:	9e 85       	ldd	r25, Y+14	; 0x0e
    7332:	20 e0       	ldi	r18, 0x00	; 0
    7334:	30 e0       	ldi	r19, 0x00	; 0
    7336:	4a ef       	ldi	r20, 0xFA	; 250
    7338:	54 e4       	ldi	r21, 0x44	; 68
    733a:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    733e:	dc 01       	movw	r26, r24
    7340:	cb 01       	movw	r24, r22
    7342:	8f 83       	std	Y+7, r24	; 0x07
    7344:	98 87       	std	Y+8, r25	; 0x08
    7346:	a9 87       	std	Y+9, r26	; 0x09
    7348:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    734a:	6f 81       	ldd	r22, Y+7	; 0x07
    734c:	78 85       	ldd	r23, Y+8	; 0x08
    734e:	89 85       	ldd	r24, Y+9	; 0x09
    7350:	9a 85       	ldd	r25, Y+10	; 0x0a
    7352:	20 e0       	ldi	r18, 0x00	; 0
    7354:	30 e0       	ldi	r19, 0x00	; 0
    7356:	40 e8       	ldi	r20, 0x80	; 128
    7358:	5f e3       	ldi	r21, 0x3F	; 63
    735a:	0e 94 41 05 	call	0xa82	; 0xa82 <__ltsf2>
    735e:	88 23       	and	r24, r24
    7360:	2c f4       	brge	.+10     	; 0x736c <main+0x238>
		__ticks = 1;
    7362:	81 e0       	ldi	r24, 0x01	; 1
    7364:	90 e0       	ldi	r25, 0x00	; 0
    7366:	9e 83       	std	Y+6, r25	; 0x06
    7368:	8d 83       	std	Y+5, r24	; 0x05
    736a:	3f c0       	rjmp	.+126    	; 0x73ea <main+0x2b6>
	else if (__tmp > 65535)
    736c:	6f 81       	ldd	r22, Y+7	; 0x07
    736e:	78 85       	ldd	r23, Y+8	; 0x08
    7370:	89 85       	ldd	r24, Y+9	; 0x09
    7372:	9a 85       	ldd	r25, Y+10	; 0x0a
    7374:	20 e0       	ldi	r18, 0x00	; 0
    7376:	3f ef       	ldi	r19, 0xFF	; 255
    7378:	4f e7       	ldi	r20, 0x7F	; 127
    737a:	57 e4       	ldi	r21, 0x47	; 71
    737c:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__gtsf2>
    7380:	18 16       	cp	r1, r24
    7382:	4c f5       	brge	.+82     	; 0x73d6 <main+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7384:	6b 85       	ldd	r22, Y+11	; 0x0b
    7386:	7c 85       	ldd	r23, Y+12	; 0x0c
    7388:	8d 85       	ldd	r24, Y+13	; 0x0d
    738a:	9e 85       	ldd	r25, Y+14	; 0x0e
    738c:	20 e0       	ldi	r18, 0x00	; 0
    738e:	30 e0       	ldi	r19, 0x00	; 0
    7390:	40 e2       	ldi	r20, 0x20	; 32
    7392:	51 e4       	ldi	r21, 0x41	; 65
    7394:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3>
    7398:	dc 01       	movw	r26, r24
    739a:	cb 01       	movw	r24, r22
    739c:	bc 01       	movw	r22, r24
    739e:	cd 01       	movw	r24, r26
    73a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    73a4:	dc 01       	movw	r26, r24
    73a6:	cb 01       	movw	r24, r22
    73a8:	9e 83       	std	Y+6, r25	; 0x06
    73aa:	8d 83       	std	Y+5, r24	; 0x05
    73ac:	0f c0       	rjmp	.+30     	; 0x73cc <main+0x298>
    73ae:	88 ec       	ldi	r24, 0xC8	; 200
    73b0:	90 e0       	ldi	r25, 0x00	; 0
    73b2:	9c 83       	std	Y+4, r25	; 0x04
    73b4:	8b 83       	std	Y+3, r24	; 0x03
    73b6:	8b 81       	ldd	r24, Y+3	; 0x03
    73b8:	9c 81       	ldd	r25, Y+4	; 0x04
    73ba:	01 97       	sbiw	r24, 0x01	; 1
    73bc:	f1 f7       	brne	.-4      	; 0x73ba <main+0x286>
    73be:	9c 83       	std	Y+4, r25	; 0x04
    73c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    73c2:	8d 81       	ldd	r24, Y+5	; 0x05
    73c4:	9e 81       	ldd	r25, Y+6	; 0x06
    73c6:	01 97       	sbiw	r24, 0x01	; 1
    73c8:	9e 83       	std	Y+6, r25	; 0x06
    73ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    73cc:	8d 81       	ldd	r24, Y+5	; 0x05
    73ce:	9e 81       	ldd	r25, Y+6	; 0x06
    73d0:	00 97       	sbiw	r24, 0x00	; 0
    73d2:	69 f7       	brne	.-38     	; 0x73ae <main+0x27a>
    73d4:	bf ce       	rjmp	.-642    	; 0x7154 <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    73d6:	6f 81       	ldd	r22, Y+7	; 0x07
    73d8:	78 85       	ldd	r23, Y+8	; 0x08
    73da:	89 85       	ldd	r24, Y+9	; 0x09
    73dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    73de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    73e2:	dc 01       	movw	r26, r24
    73e4:	cb 01       	movw	r24, r22
    73e6:	9e 83       	std	Y+6, r25	; 0x06
    73e8:	8d 83       	std	Y+5, r24	; 0x05
    73ea:	8d 81       	ldd	r24, Y+5	; 0x05
    73ec:	9e 81       	ldd	r25, Y+6	; 0x06
    73ee:	9a 83       	std	Y+2, r25	; 0x02
    73f0:	89 83       	std	Y+1, r24	; 0x01
    73f2:	89 81       	ldd	r24, Y+1	; 0x01
    73f4:	9a 81       	ldd	r25, Y+2	; 0x02
    73f6:	01 97       	sbiw	r24, 0x01	; 1
    73f8:	f1 f7       	brne	.-4      	; 0x73f6 <main+0x2c2>
    73fa:	9a 83       	std	Y+2, r25	; 0x02
    73fc:	89 83       	std	Y+1, r24	; 0x01
    73fe:	aa ce       	rjmp	.-684    	; 0x7154 <main+0x20>
			_delay_ms(DISPLAY_DELAY_MS);
		}
		else
		{
			Display_Error((u8 *)"Invalid Choice!");
    7400:	85 e2       	ldi	r24, 0x25	; 37
    7402:	94 e0       	ldi	r25, 0x04	; 4
    7404:	0e 94 d6 36 	call	0x6dac	; 0x6dac <Display_Error>
    7408:	a5 ce       	rjmp	.-694    	; 0x7154 <main+0x20>

0000740a <__mulsi3>:
    740a:	62 9f       	mul	r22, r18
    740c:	d0 01       	movw	r26, r0
    740e:	73 9f       	mul	r23, r19
    7410:	f0 01       	movw	r30, r0
    7412:	82 9f       	mul	r24, r18
    7414:	e0 0d       	add	r30, r0
    7416:	f1 1d       	adc	r31, r1
    7418:	64 9f       	mul	r22, r20
    741a:	e0 0d       	add	r30, r0
    741c:	f1 1d       	adc	r31, r1
    741e:	92 9f       	mul	r25, r18
    7420:	f0 0d       	add	r31, r0
    7422:	83 9f       	mul	r24, r19
    7424:	f0 0d       	add	r31, r0
    7426:	74 9f       	mul	r23, r20
    7428:	f0 0d       	add	r31, r0
    742a:	65 9f       	mul	r22, r21
    742c:	f0 0d       	add	r31, r0
    742e:	99 27       	eor	r25, r25
    7430:	72 9f       	mul	r23, r18
    7432:	b0 0d       	add	r27, r0
    7434:	e1 1d       	adc	r30, r1
    7436:	f9 1f       	adc	r31, r25
    7438:	63 9f       	mul	r22, r19
    743a:	b0 0d       	add	r27, r0
    743c:	e1 1d       	adc	r30, r1
    743e:	f9 1f       	adc	r31, r25
    7440:	bd 01       	movw	r22, r26
    7442:	cf 01       	movw	r24, r30
    7444:	11 24       	eor	r1, r1
    7446:	08 95       	ret

00007448 <__udivmodqi4>:
    7448:	99 1b       	sub	r25, r25
    744a:	79 e0       	ldi	r23, 0x09	; 9
    744c:	04 c0       	rjmp	.+8      	; 0x7456 <__udivmodqi4_ep>

0000744e <__udivmodqi4_loop>:
    744e:	99 1f       	adc	r25, r25
    7450:	96 17       	cp	r25, r22
    7452:	08 f0       	brcs	.+2      	; 0x7456 <__udivmodqi4_ep>
    7454:	96 1b       	sub	r25, r22

00007456 <__udivmodqi4_ep>:
    7456:	88 1f       	adc	r24, r24
    7458:	7a 95       	dec	r23
    745a:	c9 f7       	brne	.-14     	; 0x744e <__udivmodqi4_loop>
    745c:	80 95       	com	r24
    745e:	08 95       	ret

00007460 <__udivmodsi4>:
    7460:	a1 e2       	ldi	r26, 0x21	; 33
    7462:	1a 2e       	mov	r1, r26
    7464:	aa 1b       	sub	r26, r26
    7466:	bb 1b       	sub	r27, r27
    7468:	fd 01       	movw	r30, r26
    746a:	0d c0       	rjmp	.+26     	; 0x7486 <__udivmodsi4_ep>

0000746c <__udivmodsi4_loop>:
    746c:	aa 1f       	adc	r26, r26
    746e:	bb 1f       	adc	r27, r27
    7470:	ee 1f       	adc	r30, r30
    7472:	ff 1f       	adc	r31, r31
    7474:	a2 17       	cp	r26, r18
    7476:	b3 07       	cpc	r27, r19
    7478:	e4 07       	cpc	r30, r20
    747a:	f5 07       	cpc	r31, r21
    747c:	20 f0       	brcs	.+8      	; 0x7486 <__udivmodsi4_ep>
    747e:	a2 1b       	sub	r26, r18
    7480:	b3 0b       	sbc	r27, r19
    7482:	e4 0b       	sbc	r30, r20
    7484:	f5 0b       	sbc	r31, r21

00007486 <__udivmodsi4_ep>:
    7486:	66 1f       	adc	r22, r22
    7488:	77 1f       	adc	r23, r23
    748a:	88 1f       	adc	r24, r24
    748c:	99 1f       	adc	r25, r25
    748e:	1a 94       	dec	r1
    7490:	69 f7       	brne	.-38     	; 0x746c <__udivmodsi4_loop>
    7492:	60 95       	com	r22
    7494:	70 95       	com	r23
    7496:	80 95       	com	r24
    7498:	90 95       	com	r25
    749a:	9b 01       	movw	r18, r22
    749c:	ac 01       	movw	r20, r24
    749e:	bd 01       	movw	r22, r26
    74a0:	cf 01       	movw	r24, r30
    74a2:	08 95       	ret

000074a4 <__divmodsi4>:
    74a4:	97 fb       	bst	r25, 7
    74a6:	09 2e       	mov	r0, r25
    74a8:	05 26       	eor	r0, r21
    74aa:	0e d0       	rcall	.+28     	; 0x74c8 <__divmodsi4_neg1>
    74ac:	57 fd       	sbrc	r21, 7
    74ae:	04 d0       	rcall	.+8      	; 0x74b8 <__divmodsi4_neg2>
    74b0:	d7 df       	rcall	.-82     	; 0x7460 <__udivmodsi4>
    74b2:	0a d0       	rcall	.+20     	; 0x74c8 <__divmodsi4_neg1>
    74b4:	00 1c       	adc	r0, r0
    74b6:	38 f4       	brcc	.+14     	; 0x74c6 <__divmodsi4_exit>

000074b8 <__divmodsi4_neg2>:
    74b8:	50 95       	com	r21
    74ba:	40 95       	com	r20
    74bc:	30 95       	com	r19
    74be:	21 95       	neg	r18
    74c0:	3f 4f       	sbci	r19, 0xFF	; 255
    74c2:	4f 4f       	sbci	r20, 0xFF	; 255
    74c4:	5f 4f       	sbci	r21, 0xFF	; 255

000074c6 <__divmodsi4_exit>:
    74c6:	08 95       	ret

000074c8 <__divmodsi4_neg1>:
    74c8:	f6 f7       	brtc	.-4      	; 0x74c6 <__divmodsi4_exit>
    74ca:	90 95       	com	r25
    74cc:	80 95       	com	r24
    74ce:	70 95       	com	r23
    74d0:	61 95       	neg	r22
    74d2:	7f 4f       	sbci	r23, 0xFF	; 255
    74d4:	8f 4f       	sbci	r24, 0xFF	; 255
    74d6:	9f 4f       	sbci	r25, 0xFF	; 255
    74d8:	08 95       	ret

000074da <__prologue_saves__>:
    74da:	2f 92       	push	r2
    74dc:	3f 92       	push	r3
    74de:	4f 92       	push	r4
    74e0:	5f 92       	push	r5
    74e2:	6f 92       	push	r6
    74e4:	7f 92       	push	r7
    74e6:	8f 92       	push	r8
    74e8:	9f 92       	push	r9
    74ea:	af 92       	push	r10
    74ec:	bf 92       	push	r11
    74ee:	cf 92       	push	r12
    74f0:	df 92       	push	r13
    74f2:	ef 92       	push	r14
    74f4:	ff 92       	push	r15
    74f6:	0f 93       	push	r16
    74f8:	1f 93       	push	r17
    74fa:	cf 93       	push	r28
    74fc:	df 93       	push	r29
    74fe:	cd b7       	in	r28, 0x3d	; 61
    7500:	de b7       	in	r29, 0x3e	; 62
    7502:	ca 1b       	sub	r28, r26
    7504:	db 0b       	sbc	r29, r27
    7506:	0f b6       	in	r0, 0x3f	; 63
    7508:	f8 94       	cli
    750a:	de bf       	out	0x3e, r29	; 62
    750c:	0f be       	out	0x3f, r0	; 63
    750e:	cd bf       	out	0x3d, r28	; 61
    7510:	09 94       	ijmp

00007512 <__epilogue_restores__>:
    7512:	2a 88       	ldd	r2, Y+18	; 0x12
    7514:	39 88       	ldd	r3, Y+17	; 0x11
    7516:	48 88       	ldd	r4, Y+16	; 0x10
    7518:	5f 84       	ldd	r5, Y+15	; 0x0f
    751a:	6e 84       	ldd	r6, Y+14	; 0x0e
    751c:	7d 84       	ldd	r7, Y+13	; 0x0d
    751e:	8c 84       	ldd	r8, Y+12	; 0x0c
    7520:	9b 84       	ldd	r9, Y+11	; 0x0b
    7522:	aa 84       	ldd	r10, Y+10	; 0x0a
    7524:	b9 84       	ldd	r11, Y+9	; 0x09
    7526:	c8 84       	ldd	r12, Y+8	; 0x08
    7528:	df 80       	ldd	r13, Y+7	; 0x07
    752a:	ee 80       	ldd	r14, Y+6	; 0x06
    752c:	fd 80       	ldd	r15, Y+5	; 0x05
    752e:	0c 81       	ldd	r16, Y+4	; 0x04
    7530:	1b 81       	ldd	r17, Y+3	; 0x03
    7532:	aa 81       	ldd	r26, Y+2	; 0x02
    7534:	b9 81       	ldd	r27, Y+1	; 0x01
    7536:	ce 0f       	add	r28, r30
    7538:	d1 1d       	adc	r29, r1
    753a:	0f b6       	in	r0, 0x3f	; 63
    753c:	f8 94       	cli
    753e:	de bf       	out	0x3e, r29	; 62
    7540:	0f be       	out	0x3f, r0	; 63
    7542:	cd bf       	out	0x3d, r28	; 61
    7544:	ed 01       	movw	r28, r26
    7546:	08 95       	ret

00007548 <_exit>:
    7548:	f8 94       	cli

0000754a <__stop_program>:
    754a:	ff cf       	rjmp	.-2      	; 0x754a <__stop_program>
